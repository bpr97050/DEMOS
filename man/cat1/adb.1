
ADB(1)                 ДЕМОС. Команды                 ADB(1)


ИИММЯЯ
       aaddbb - отладчик.

ФФООРРММААТТ
       aaddbb [--ww] [--kk] [_о_б_ф_а_й_л [_о_б_р_п_а_м]]

ООППИИССААННИИЕЕ
       Программа aaddbb является диалоговым  отладчиком  общего
       назначения.   Она  может  использоваться  в следующих
       целях:

       1) отладка программ на Си, ассемблере и других языках
          в интерактивном режиме;

       2) анализ состояния и  памяти  процесса,  прерванного
          системой,  образ  памяти  которого  записан в файл
          _c_o_r_e (если указан ключ --kk, то считается, что  файл
          _c_o_r_e записан в формате системного дампа).

       3) просмотр и изменение произвольных файлов.

       В первом случае  отлаживаемая  программа  запускается
       под контролем aaddbb, после чего пользователь может при-
       остановить или продолжить ее выполнение,  просмотреть
       память  и  регистры, установить точки останова, изме-
       нить память программы или порядок ее выполнения.  При
       этом для адресации можно использовать как абсолютные,
       так и символические адреса (используется таблица имен
       из выполняемого файла).

       Во втором случае aaddbb позволяет просматривать память и
       регистры  прерванной программы, используя выполняемый
       файл и файл с образом памяти.   Для  адресации  могут
       использоваться абсолютные и символические адреса.

       При работе с произвольными файлами  aaddbb  используется
       просто для просмотра и изменения файла.

       Аргумент _о_б_ф_а_й_л задает имя  исследуемого  файла  (как
       правило, это выполняемый файл).  Желательно, чтобы он
       содержал таблицу идентификаторов.  В противном случае
       нельзя  использовать  имена переменных, хотя и в этом
       случае возможна работа по абсолютным адресами.   Зна-
       чением  _о_б_ф_а_й_л по умолчанию является _a._o_u_t.  Аргумент
       _о_б_р_п_а_м  задает  имя  файла,  который  содержит  образ
       памяти  процесса,  значением  по умолчанию для _о_б_р_п_а_м
       является имя _c_o_r_e.

       Предполагается, что _о_б_ф_а_й_л  -  это  файл,  содержащий
       готовую  к  выполнению  программу,  а  _о_б_р_п_а_м - образ
       памяти, записанный системой при прерывании выполнения
       _о_б_ф_а_й_л.  В то же время _о_б_ф_а_й_л может быть произвольным
       файлом, при этом все команды  просмотра  и  изменения
       файла будут работать правильно.

       Если присутствует ключ --ww, оба файла _о_б_ф_а_й_л и  _о_б_р_п_а_м
       при  необходимости создаются и открываются для чтения
       и записи, так что эти файлы могут быть модифицированы


                            -1-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


       с помощью aaddbb.

       Запросы  к  aaddbb  считываются  из  стандартного  файла
       ввода,   а  ответы  передаются  в  файл  стандартного
       вывода.   Команда  aaddbb  игнорирует   сигнал   SSIIGGQQUUIITT
       (CCTTRRLL//\\) и сигнал SSIIGGIINNTT (CCTTRRLL//CC).

       ККооммааннддыы ооттллааддччииккаа

       В общем случае запросы к aaddbb имеют следующий вид:

              [_а_д_р_е_с][,,_с_ч_е_т_ч_и_к][_к_о_м_а_н_д_а][;;]

       В отладчике имеется понятие текущей _т_о_ч_к_и -  места  в
       просматриваемом  файле  или  в памяти процесса.  Если
       _а_д_р_е_с присутствует, точка устанавливается  на  _а_д_р_е_с.
       Первоначально  _т_о_ч_к_а  устанавливается в 0.  Для боль-
       шинства команд _с_ч_е_т_ч_и_к определяет, сколько раз  будет
       выполняться  команда.  Значение _с_ч_е_т_ч_и_к_а по умолчанию
       равно 1; _а_д_р_е_с и _с_ч_е_т_ч_и_к являются выражениями.

       Интерпретация _а_д_р_е_с_а зависит от контекста, в  котором
       он  используется. Если отлаживается подпроцесс, _а_д_р_е_с
       интерпретируется как адрес в   адресном  пространстве
       данного  подпроцесса,  иначе  он  является  адресом в
       объектном файле или файле _о_б_р_п_а_м.  _А_д_р_е_с  задается  с
       помощью  выражения, которое может состоять из следую-
       щих компонент:

       _П_Р_И_М_И_Т_И_В_Н_Ы_Е _В_Ы_Р_А_Ж_Е_Н_И_Я

       ..      Значение _т_о_ч_к_и.

       ++      Значение _т_о_ч_к_и, увеличенное на текущий  инкре-
              мент.

       ^^      Значение _т_о_ч_к_и, уменьшенное на текущий  инкре-
              мент.

       ""      Последний напечатанный адрес

       _ц_е_л_о_е__ч_и_с_л_о
              Если число начинается цифрой 0, оно рассматри-
              вается  как восьмеричное. Если числу предшест-
              вует символ '##'  ,  оно  интерпретируется  как
              шестнадцатиричное.   В остальных случаях число
              рассматривается как десятичное.

       _ч_и_с_л_о._д_р_о_б_н_а_я__ч_а_с_т_ь
              Шестнадцатиразрядное вещественное число.

       ''_C_C_C_C'' До 4-х символов КОИ-8. Для указания символа  ''
              нужно использовать последовательность "\\''".

       <<_и_м_я   Значение  внутренней   переменной   aaddbb   либо
              регистра  программы.  _И_м_я является либо именем
              внутренней переменной, либо  именем  регистра.
              aaddbb  поддерживает  ряд  внутренних переменных,


                            -2-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


              имена которых состоят из отдельной  буквы  или
              цифры. Если _и_м_я является именем регистра, зна-
              чение регистра извлекается из  памяти  подпро-
              цесса или из заголовка в _о_б_р_п_а_м. Имена регист-
              ров распечатываются командой $$rr ("rr00" -  "rr55",
              "sspp", "ppcc").

       _и_д_е_н_т_и_ф_и_к_а_т_о_р
              Представляет собой последовательность  больших
              и  малых букв, знаков подчеркивания и цифр, не
              начинающуюся с цифры. Значение  _и_д_е_н_т_и_ф_и_к_а_т_о_р_а
              извлекается  из таблицы символов файла _о_б_ф_а_й_л.
              При необходимости (если  не  найдено  имя  без
              добавок)   к  идентификатору  будут  добавлены
              начальные знаки '__' или '~~'.  Если _и_д_е_н_т_и_ф_и_к_а_-
              _т_о_р  -  это имя функции, расположенной в овер-
              лейном сегменте, оно заменяется на  ~~_и_д_е_н_т_и_ф_и_-
              _к_а_т_о_р, то есть на истинный адрес функции, а не
              на адрес точки входа в базовом сегменте.

       ___и_д_е_н_т_и_ф_и_к_а_т_о_р
              В языке Си _и_с_т_и_н_н_о_е _и_м_я глобальной  переменной
              начинается знаком '__'. Может оказаться необхо-
              димым использовать полное имя (со знаком '__'),
              чтобы  отличить  его от внутренних (ассемблер-
              ных) переменных программы.  Для имен  функций,
              находящихся  в оверлейных сегментах, ___и_м_я ука-
              зывает на точку входа в функцию через  базовый
              сегмент  (псевдомодуль  tthhuunnkk),  а  ~~_и_м_я  - на
              начало функции в оверлейном  сегменте.   Заме-
              тим, что перед '~~' в этом случае нужно ставить
              '\\', так как символ '~~' в  отладчике  является
              знаком  битовой  операции  (нужно  вводить как
              \\~~_и_м_я).

       _п_о_д_п_р_о_г_р_а_м_м_а._и_м_я
              Адрес   переменной   _и_м_я   в   указанной   Си-
              подпрограмме.   Как  _п_о_д_п_р_о_г_р_а_м_м_а,  так  и _и_м_я
              представляют собой идентификаторы.

       (_в_ы_р)  Значение выражения _в_ы_р.

       _У_Н_А_Р_Н_Ы_Е _О_П_Е_Р_А_Ц_И_И

       **_в_ы_р    содержимое ячейки с адресом _в_ы_р в _о_б_р_п_а_м;

       @@_в_ы_р    содержимое ячейки с адресом _в_ы_р в _о_б_ф_а_й_л;

       --_в_ы_р    целочисленное отрицание;

       ~~_в_ы_р    поразрядное дополнение.

       _Б_И_Н_А_Р_Н_Ы_Е _О_П_Е_Р_А_Ц_И_И

       Бинарные операции выполняются слева направо  и  имеют
       меньший приоритет, чем унарные операции.

       _в_1 ++ _в_2     целочисленное сложение.


                            -3-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


       _в_1 -- _в_2     целочисленное вычитание.

       _в_1 ** _в_2     целочисленное умножение.

       _в_1 %% _в_2     целочисленное деление.

       _в_1 && _в_2     поразрядная конъюнкция.

       _в_1 || _в_2     поразрядная дизъюнкция.

       _в_1 ## _в_2     _в_1 округляется до следующего кратного _в_2.

       _К_О_М_А_Н_Д_Ы _П_Р_О_С_М_О_Т_Р_А _И _И_З_М_Е_Н_Е_Н_И_Я

       Большинство команд состоят из указателя  команды,  за
       которым  следует  один  или  несколько модификаторов.
       (Команды ?? и // могут сопровождаться **).  Если  иссле-
       дуется выполняющаяся программа, вместо _о_б_р_п_а_м исполь-
       зуется память этого процесса.

       ??_f     Ячейки, начинающиеся  с  указанного  _а_д_р_е_с_а  в
              _о_б_ф_а_й_л,  распечатываются в соответствии с фор-
              матом _f. _Т_о_ч_к_а увеличивается на длину просмот-
              ренной области памяти.

       //_f     Ячейки, начинающиеся  с  указанного  _а_д_р_е_с_а  в
              _о_б_р_п_а_м,  распечатываются в соответствии с фор-
              матом _f, а _т_о_ч_к_а увеличивается, как и для ??_f.

       ==_f     Печатается значение самого _а_д_р_е_с_а в виде, ука-
              занном  форматом  _f  (в  формате  ii для частей
              команды,  относящимся  к  последующим  словам,
              печатается ??).

       Формат _f состоит из одного или  нескольких  символов,
       определяющих  вид  печати.  Каждому  символу  формата
       может предшествовать десятичное целое, которое предс-
       тавляет  собой  счетчик повторений символа формата. В
       процессе прохождения по формату  _т_о_ч_к_а  увеличивается
       на величину, указанную для каждой буквы формата. Если
       формат  не  указан,  используется  последний  формат.
       Существуют следующие буквы формата:

       Буква  Увеличение
              _т_о_ч_к_и

       oo      2            Печатает два байта в восьмеричном
                           коде.  Всем  восьмеричным числам,
                           выводимым с  помощью  aaddbb,  пред-
                           шествует '0'.

       OO      4            Печатает 4 байта  в  восьмеричном
                           коде.

       qq      2            Печатает в восьмеричном  коде  со
                           знаком.

       QQ      4            Печатает  в   восьмеричном   коде


                            -4-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


                           длинное число со знаком.

       dd      2            Печатает в десятичном коде.

       DD      4            Печатает длинное число в десятич-
                           ном коде.

       xx      2            Печатает два байта в шестнадцати-
                           ричном коде.

       XX      4            Печатает 4 байта  в  шестнадцати-
                           ричном коде.

       uu      2            Печатает  десятичное  число   без
                           знака.

       UU      4            Печатает длинное десятичное число
                           без знака.

       ff      4            Печатает 32-битовое значение  как
                           число с плавающей точкой.

       FF      8            Печатает число с плавающей точкой
                           с двойной точностью.

       bb      1            Печатает  адресованный   байт   в
                           восьмеричном коде.

       cc      1            Печатает адресованный символ.

       CC      1            Печатает   адресованный   символ,
                           используя  следующее  соглашение.
                           Символы со значениями от  000  до
                           040  печатаются как @@, за которым
                           следует соответствующий символ из
                           диапазона от 0100 до 0140. Символ
                           @@ печатается как @@@@.

       ss      _N            Печатает адресованные символы  до
                           тех пор, пока не встретится нуле-
                           вой символ.  _N  -  длина  строки,
                           считая и нулевой ограничитель.

       SS      _N            Печатает строку, используя согла-
                           шение относительно @@.

       YY      4            Печатает 4 байта в  формате  даты
                           (см. _c_t_i_m_e(3)).

       ii      _N            Печатает как команду СМ-4.   _N  -
                           это  число  байтов, которое зани-
                           мает данная  команда.   Этот  вид
                           печати приводит к тому, что пере-
                           менные 1 и 2 устанавливаются рав-
                           ными смещениям источника и прием-
                           ника соответственно.

       aa      0            Печатается   значение   _т_о_ч_к_и   в


                            -5-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


                           символической   форме.    Символы
                           проверяются на  принадлежность  к
                           соответствующему  типу,  как ука-
                           зано ниже.

                           //      локальное  или  глобальное
                                  имя из области данных;

                           ??      локальное  или  глобальное
                                  имя из сегмента команд;

                           ==      локальное  или  глобальное
                                  абсолютное имя.

       pp      2            Печатает адресованное значение  в
                           символической форме, используя те
                           же правила просмотра имен, что  и
                           формат aa.

       tt      0            Когда имеет  перед  собой  целое,
                           осуществляет пропуск до следующей
                           позиции  соответствующей  табуля-
                           ции.  Например,  8tt  осуществляет
                           переход    к    следующему     8-
                           позиционному табуляционному оста-
                           нову.

       rr      0            Печатает пробел.

       nn      0            Печатает символ новой строки.

       ""...""  0            Печатает вложенную строку.

       ^^                   Точка  уменьшается  на   величину
                           текущего  инкремента.  Ничего  не
                           печатается.

       ++                   Точка увеличивается на 1.  Ничего
                           не печатается.

       --                   Точка уменьшается на 1. Ничего не
                           печатается.

       _н_о_в_а_я _с_т_р_о_к_а        Предыдущая команда повторяется со
                           значением счетчика, равным 1.

       [??//]ll  _з_н_а_ч_е_н_и_е  _м_а_с_к_а
                           Слова, начиная с _т_о_ч_к_и,  маскиру-
                           ются  _м_а_с_к_о_й  и  сравниваются  со
                           _з_н_а_ч_е_н_и_е_м до  тех  пор,  пока  не
                           происходит    совпадения.    Если
                           используется LL, совпадение прове-
                           ряется  одновременно для 4 байтов
                           вместо 2. Если совпадение не най-
                           дено, _т_о_ч_к_а не изменяется, в про-
                           тивном случае _т_о_ч_к_а  устанавлива-
                           ется на ячейку, для которой прои-
                           зошло  совпадение.   Если   маска


                            -6-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


                           опущена, используется -1.

       [??//]ww  _з_н_а_ч_е_н_и_е...  Записывает 2-байтовое _з_н_а_ч_е_н_и_е  в
                           адресованную ячейку. Если исполь-
                           зуется команда WW, записывается  4
                           байта.   При  записи  в  адресное
                           пространство подпроцесса нечетные
                           адреса не допускаются.

       [??//][**]mm  _b_1 _e_1 _f_1 [??//]
                           Записываются  новые  значения   в
                           карту  памяти (_b_1, _e_1, _f_1).  Если
                           задано  менее   трех   выражений,
                           изменяются  только  первые  пара-
                           метры карты памяти.  Если после ??
                           или  // следует **, изменяется вто-
                           рая карта памяти  (_b_2,  _e_2,  _f_2).
                           Если список заканчивается знаками
                           ?? или //, для соответствующих зап-
                           росов используется соответственно
                           файл _о_б_ф_а_й_л или _о_б_р_п_а_м. (То есть,
                           //mm??  приведет к тому, что // будет
                           относиться к _о_б_ф_а_й_л).

       >>_и_м_я                Переменной или регистру с указан-
                           ным _и_м_е_н_е_м присваивается значение
                           _т_о_ч_к_и.

       !!_к_о_м_а_н_д_а            Вызывается  интерпретатор  команд
                           для  выполнения  остальной  части
                           строки (после !!) как команды.

       _К_О_М_А_Н_Д_Ы _У_П_Р_А_В_Л_Е_Н_И_Я _О_Т_Л_А_Д_Ч_И_К_О_М

       $$_м_о_д_и_ф_и_к_а_т_о_р
               Допустимы следующие модификаторы команды:

               <<_ф_а_й_л  Считывает команды  из  _ф_а_й_л_а  и  затем
                      возвращается ко вводу с терминала.

               >>_ф_а_й_л  Посылает выходную информацию  в  _ф_а_й_л;
                      если  файл не существует, он создается
                      заново.

               rr      Распечатывает   общие    регистры    и
                      команду,  адресуемую  счетчиком команд
                      (ppcc).  _Т_о_ч_к_а становится равной  значе-
                      нию ppcc.

               ff      Распечатывает регистры процессора пла-
                      вающей  точки  с  одинарной точностью,
                      если не стоит признак двойной точности
                      в  регистре состояния, иначе - с двой-
                      ной точностью.

               FF      Распечатывает регистры процессора пла-
                      вающей точки с двойной точностью.



                            -7-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


               ??      Печатается информация об  отлаживаемом
                      процессе   (номер   процесса,  причина
                      останова, регистры).

               bb      Распечатывает  все  точки  останова  и
                      связанные с ними счетчики и команды.

               cc
               CC      Стек вызовов функций Си.  Если  указан
                      _а_д_р_е_с,   он  используется  в  качестве
                      адреса  текущего  кадра  (вместо  rr55).
                      Если используется CC, для каждой актив-
                      ной функции  распечатываются  имена  и
                      (16-битовые)  значения  всех автомати-
                      ческих переменных. Если  указан  _с_ч_е_т_-
                      _ч_и_к,   распечатываются  только  первые
                      _с_ч_е_т_ч_и_к кадров.

               ee      Распечатывает имена и значения внешних
                      переменных.

               ww      Устанавливает  ширину   страницы   для
                      вывода равной _а_д_р_е_с_у (стандартное зна-
                      чение - 80).

               ss      Устанавливает длину шаблона для поиска
                      имен равной _а_д_р_е_с_у (стандартное значе-
                      ние - 255).

               oo      Все вводимые целые рассматриваются как
                      восьмеричные.

               dd      Восстанавливается  стандартный   режим
                      ввода целых чисел.

               qq      Выход из aaddbb.

               vv      Распечатывает все ненулевые внутренние
                      переменные aaddbb в восьмеричном коде.

               mm      Распечатывает карту адресов.

       _У_П_Р_А_В_Л_Е_Н_И_Е _П_О_Д_П_Р_О_Ц_Е_С_С_О_М

       ::_м_о_д_и_ф_и_к_а_т_о_р
            Допустимы следующие модификаторы:

            bb_к_о_м_а_н_д_а
                   Устанавливает точку останова  по  указан-
                   ному  _а_д_р_е_с_у.  Перед  тем, как произойдет
                   останов,   точка   останова   выполняется
                   _с_ч_е_т_ч_и_к-1 раз. Каждый раз, когда встреча-
                   ется точка останова, выполняется  команда
                   _к_о_м_а_н_д_а.  Если  эта команда устанавливает
                   _т_о_ч_к_у в нуль, данная точка останова вызы-
                   вает  останов.   Если  отлаживаемая прог-
                   рамма заоверлеена  и  адрес  относится  к
                   оверлейному   сегменту,   то  если  адрес


                            -8-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


                   указан с  помощью  символического  имени,
                   останов устанавливается в соответствующем
                   оверлейном сегменте, иначе останов  уста-
                   навливается  в  текущем  оверлейном  сег-
                   менте.

            dd      Удаляет  точку  останова  по   указанному
                   _а_д_р_е_с_у.

            rr      Запускает  _о_б_ф_а_й_л  как  подпроцесс.  Если
                   явно  указан _а_д_р_е_с, вход в программу осу-
                   ществляется в  этой  точке;  в  противном
                   случае - в стандартной точке входа. _С_ч_е_т_-
                   _ч_и_к  указывает,  сколько  точек  останова
                   должно  быть  пропущено  перед остановом.
                   Параметры подпроцесса могут задаваться  в
                   той  же строке, что и команда.  Параметр,
                   начинающийся с '<<' или '>>' указывает, что
                   для  команды  устанавливается стандартный
                   ввод или вывод. При  входе  в  подпроцесс
                   включается нормальная обработка сигналов.

            cc_с_и_г_н_а_л
                   Подпроцесс продолжается по  сигналу  _с_и_г_-
                   _н_а_л,   (см.  _s_i_g_n_a_l(2))  .   Если  указан
                   _а_д_р_е_с, подпроцесс  продолжается  с  этого
                   адреса.  Если сигнал не задан, посылается
                   сигнал, который  вызвал  останов  подпро-
                   цесса.   Точки  останова  пропускаются по
                   тому же правилу, что и для rr.

            ss_с_и_г_н_а_л
                   То же,  что  cc_с_и_г_н_а_л,  однако  подпроцесс
                   выполняется  пошагово  _с_ч_е_т_ч_и_к  раз. Если
                   текущего  подпроцесса  не  существует,  в
                   качестве  подпроцесса запускается _о_б_ф_а_й_л,
                   как и для rr. В этом случае никакой сигнал
                   не  может  быть  послан; оставшаяся часть
                   строки  рассматривается   как   параметры
                   подпроцесса.

            kk      Текущий подпроцесс, если  он  существует,
                   завершается.

       _В_Н_У_Т_Р_Е_Н_Н_И_Е _П_Е_Р_Е_М_Е_Н_Н_Ы_Е _A_D_B

       В aaddbb имеется ряд внутренних переменных.  Поименован-
       ные  буквами переменные первоначально устанавливаются
       aaddbb, однако впоследствии  не  используются.  Числовые
       переменные зарезервированы следующим образом:

       00      последнее напечатанное значение;

       11      последнее смещение в команде;

       22      предыдущее значение переменной 11.




                            -9-                      ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


       При  входе  следующие  переменные  устанавливаются  в
       соответствии  с  системной информацией в _о_б_р_п_а_м. Если
       _о_б_р_п_а_м не является образом памяти, эти значения уста-
       навливаются из _о_б_ф_а_й_л.

       bb      базовый адрес сегмента данных;

       cc      номер текущего оверлейного сегмента (определя-
              ется  из  файла  _c_o_r_e), эта переменная и карта
              памяти  переопределяются  всякий  раз,   когда
              отладчик обращается к другому оверлейному сег-
              менту (при просмотре памяти,  установке  точки
              останова)  или может быть изменена явно коман-
              дой >>cc;

       dd      размер сегмента данных;

       ee      точка входа;

       mm      "магическое" число (0405,  0407,  0410,  0411,
              0430, 0431 или 0444);

       oo      сумма длин всех оверлейных сегментов;

       ss      размер стека;

       tt      размер сегмента команд.

       _А_Д_Р_Е_С_А_Ц_И_Я

       Адрес в файле,  соответствующий  написанному  адресу,
       определяется  картой памяти, связанной с этим файлом.
       Карта памяти представляется двумя или тремя триадами:
       (_b_1,  _e_1, _f_1), (_b_0, _e_0, _f_0) для оверлейных программ и
       (_b_2, _e_2, _f_2).  Адрес в файле или в памяти, соответст-
       вующий введенному адресу, вычисляется следующим обра-
       зом:

       еессллии _b_1<=_а_д_р_е_с<_e_1 ттоо
               _а_д_р_е_с=_а_д_р_е_с+_f_1-_b_1
       ииннааччее еессллии _о_в_е_р_л_е_й_н_а_я _п_р_о_г_р_а_м_м_а ттоо
               еессллии _b_0<=_а_д_р_е_с<_e_0 ттоо
                       _а_д_р_е_с=_а_д_р_е_с+_f_0-_b_0
               ииннааччее еессллии _b_2<=_а_д_р_е_с<_e_2 ттоо
                       _а_д_р_е_с=_а_д_р_е_с+_f_2-_b_2
               ииннааччее
                       _а_д_р_е_с _я_в_л_я_е_т_с_я _н_е_д_о_п_у_с_т_и_м_ы_м
               ввссее
       ввссее

       Первая триада соответствует сегменту команд, вторая -
       сегменту  данных.  В некоторых случаях (например, для
       программ с раздельными сегментами  команд  и  данных)
       эти два сегмента могут перекрываться по адресам. Если
       ??  или // сопровождаются  **,  то  используется  только
       последняя триада (то есть сегмент данных).




                            -10-                     ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


       Начальная установка обоих  отображений  подходит  для
       нормальных  файлов  _a._o_u_t и _c_o_r_e. Если один из файлов
       не соответствует ожидаемому виду, для этого файла  _b_1
       устанавливается в 0, _e_1 устанавливается равным макси-
       мальному размеру файла, и _f_1 устанавливается в 0; при
       этом весь файл может быть исследован без преобразова-
       ния адреса.  Для оверлейных файлов  триада  (_b_0,  _e_0,
       _f_0) устанавливается при вызове в соответствии с теку-
       щим оверлеем файла _c_o_r_e и изменяется при каждом изме-
       нении номера оверлея (переменная cc).

       Поскольку aaddbb может использоваться  с  большими  фай-
       лами,  все  необходимые  значения  хранятся  как  32-
       битовые целые со знаком.

РРЕЕККООММЕЕННДДААЦЦИИИИ
       Наиболее  часто  aaddbb  используется   при   диалоговой
       отладке  программ  на Си, Фортране-77 или Ассемблере.
       При этом вызывают aaddbb с  одним  параметром  -  именем
       выполняемого  файла.  Затем устанавливаются контроль-
       ные точки останова командой ::bb, и программа  запуска-
       ется  командой  ::rr.   При контрольных остановах прог-
       раммы можно изучать память  программы,  просматривать
       стек  и  т.п.,  а  для продолжения счета используется
       команда ::cc.

       Установка контрольных точек  производится,  как  пра-
       вило,  на  входы  в  функции.   Для того, чтобы после
       останова можно  было  просмотреть  параметры  функции
       командой  $$cc или $$CC, точка входа должна быть установ-
       лена на _и_м_я+4, где _и_м_я - имя функции. Адрес  возврата
       из  функции в этом случае можно посмотреть по команде
       <<rr55+2//oo.

       В целом отладчик aaddbb  предоставляет  широкие  возмож-
       ности,  но  довольно  сложен  и не позволяет работать
       непосредственно в терминах программ на Си.  Для прос-
       той  отладки  программ  на  Си  и Фортране-77 имеется
       пошаговый символьный отладчик ccddeebb.

ФФААЙЙЛЛЫЫ
       /_d_e_v/_m_e_m
       _a._o_u_t
       _c_o_r_e

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _c_d_e_b(1), _p_t_r_a_c_e(2), _a._o_u_t(5), _c_o_r_e(5).

       Имеется отдельный документ по aaddbb.

ДДИИААГГННООССТТИИККАА
       Сообщения о недоступных файлах, синтаксических  ошиб-
       ках,  ненормальном завершении команд и т.п. Если пос-
       ледняя  команда  закончилась  успешно,  код  возврата
       команды aaddbb равен 0.

ЗЗААММЕЕЧЧААННИИЯЯ
       Точка останова, установленная в начальной точке входа


                            -11-                     ДЕМОС/P


ADB(1)                 ДЕМОС. Команды                 ADB(1)


       в  программу, не срабатывает при первом входе в прог-
       рамму.

       При пошаговом выполнении системные вызовы  не  счита-
       ются выполняемыми командами.

       Локальные переменные, имена которых совпадают с внеш-
       ними  переменными, могут мешать при обращении к внеш-
       ним переменным.

       В Си и Фортране-77 невозможно использовать для  адре-
       сации метки или номера строк.

       В оверлейных программах недоступны локальные перемен-
       ные функций, находящихся в оверлейных сегментах.













































                            -12-                     ДЕМОС/P

