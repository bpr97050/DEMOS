
FCNTL(2)          ДЕМОС. Системные вызовы           FCNTL(2)


ИИММЯЯ
       ffccnnttll - управление режимами открытых файлов.

ФФООРРММААТТ
       #iinncclluuddee <_s_y_s/_f_c_n_t_l._h>

       ffccnnttll( _f_d, _r_e_q_u_e_s_t, _a_r_g_p )
       iinntt  _f_d, _r_e_q_u_e_s_t;

ООППИИССААННИИЕЕ
       Системный вызов  ffccnnttll  предназначен  для  управления
       режимами ввода/вывода и выполнения специфицеских опе-
       раций при работе с открытыми файлами (к  числу  таких
       операций  можно отнести, например, дублирование деск-
       риптора  файла,  или  установку  режима   синхронного
       ввода/вывода).

       Параметр _f_d является дескриптором файла, над  которым
       проводится  операция,  _r_e_q_u_e_s_t задает тип операции, а
       _a_r_g_p является  указателем  на  список  дополнительных
       аргументов.

       В файле <_s_y_s/_f_c_n_t_l> описаны запросы,  которые  управ-
       ляют режимами работы с открытыми файлами (указываются
       в параметре _r_e_q_u_e_s_t):

       FFIIOODDUUPPFFDD Возвращает  наименьший   дескриптор   файла,
                который  больше  или  равен  значения  _a_r_g_p.
                Полученный  дескриптор  является   синонимом
                дескриптора  _f_d  (см. _d_u_p(2)),  он полностью
                дублирует режимы файла с декриптором _f_d.

       FFIIOOGGEETTFFDD Возвращает текущее значение режима,  который
                устанавливает  возможность наследования отк-
                рытого файла  потомками  текущего  процесса.
                Если  нулевой бит полученного слова равен 1,
                то файл с дескриптором  _f_d  будет  автомати-
                чески закрываться после успешного выполнения
                системного вызова _e_x_e_c_v_e(2). Если в  младшем
                бите  получен 0, то файл наследуется процес-
                сом.

       FFIIOOSSEETTFFDD Устанавливает режим, который управляет  воз-
                можностью   наследования   открытого   файла
                потомками  текущего  процесса.  В   качестве
                параметра  _a_r_g_p указывается слово, где имеет
                значение только младший бит.   Он  определя-
                ется так же, как в предыдущем запросе.

       FFIIOOGGEETTFFLL Возвращает слово, в котором записаны  режимы
                работы  файла  с  дескриптором _f_d (OO__RRDDOONNLLYY,
                OO__WWRROONNLLYY,  OO__RRDDWWRR,  OO__NNDDEELLAAYY,   OO__AAPPPPEENNDD   и
                OO__SSYYNNCC (см. _o_p_e_n(2)).

       FFIIOOSSEETTFFLL Устанавливает новые режимы  работы  файла  с
                дескриптором _f_d.  Менять можно только режимы
                OO__NNDDEELLAAYY, OO__AAPPPPEENNDD и OO__SSYYNNCC.



                            -1-                     ДЕМОС/PV


FCNTL(2)          ДЕМОС. Системные вызовы           FCNTL(2)


       FFIIOOGGEETTLLKK Возвращает первую пересекающуюся с указанной
                заблокированную  область.   Область описыва-
                ется структурой _f_l_o_c_k (см.  ниже).  В  пара-
                метре _a_r_g_p передается адрес структуры _f_l_o_c_k,
                в  которой  описана   интересующая   область
                файла.  Если  будет  найдена заблокированная
                область,  пересекающаяся  с  указанной,   то
                информация  о  ней  перепишется  в указанную
                структуру _f_l_o_c_k. Если не  будет  найдено  ни
                одной  заблокированной  области,  пересекаю-
                щейся с указанной (т.е. можно  заблокировать
                эту  область),  то  структура _f_l_o_c_k не будет
                изменена,  кроме  поля  типа  блокировки,  в
                которое запишется тип FF__UUNNLLCCKK (см. ниже).

       FFIIOOSSEETTLLKK Блокирует или разблокирует указанную область
                файла.  В  параметре  _a_r_g_p указывается адрес
                структуры _f_l_o_c_k. Область  файла  может  быть
                заблокирована   для  чтения  (FF__RRDDLLCCKK),  для
                записи (FF__WWRRLLCCKK) и может быть разблокирована
                (FF__UUNNLLCCKK).   Если  операция  не  может  быть
                выполнена, то ffccnnttll сразу же (без  ожидания)
                закончится  с  кодом  возврата  -1  и  типом
                ошибки в перменной eerrrrnnoo.

       FFIIOOSSEETTLLKKWW
                Этот запрос аналогичен запросу  FFIIOOSSEETTLLKK  за
                исключением того, что при попытке заблокиро-
                вать  уже  заблокированную  область  процесс
                переводится  в состояние ожидания до момента
                ее освобождения.

       Режим блокирования для чтения предотвращает от блоки-
       рования  для записи указанную область. В то же время,
       одна и таже область может быть заблокирована одновре-
       менно для чтения разными процессами. Режим блокирова-
       ния для чтения может быть установлен  по  дескриптору
       файла, открытому на чтение.

       Режим блокирования для записи предотвращает от любого
       блокирования  указанную  область. Это режим использу-
       ется для  монопольного  блокирования  области.  Режим
       блокирования  для  записи  может  быть  установлен по
       дескриптору файла, открытому на запись.

       В  структуре  _f_l_o_c_k  описывается  тип  блокировки   и
       область блокирования:

       ssttrruucctt _f_l_o_c_k {
           sshhoorrtt _l__t_y_p_e;   /* Тип блокировки:
                              FF__RRDDLLCCKK, FF__WWRRLLCCKK, FF__UUNNLLCCKK */
           sshhoorrtt _l__w_h_e_n_c_e; /* Начало отсчета смещения:
                              LL__SSEETT, LL__IINNCCRR, LL__XXTTNNDD */
           ooffff__tt _l__s_t_a_r_t;  /* Смещение области */
           ooffff__tt _l__l_e_n;    /* Длина области блокирования */
           sshhoorrtt _l__p_i_d;    /* Номер блокирующего процесса */
       };



                            -2-                     ДЕМОС/PV


FCNTL(2)          ДЕМОС. Системные вызовы           FCNTL(2)


       В поле _l__t_y_p_e указывается тип блокировки.  Тип  может
       быть  трех  типов: FF__RRDDLLCCKK - блокирование для чтения,
       FF__WWRRLLCCKK - блокирование для записи, FF__UUNNLLCCKK -  разбло-
       кирование области.

       В поле _l__w_h_e_n_c_e указывается начало отсчета  смещения.
       Смещение области отсчитывается: если указываем LL__SSEETT,
       то от начала файла; если LL__IINNCCRR, то от текущего  зна-
       чения  указателя  чтения/записи;  LL__XXTTNNDD  -  от конца
       файла.

       Смещение области указывается в поле _l__s_t_a_r_t. Смещение
       отсчитывается от начала, указанного предыдущим полем.

       Длина области указывается в поле  _l__l_e_n.  Если  длина
       равна  0,  то длина области считается до конца файла.
       Если, не  разблокировав,  сдвинуть  конец  файла,  то
       длина области блокирования распространяется до нового
       конца файла. Если при  этом  заблокированная  область
       начинается  от  начала  файла,  то  заблокирован весь
       файл.

       В  поле  _l__p_i_d  возвращается  номер  заблокировавшего
       область  процесса.   Это  поле заполняется системой и
       имеет смысл только при запросе FFIIOOGGEETTLLKK.

       Тип блокировки заблокированной области можно изменить
       без  ее  разблокирования,  если  при новом запросе на
       блокирование той же области указать новый тип  блоки-
       ровки.  Изменение типа блокировки или разблокирование
       некоторой новой области может  привести  к  разбиению
       уже заблокированной текущим процессом области на нес-
       колько областей, в зависимости от запроса и  располо-
       жения новой области.

       При закрытии файла или  по  завершении  процесса  все
       блокировки данного процесса удаляются. Все блокировки
       данного процесса связаны с файлом, а не с  дескрипто-
       ром  файла, поэтому достаточно закрыть файл по одному
       любому дескриптору, и все блокировки разблокируются.

       Блокировки не наследуются  потомками  процесса,  т.к.
       блокировки связаны с номером процесса.

ЗЗННААЧЧЕЕННИИЕЕ
       Если вызов прошел  успешно,  то  при  каждом  запросе
       соответственно возвращается:

       FFIIOODDUUPPFFDD  - новый дескриптор файла;

       FFIIOOGGEETTFFDD  - значение режима наследования файла;

       FFIIOOSSEETTFFDD  - 0;

       FFIIOOGGEETTFFLL  - значение флага режимов работы файла;

       FFIIOOSSEETTFFLL  - 0;



                            -3-                     ДЕМОС/PV


FCNTL(2)          ДЕМОС. Системные вызовы           FCNTL(2)


       FFIIOOGGEETTLLKK  - 0;

       FFIIOOSSEETTLLKK  - 0;

       FFIIOOSSEETTLLKKWW - 0;

       В случае ошибки возвращается значение -1 и в перемен-
       ную eerrrrnnoo записывается код ошибки.

ККООДДЫЫ ООШШИИББООКК
       При неудачном завершении eerrrrnnoo может принимать следу-
       ющие значения:

       [[EEBBAADDFF]]  Задан некорректный дескриптор файла.

       [[EEMMFFIILLEE]] Слишком много открытых  файлов  при  запросе
                FFIIOODDUUPPFFDD.

       [[EEMMLLIINNKK]] Переполнилась таблица блокировок в ядре.

       [[EEAAGGAAIINN]] Блокируемая  область  при  запросе  FFIIOOSSEETTLLKK
                заблокирована  другим  процессом  и не может
                пересекаться с указанной блокировкой.

       [[EEIINNVVAALL]] Некорректный запрос или  неправильные  аргу-
                менты.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _d_u_p(2), _e_x_e_c_v_e(2), _i_o_c_t_l(2), _o_p_e_n(2)































                            -4-                     ДЕМОС/PV

