
CSH(1)                 ДЕМОС. Команды                 CSH(1)


ИИММЯЯ
       ccsshh - интерпретатор командного языка CC--sshheellll.

ФФООРРММААТТ
       ccsshh [--cceeffiinnssttvvVVxxXX] [_п_а_р_а_м_е_т_р...]

ООППИИССААННИИЕЕ
       Команда ccsshh представляет собой интерпретатор  команд-
       ного  языка  CC--sshheellll,  который,  в  отличие  от языка
       Shell, имеет более широкий набор  встроенных  команд,
       поддерживает  некоторый  контекст  работы и имеет Си-
       подобный синтаксис.

       Функционирование ccsshh начинается с выполнения  команд-
       ного  файла ._c_s_h_r_c в регистрационном каталоге пользо-
       вателя. Если ccsshh используется в качестве  интерпрета-
       тора  основного  командного  языка, при регистрации в
       системе выполняется командный файл ._l_o_g_i_n  в  том  же
       каталоге.   Если  в  регистрационном каталоге имеется
       файл протокола ._h_i_s_t_o_r_y, то  он  считывается.   После
       этого интерпретатор начинает считывать команды с тер-
       минала, выдавая в качестве подсказки символ '%', если
       не  установлена другая форма приглашения.  При завер-
       шении работы выполняется  командный  файл  ._l_o_g_o_u_t  в
       регистрационном каталоге пользователя.

ЛЛЕЕККССИИЧЧЕЕССККААЯЯ ССТТРРУУККТТУУРРАА
       Пользователь  управляет  работой  интерпретатора  ccsshh
       посредством командных строк. Командная строка состоит
       из слов.  Каждое слово может быть командой или  пара-
       метром  команды.  Словом является произвольная после-
       довательность символов, не содержащая  символов  про-
       бела,  табуляции,  новой строки или других разделите-
       лей.  Существует набор символов, которые имеют специ-
       альное  значение  в  языке  CC--sshheellll, и обрабатываются
       особым образом.  Такие  символы  в  дальнейшем  будут
       называться  метасимволами.   К  их  числу,  например,
       относятся:

           &&    ||    ;;    <<    >>    ((    ))    **

       Существуют  интерактивный  и  неинтерактивный  режимы
       работы  ccsshh.   В  неинтерактивном режиме используются
       командные файлы - программы на языке ccsshh.  В  команд-
       ном файле символ '##' указывает на начало комментария.

       Командный файл может быть запущен как команда простым
       указанием  его имени; для этого он должен быть выпол-
       нимым (иметь бит 'xx' в кодах доступа, см.  _c_h_m_o_d(1)).
       Если   командный   файл   начинается   строкой   вида
       '##!!_п_р_о_г_р_а_м_м_а', то он будет  интерпретироваться  прог-
       раммой _п_р_о_г_р_а_м_м_а; если начинается строкой, содержащей
       только '##', то он  будет  интерпретироваться  ccsshh;  в
       остальных  случаях для интерпретации командного файла
       будет использован sshh.

ККООММААННДДННЫЫЕЕ ССТТРРООККИИ
       Простая   командная   строка    представляет    собой


                            -1-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       последовательность  слов,  первое  из  которых  - имя
       выполняемой  команды,  а   остальные   передаются   в
       качестве  параметров.  Слова в командной строке нуме-
       руются от 0.  Последовательность простых команд, раз-
       деленных  символами '||', образует канал межпроцессной
       связи (вывод предыдущей команды является вводом  сле-
       дующей).   Цепочки слов в командной строке могут раз-
       деляться с помощью символа ';;', при этом они выполня-
       ются  последовательно  как несколько командных строк.
       В асинхронном режиме, когда командная строка заверша-
       ется  символом '&&', ccsshh сразу переходит к приему сле-
       дующей командной строки.

       Список слов, заключенный в скобки '()',  рассматрива-
       ется  как командная строка, которая выполняется неза-
       висимо от других фрагментов этой строки.  Конструкции
       '||||'  и  '&&&&'  используются  в качестве разделителей,
       образующих логическую связь между фрагментами команд-
       ной  строки.   Каждый  фрагмент  - отдельное задание;
       выполнение другого, связанного с ним фрагмента, зави-
       сит от кода возврата предыдущего.

ММЕЕХХААННИИЗЗММ ППООДДССТТААННООВВККИИ ВВЫЫППООЛЛННЕЕННННЫЫХХ РРААННЕЕЕЕ ККООММААННДДННЫЫХХ ССТТРРООКК
       ccsshh запоминает в протоколе работы, т.е. в _и_с_т_о_р_и_и (от
       _h_i_s_t_o_r_y)  командные  строки, которые вводил пользова-
       тель в процессе работы, и позволяет  осуществлять  их
       повторное  использование и повторное использование их
       фрагментов.

       Командные строки нумеруются последовательно,  начиная
       с  1.   Количество  запоминаемых  ccsshh командных строк
       определяется переменной hhiissttoorryy.

       Любую строку из _и_с_т_о_р_и_и можно использовать для форми-
       рования  новой.   Указателем  выполнения  подстановки
       командных строк из _и_с_т_о_р_и_и является символ '!!'. Подс-
       тановка  может  начинаться  в любом месте создаваемой
       командной строки. Символ '!!' теряет свое  специальное
       значение,  если он экранирован с помощью символа '\',
       а также если за ним следует пробел,  знак  табуляции,
       символ новой строки, '=' или '('.

       Ссылки на  предыдущие  командные  строки  из  текущей
       могут быть осуществлены следующим образом:

       !!_n   по номеру командной строки;

       !!--_n  на _n командных строк выше  относительно  текущей
            последней;

       !!_c   по первой букве командной строки;

       !!??_о_б_р_а_з_е_ц??
            по _о_б_р_а_з_ц_у, содержащемуся в командной строке;

       !!!!   повторное выполнение последней командной строки.




                            -2-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       Для выбора из командной строки отдельных слов,  после
       спецификации строки нужно указать '::' и определитель.
       Слова входной строки нумеруются, начиная  с  0;  0  -
       обычно  имя команды или слово с номером 0, 1 - первое
       слово командной строки и т.д.  Основными  определите-
       лями являются:

       0    имя команды  (слово  с  номером  0  в  командной
            строке);

       _n    _n-ое слово командной строки;

       ^^    слово с номером 1 в командной строке;

       $$    последнее слово в командной строке;

       %%    слово,  которое  соответствует  (непосредственно
            предшествующему) образцу '??...??';

       _x--_y  диапазон слов, с номерами  от  _x  до  _y  включи-
            тельно;

       --_y   соответствует '0-_y';

       **    выбрать все слова, начиная с первого ('^^-$$');

       _n**   выбрать все слова, начиная с _n-го ('_n-$$');

       _x--   то же, что '_x**', но не включая  последнее  слово
            '$$'.

       Символ '::' может быть опущен, если определитель начи-
       нается одним из символов:

           ^^    $$    **    --    %%

       Над выбранными  из  других  командных  строк  словами
       можно  выполнять  различные  преобразования. Для этой
       цели  используются  модификаторы.   Они   указываются
       после  определителя слова, к которому необходимо при-
       менить модификатор.  Перед каждым модификатором  ука-
       зывается  двоеточие '::'. Определены следующие модифи-
       каторы:

       gg      применить модификацию во всех словах;

       hh      удалить имя файла, оставляя  имена  каталогов,
              ведущих к нему;

       рр      распечатать  новую  командную  строку,  но  не
              выполнять ее;

       qq      заключить модифицируемое слово в кавычки, пре-
              дотвращая его дальнейшую модификацию;

       rr      удалить суффикс слова, указанный через точку и
              саму точку;



                            -3-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       ee      удалить префикс слова до точки и саму точку;

       ss/_l/_r  заменить _l на _r. В качестве разделителя вместо
              '/' может быть использован любой символ, кото-
              рого нет в шаблонах  _l  и  _r;  если  строка  _l
              пуста,  используется предыдущая строка либо из
              _l, либо из строки контекстуального поиска _s  в
              '!!??_s??'. Строка _r может быть пустой;

       tt      слово - имя файла: удалить имена всех  катало-
              гов, ведущих к файлу, оставляя имя файла;

       xx      то же, что и qq, но разбить на слова  в  местах
              наличия  пробелов, знаков табуляции и символов
              новой строки;

       &&      повторить предыдущую модификацию.

       ccsshh предоставляет удобный способ модификации  послед-
       ней  строки.  Для этих целей используется конструкция
       '^^_о_б_р_а_з_е_ц^^_з_а_м_е_н_а'.

ППССЕЕВВДДООННИИММЫЫ
       С помощью команд aalliiaass и  uunnaalliiaass  интерпретатор  ccsshh
       составляет список псевдонимов, которые могут устанав-
       ливаться,  отображаться  и  модифицироваться.   После
       просмотра командной строки она разбивается на отдель-
       ные команды, и первое слово каждой  команды  проверя-
       ется  (слева  направо),  чтобы выяснить, имеет ли оно
       псевдоним.  Если имеет, то  текст,  который  является
       псевдонимом  данной  команды,  считывается  с помощью
       механизма _п_с_е_в_д_о_н_и_м_о_в так, как если  бы  эта  команда
       была  предыдущей  входной  строкой.  Полученные слова
       заменяют команду и список параметров.  Этот  механизм
       позволяет вводить новый синтаксис команд.

ППООДДССТТААННООВВККАА ППЕЕРРЕЕММЕЕННННЫЫХХ
       После подстановки псевдонимов и грамматического  раз-
       бора  командной  строки  и  перед  выполнением каждой
       команды  производится  подстановка  переменных,  Если
       перед именем переменной указан символ '$$' , то вместо
       имени в этом  месте  командной  строки  подставляется
       значение  переменной.  В общем случае значением пере-
       менной может быть список слов, одно слово или  пустая
       строка.

       Существуют следующие конструкции:

       $$_и_м_я
       $${_и_м_я}
              Подставить   значение   переменной.   Фигурные
              скобки  отделяют  _и_м_я  от  символов, которые к
              нему  не  относятся.  Имена  переменных  могут
              содержать до 20 букв и символов подчеркивания.

       $$_и_м_я[_и_н_д_е_к_с]
       $${_и_м_я[_и_н_д_е_к_с]}
              Подставить значение слова, выбранного _и_н_д_е_к_с_о_м


                            -4-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              из множества значений переменной _и_м_я.

       $$##_и_м_я
       $${##_и_м_я}
              Подставить количество слов, хранящихся в пере-
              менной _и_м_я.

       $$0     Подставить имя стандартного файла ввода.  Если
              это имя неизвестно, возникает ошибка.

       $$_ч_и_с_л_о
       $${_ч_и_с_л_о}
              Эквивалентно $$aarrggvv[_ч_и_с_л_о].

       $$**     Эквивалентно $$aarrggvv[*].

       Следующие подстановки не  могут  быть  произведены  с
       помощью модификатора '::' :

       $$??_и_м_я
       $${??_и_м_я}
              Подставить '1', если _и_м_я определено, или '0' -
              если не определено.

       $$??0    Подставить '1', если  стандартный  файл  ввода
              определен, или '0' - в противном случае.

       $$$$     Подставить номер процесса ccsshh.

       $$<<     конструкция  '$$<<'  в  любом  месте   командной
              строки  заменяется на строку, введенную с кла-
              виатуры дисплея.  При  интепретации  командной
              строки, если встретилась конструкция '$$<<', ccsshh
              переходит к ожиданию ввода, которое  прекраща-
              ется после завершения ввода строки.

ППООДДССТТААННООВВККАА РРЕЕЗЗУУЛЛЬЬТТААТТАА ВВЫЫППООЛЛННЕЕННИИЯЯ ККООММААННДДННООЙЙ ССТТРРООККИИ
       Командная строка может  содержать  последовательность
       слов,  заключенную в обратные апострофы (``). Эта пос-
       ледовательность рассматривается  интерпретатором  как
       отдельная   командная  строка,  которая  выполняется.
       Результат работы подставляется в  исходную  командную
       строку.

ППООДДССТТААННООВВККАА ИИММЕЕНН ФФААЙЙЛЛООВВ
       Если слово начинается с '^^'  или  содержит  любой  из
       символов:

           **    ??    [[    {{

       то в нем может быть  осуществлена  подстановка  имени
       файла. При этом данное слово является образцом, кото-
       рый заменяется соответствующим списком файлов, отсор-
       тированных  в алфавитном порядке.  Если в списке имен
       файлов не найдено ни  одного  соответствия  заданному
       образцу,  возникает  ошибка.  Следующие символы имеют
       специальное значение:



                            -5-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       **    Соответствует любой последовательности символов,
            в том числе пустой.

       ??    Соответствует любому одиночному символу.

       [[...]]
            Соответствует любому из перечисленных  символов.
            Пара  символов,  разделенная  знаком  '--', соот-
            ветствует любому символу из указанного лексичес-
            кого промежутка.

       ~~    Регистрационный  каталог,  являющийся  значением
            переменной hhoommee.

       ~~_и_м_я Регистрационный каталог  пользователя  с  именем
            _и_м_я.

       [[_a_b..._n]]
            Соответствует любому из перечисленных  символов.
            Для  указания  самих символов '[' и ']' в списке
            перед ними должен ставиться символ '\'.

       _a{{_b,_c,_d}}_e
            Соответствует "_a_b_e _a_c_e _a_d_e". Использование  про-
            белов  не  допускается.  Могут  отстуствовать  _a
            и/или _e.

       При подборе имен файлов  символ  '.',  находящийся  в
       начале  имени  файла или непосредственно после '/', а
       также символ '/' должны быть указаны явно и точно  на
       своих местах.

ВВВВООДД//ВВЫЫВВООДД
       Для задания файлов ввода/вывода используются  следую-
       щие конструкции:

       <<_и_м_я   Использовать файл _и_м_я в качестве  стандартного
              файла ввода.

       <<<<_с_л_о_в_о
              Считать ввод интерпретатора до строки, которая
              идентична  указанному  _с_л_о_в_у.  Полученный вре-
              менный файл использовать в качестве  стандарт-
              ного файла ввода.

       >>_и_м_я
       >>!!_и_м_я
       >>&&_и_м_я
       >>&&!!_и_м_я

              Использовать файл _и_м_я в качестве  стандартного
              файла  вывода;  содержимое  файла усекается до
              нулевой  длины.   Если  определена  переменная
              nnoocclloobbbbeerr,  файл не должен существовать, иначе
              возникает ошибка. Для предотвращения непредна-
              меренного   разрушения   файлов   используются
              конструкции с '!!'.  Конструкции,  использующие
              '&&',  направляют  в  стандартный  файл  вывода


                            -6-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              также диагностические сообщения.

       >>>>_и_м_я
       >>>>&&_и_м_я
       >>>>!!_и_м_я
       >>>>&&!!_и_м_я

              Использовать файл _и_м_я в качестве  стандартного
              файла вывода; выходная информация дописывается
              к  содержимому  файла  _и_м_я.   Если  определена
              переменная nnoocclloobbbbeerr, а файл не существует, то
              использование конструкций, не содержащих  '!!',
              приводит к возникновению ошибки.

       _к_о_м_а_н_д_а_1 || _к_о_м_а_н_д_а_2
       _к_о_м_а_н_д_а_1 ||&& _к_о_м_а_н_д_а_2
              Создать межпроцессный канал (см.  _p_i_p_e(2))  от
              _к_о_м_а_н_д_ы_1  к _к_о_м_а_н_д_е_2, т.е. соединить стандарт-
              ный  вывод  _к_о_м_а_н_д_ы_1  со  стандартным   вводом
              _к_о_м_а_н_д_ы_2.  Если использована конструкция '||&&',
              то _к_о_м_а_н_д_е_2 передается не  только  стандартный
              вывод, но и стандартный вывод ошибок _к_о_м_а_н_д_ы_1.

ВВЫЫРРААЖЖЕЕННИИЯЯ
       ccsshh оперирует  выражениями,  в  которых  используются
       операции,  аналогичные  операциям в языке Си, с таким
       же приоритетом.  Эти  выражения  могут  появляться  в
       командах @@, eexxiitt, iiff и wwhhiillee.

       Разрешены следующие операции:

         ||||  &&&&   ||   ~~   &&  ====  ==~~  !!==  !!~~  <<==  >>==

          <<   >>  <<<<  >>>>   ++   --   **   //   %%   !!   ~~

       Старшинство операций в  этом  ряду  возрастает  слева
       направо; внутри следующих групп операции имеют одина-
       ковый приоритет:

           ====    ==~~    !!==    !!~~
           <<==    >>==     <<     >>
           <<<<    >>>>
            ++     --
            **     //     %%

       В операциях сравнения '====', '!!==', '==~~' и '!!~~' операн-
       дами  являются  строки.  Конструкции  с символами '~~'
       позволяют использовать шаблоны имен. Операндами  слу-
       жат строки.  Остальные оперируют с числами.  Логичес-
       кими значениями являются: 0  -  ложь,  1  (или  любое
       число,  отличное от нуля) - истина.  Все знаки опера-
       ций должны отделяться от операндов пробелами.

       Имеющиеся в ccsshh операции присваивания аналогичны опе-
       рациям присваивания языка Си. К ним относятся:

           ==    ++==    --==    **==    //==    %%==



                            -7-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       Постфиксные операции '++++' и '----' соответственно  уве-
       личивают  или  уменьшают на единицу значение перемен-
       ной.

       В  качестве  простых  операндов  в  выражениях  могут
       использоваться команды, заключенные в фигурные скобки
       '{{...}}'.

       В ccsshh имеются  операции  опроса  свойств  файла  вида
       --ll _и_м_я, где ll может принимать следующие значения:

              rr   разрешение чтения;
              ww   разрешение записи;
              xx   разрешение выполнения;
              ee   существование;
              oo   владелец;
              zz   нулевой размер;
              ff   незашифрованный файл;
              dd   каталог.

       В указанном файле осуществляются подстановки перемен-
       ных и имен файлов, а затем опрашиваются его свойства.
       Если файл обладает требуемым свойством, то  возвраща-
       ется значение 1 (истина), иначе - 0 (ложь).

ООППЕЕРРААТТООРРЫЫ ЯЯЗЗЫЫККАА CC--SSHHEELLLL
       Используются следующие операторы:

       ffoorreeaacchh _и_м_я (_с_л_о_в_о ...)
          _с_п_и_с_о_к__к_о_м_а_н_д
       eenndd
              Переменной _и_м_я  последовательно  присваиваются
              значения _с_л_о_в_о ...  и для каждого слова выпол-
              няется _с_п_и_с_о_к__к_о_м_а_н_д.

       sswwiittcchh( _с_т_р_о_к_а )
             ccaassee _с_л_о_в_о:
                  ...
                  bbrreeaakkssww
             ...
             ddeeffaauulltt:
                  ...
                  bbrreeaakkssww
       eennddssww
              _С_т_р_о_к_а последовательно сравнивается  со  всеми
              _с_л_о_в_а_м_и.   Если  соответствие  не  обнаружено,
              выполнение   продолжается    после    ddeeffaauulltt.
              Команда  bbrreeaakkssww приводит к тому, что выполне-
              ние продолжается после eennddssww.

       iiff ( _в_ы_р_1 ) tthheenn
       _с_п_и_с_о_к__к_о_м_а_н_д_1
       eellssee iiff ( _в_ы_р_2 ) tthheenn
       _с_п_и_с_о_к__к_о_м_а_н_д_2
       eellssee _с_п_и_с_о_к__к_о_м_а_н_д_3
       eennddiiff
              Если  значение   первого   выражения   истинно
              (отлично от нуля), выполняется _с_п_и_с_о_к__к_о_м_а_н_д_1.


                            -8-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              В  противном  случае  проверяется  _в_ы_р_а_ж_е_н_и_е_2:
              если оно истинно, выполняется _с_п_и_с_о_к__к_о_м_а_н_д_2 и
              т.д.  Операторы eellssee и eennddiiff могут быть только
              в  начале вводимых строк.  Пара iiff ... tthheenn не
              допускает задание других операторов в вводимой
              строке, за исключением eellssee в начале строки.

       wwhhiillee( _в_ы_р_а_ж_е_н_и_е )
               ...
       eenndd
              Цикл выполняется, пока истинно (не 0) значение
              _в_ы_р_а_ж_е_н_и_я.

       В операторах управления ccsshh ключевое слово (iiff,  eellssee
       и др.) должно быть первым словом в строке.

ККООММААННДДЫЫ ИИННТТЕЕРРППРРЕЕТТААТТООРРАА CCSSHH
       Выше не отличались команды, которые  являются  коман-
       дами  (стандартными  программами)  системы и команды,
       которые выполняет ccsshh, не обращаясь к  командам  сис-
       темы.  Такие  команды  называют встроенными командами
       ccsshh.  Ниже приведен список таких команд.

       aalliiaass
       aalliiaass _и_м_я
       aalliiaass _и_м_я _с_п_и_с_о_к__с_л_о_в
              Первая  форма  распечатывает  все  псевдонимы.
              Вторая  форма  распечатывает псевдоним указан-
              ного  _и_м_е_н_и.    Последняя   форма   определяет
              _с_п_и_с_о_к__с_л_о_в    как    псевдоним    _и_м_е_н_и.    В
              _с_п_и_с_к_е__с_л_о_в осуществляются подстановки.

       aalllloocc  Выдает   размер   используемой    динамической
              памяти,   включая   используемую  и  свободную
              память, а также адрес последней ячейки памяти.
              Используется в отладочных режимах работы ccsshh.

       bbgg
       bbgg %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       bbgg %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
              переводит последний приостановленный или  ука-
              занный процесс в асинхронный режим выполнения.

       bbrreeaakk  Вызывает возобновление  выполнения  после  eenndd
              ближайшей   внешней  конструкции  ffoorreeaacchh  или
              wwhhiillee. Если в одной  строке  указывается  нес-
              колько  команд  bbrreeaakk,  разделенных  точкой  с
              запятой,  то  переход   осуществляется   через
              столько же уровней.

       bbrreeaakkssww
              Вызывает выход из команды sswwiittcchh,  возобновляя
              выполнение после eennddssww.

       ccaassee _м_е_т_к_а:
              _М_е_т_к_а - один из вариантов оператора sswwiittcchh.




                            -9-                     ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       ccdd
       ccdd _и_м_я
       cchhddiirr
       cchhddiirr _и_м_я
              Заменяет текущий каталог на каталог _и_м_я.  Если
              параметр отсутствует, то по умолчанию принима-
              ется регистрационный каталог.

       ccoonnttiinnuuee
              Переход на начало  ближайшего  внешнего  wwhhiillee
              или ffoorreeaacchh.

       ddeeffaauulltt::
              Метка, обозначающая  вариант  по  умолчанию  в
              операторе  sswwiittcchh;  должна располагаться после
              всех меток ccaassee.

       ddiirrss   напечатать стек имен каталогов. Занесение имен
              каталогов в стек выполняет команда ppuusshhdd, уда-
              ление  имен  каталогов  из   стека   выполняет
              команда ppooppdd.  Элементы стека нумеруются от 1,
              начиная от вершины стека.

       eecchhoo _с_п_и_с_о_к__с_л_о_в
              Указанные  слова  записываются  в  стандартный
              файл  вывода.   Ключ  --nn  при  выводе отменяет
              переход на новую строку.

       eellssee
       eenndd
       eennddiiff
       eennddssww
              Используются в операторах ffoorreeaacchh, iiff,  sswwiittcchh
              и wwhhiillee.

       eevvaall _а_р_г ...
              Сначала  осуществляются   подстановки,   затем
              слово  eevvaall  отбрасывается и  оставшаяся часть
              выполняется как командная строка.  Эта  конст-
              рукция  введена  как  комплимент  SShheellll.   При
              'eevvaall --hh' в _и_с_т_о_р_и_ю попадает не строка с eevvaall,
              а сформированная команда без слова eevvaall.

       eeххeeсс _к_о_м_а_н_д_а
              _К_о_м_а_н_д_а запускается вместо  ccsshh.   Работа  ccsshh
              завершается.

       eexxiitt
       eexxiitt( _в_ы_р )
              Производится выход из ccsshh  либо  со  значением
              переменной ssttaattuuss (первая форма), либо со зна-
              чением  указанного   выражения   _в_ы_р   (вторая
              форма).

       ffgg
       ffgg %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       ffgg %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
              возвращает     указанный     или     последний


                            -10-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              приостановленный процесс в асинхронный режим.

       gglloobb _с_п_и_с_о_к__с_л_о_в
              Эта команда аналогична команде eecchhoo, за исклю-
              чением  того, что курсор остается за последним
              выведенным словом, а не на  следующей  строке;
              аргументы  из _с_п_и_с_к_а__с_л_о_в при выводе не разде-
              ляются пробелами.

       ggoottoo _с_л_о_в_о
              Команда безусловного перехода на метку. Выпол-
              нение  продолжается  со  строки,  идущей после
              указанной  метки.   Метка  должна  завершаться
              символом ':'.

       hhaasshhssttaatt
              Распечатывает статистику,  определяющую,  нас-
              колько эффективно внутренняя таблица хэширова-
              ния размещает команды. Используется в отладоч-
              ном режиме работы ccsshh.

       hhiissttoorryy
       hhiissttoorryy --rr
       hhiissttoorryy _n
       hhiissttoorryy --rr _n
       hhiissttoorryy --hh
              Выводит список  выполненных  командных  строк.
              По ключу --rr строки списка выводятся в обратном
              порядке.  Если задан аргумент _n, то  выводятся
              только  _n строк списка.  С ключом --hh выводятся
              строки в формате файла ._h_i_s_t_o_r_y.

       iiff (_в_ы_р) _к_о_м_а_н_д_а
              Если значение указанного выражения истинно (не
              0),  выполняется _к_о_м_а_н_д_а.  Команда должна быть
              одна.  Использование конвейера не допускается.

       jjoobbss
       jjoobbss --ll
              Вывести таблицу  процессов.  Формат  'jjoobbss --ll'
              выводит более полную информацию. Интерпретатор
              ccsshh обеспечивает работу с внутренними  и  сис-
              темными  идентификаторами процессов. Системные
              идентификаторы  процессов  выводятся  командой
              ppss,  внутренние  командой  jjoobbss.  Пользователю
              предоставляется возможность  не  обращаться  к
              системным   идентификаторам,   а  указывать  в
              командах управления процессами (bbgg, ffgg,  ssttoopp,
              kkiillll,  lliimmiitt и др.) внутренние идентификаторы.
              Внутренний идентификатор  процесса  печатается
              командой  jjoobbss в квадратных скобках.  Символом
              '+' помечается последний  из  приостановленных
              процессов. Символом '-' помечается предпослед-
              ний из приостановленных процессов.






                            -11-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       kkiillll %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       kkiillll --_S_I_G %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       kkiillll %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
       kkiillll --_S_I_G %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
       kkiillll _с_и_с_т_е_м_н_ы_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       kkiillll --_S_I_G _с_и_с_т_е_м_н_ы_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       kkiillll --ll
              Если _S_I_G не указан, процессу посылается сигнал
              TTEERRMM  (окончить).  Сигнал _S_I_G указывается либо
              числом, либо именем без  префикса  'SIG'  (как
              это   определено   в   /_u_s_r/_i_n_c_l_u_d_e/_s_i_g_n_a_l._h);
              'kkiillll --ll' выводит список имен сигналов.

       lliimmiitt _т_и_п__р_е_с_у_р_с_а _м_а_к_с_и_м_а_л_ь_н_ы_й__р_а_з_м_е_р
       lliimmiitt _т_и_п__р_е_с_у_р_с_а
       lliimmiitt
              ccsshh   обеспечивает   (на   ЕС ЭВМ,    СМ-1700,
              Электроника-82 и т.п.) возможность для ограни-
              чения  потребления  одним  процессом  ресурсов
              системы.   Ограничивается потребление актуаль-
              ным процессом и каждым процессом который  соз-
              дается,  так  что  ни  один  из этих процессов
              отдельно  не   превышает   _м_а_к_с_и_м_а_л_ь_н_ы_й__р_а_з_м_е_р
              заданного      ресурса.      Если     значение
              _м_а_к_с_и_м_а_л_ь_н_ы_й__р_а_з_м_е_р  не  задано,  то  выдается
              значение  текущего  ограничения; если значение
              _т_и_п__р_е_с_у_р_с_а не задано, то выдаются  все  уста-
              новленные   ограничения.   Текущее  управление
              ресурсов  включает  время  процессора  ccppuuttiimmee
              (максимальное  число  секунд центрального про-
              цессора, отводимое каждому  процессу),  размер
              файла  ffiilleessiizzee  (максимальный  размер  одного
              файла, который можно создать), размер сегмента
              данных   ddaattaassiizzee   (максимальное   увеличение
              области _д_а_н_н_ы_е + _с_т_е_к  с  помощью  ssbbrrkk(2)  за
              границу текста программы), размер стека ssttaacckk--
              ssiizzee (максимальный размер автоматически расши-
              ряемой   области   стека),   и   размер  дампа
              ccoorreedduummppssiizzee (максимальный размер дампа, кото-
              рый   будет   создан).    Максимальный  размер
              ресурса может быть задан в виде числа  (целого
              либо  с  точкой), за которым следует указатель
              размерности.  Для  всех  ограничителей,  кроме
              ccppuuttiimmee, по умолчанию используется размерность
              kk или kkiilloobbyytteess (килобайт - 1024 байта);  раз-
              мерность тоже можно задать в мегабайтах, как mm
              либо mmeeggaabbyytteess.   Для  времени  процессора  по
              умолчанию используются (секунды) ss, можно ука-
              зывать также минуты  mm   либо  часы  hh,  можно
              использовать  конструкцию  _m_m:_s_s  для  задания
              минут и секунд.  Для задания имен типов ресур-
              сов  и указаталей размерности достаточно зада-
              вать уникальные префиксы имен.

       llooggiinn
       llooggiinn _и_м_я
              По команде llooggiinn завершается работа ccsshh и ини-
              циализируется   программа  llooggiinn  для  данного


                            -12-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              дисплея.  Команда  может  использоваться   без
              параметра  _и_м_я и с ним. Во втором случае сразу
              же будет запрошен входной пароль пользователя.

       llooggoouutt Завершает работу ccsshh, так же,  как  и  CCTTRRLL//DD.
              Если  определена переменная iiggnnoorreeeeooff, то сиг-
              нал конца файла CCTTRRLL//DD игнорируется.

       nniiccee
       nniiccee ++_ч_и_с_л_о
       nniiccee _к_о_м_а_н_д_а
       nniiccee ++_ч_и_с_л_о _к_о_м_а_н_д_а
              Первая форма устанавливает приоритет ccsshh  рав-
              ным  4.   Вторая форма устанавливает приоритет
              равным  указанному  числу.   Последние   формы
              выполняют  команду  с  приоритетом  4  и _ч_и_с_л_о
              соответственно.     Используя      конструкцию
              'nniiccee --_ч_и_с_л_о...',   супер-пользователь   может
              установить отрицательный приоритет.  Использо-
              вание конвейеров не допускается.

       nnoohhuupp
       nnoohhuupp _к_о_м_а_н_д_а
              Команда предотвращает реакцию ccsshh  на  сигналы
              прерывания.   При использовании без параметров
              действие nnoohhuupp распространяется на все  строки
              командного  файла, указанные за ней. Во второй
              форме сигналы прерывания  игнорируются  только
              при  выполнении  указанной  _к_о_м_а_н_д_ы.  Для всех
              фоновых процессов nnoohhuupp выполняется  автомати-
              чески.

       nnoottiiffyy %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       nnoottiiffyy %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
       nnoottiiffyy
              Выводит сообщения об изменениях состояния про-
              цесса  асинхронно.  Обычно эти сообщения выво-
              дятся  после  передачи  на  выполнение   новой
              командной  строки.  Если команда nnoottiiffyy выпол-
              нена без аргументов, то этот режим  устанавли-
              вается для всех процессов.

       oonniinnttrr
       oonniinnttrr --
       oonniinnttrr _м_е_т_к_а
              Управляет реакцией ccsshh на  прерывания.  Первая
              форма  восстанавливает стандартную реакцию ccsshh
              на прерывания, которая заключается в  заверше-
              нии выполнения командных файлов или возврате в
              интерактивный режим.   Вторая  форма  вызывает
              игнорирование любых сигналов прерывания.  Пос-
              ледняя форма при получении сигнала  прерывания
              вызывает выполнение команды 'ggoottoo _м_е_т_к_а'.

       ppooppdd
       ppooppdd ++_ч_и_с_л_о
              Форма ppooppdd выполняет команду  'ccdd _и_м_я__н_о_м_е_р__2'
              стека  имен  каталогов.   _И_м_я__н_о_м_е_р__1 из стека


                            -13-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              имен каталогов удаляется,  остальные  элементы
              стека  сохраняются  с  новыми номерами.  Форма
              'ppooppdd ++_ч_и_с_л_о'  удаляет  _и_м_я__н_о_м_е_р(1+_ч_и_с_л_о)  из
              стека,  остальные элементы стека сохраняются с
              новыми номерами. При  этом  переход  в  другой
              каталог не осуществляется.

       ppuusshhdd
       ppuusshhdd _и_м_я__к_а_т_а_л_о_г_а
       ppuusshhdd ++_ч_и_с_л_о
              Любая форма команды ppuusshhdd меняет порядок  имен
              в  стеке  имен  каталогов.  Число имен в стеке
              может только  увеличиваться.  Порядок  имен  в
              стеке  меняется после выполнения команды ppuusshhdd
              в любой форме.  Форма ppuusshhdd выполняет  команду
              'ccdd _и_м_я__н_о_м_е_р__2'      стека.      При     этом
              _и_м_я__с__н_о_м_е_р_о_м__2   ставится   в   вершину,    а
              _и_м_я__с__н_о_м_е_р_о_м__1   -  на  его  место  в  стеке;
              остальные элементы  стека  остаются  на  своих
              местах.    Форма   'ppuusshhdd _к_а_т_а_л_о_г'   выполняет
              команду 'ccdd _к_а_т_а_л_о_г', при этом _к_а_т_а_л_о_г записы-
              вается  в  вершину  стека,  остальные элементы
              стека сохраняются с  новыми  номерами.   Форма
              'ppuusshhdd ++_ч_и_с_л_о'        выполняет        команду
              'ccdd _и_м_я__с__н_о_м_е_р_о_м(1+_ч_и_с_л_о)'.      При     этом
              _и_м_я__с__н_о_м_е_р_о_м(1+_ч_и_с_л_о)   ставится   в  вершину
              стека, а _ч_и_с_л_о имен каталогов переписываются в
              конец  стека в том порядке, в котором они сле-
              довали от вершины стека, другие элементы стека
              остаются без изменений.

       rreehhaasshh Создает  хэш-таблицу  команд,  содержащихся  в
              каталогах, которые указаны в переменной ppaatthh.

       rreeppeeaatt _ч_и_с_л_о _к_о_м_а_н_д_а
              Повторяет выполнение _к_о_м_а_н_д_ы _ч_и_с_л_о раз.  Стан-
              дартные  файлы  ввода/вывода  задаются  только
              один раз.

       sseett
       sseett _и_м_я
       sseett _и_м_я=_с_л_о_в_о
       sseett _и_м_я[_и_н_д_е_к_с]=_с_л_о_в_о
       sseett _и_м_я=(_с_п_и_с_о_к__с_л_о_в)
              Первая форма данной команды  выводит  значения
              всех переменных ccsshh. Переменные, которые имеют
              несколько значений, выводятся в  виде  списка,
              заключенного  в  скобки. Вторая форма присваи-
              вает указанному _и_м_е_н_и  строку  нулевой  длины.
              Третья форма присваивает _и_м_е_н_и значение _с_л_о_в_а.
              Четвертая форма присваивает компоненте имени с
              номером _и_н_д_е_к_с значение _с_л_о_в_а. Последняя форма
              присваивает _и_м_е_н_и значения из _с_п_и_с_к_а__с_л_о_в.

       sseetteennvv
       sseetteennvv _и_м_я _з_н_а_ч_е_н_и_е
              Первая форма выводит значения переменных среды
              процесса, вторая их устанавливает.


                            -14-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       sshhiifftt
       sshhiifftt _п_е_р_е_м_е_н_н_а_я
              Первая форма: члены переменной aarrggvv сдвигаются
              влево, при этом aarrggvv[1] (левый элемент списка)
              отбрасывается. Если элемент списка не  опреде-
              лен или имеет менее одного значения, то возни-
              кает ошибка.  Вторая форма  команды  выполняет
              эти же действия над указанной _п_е_р_е_м_е_н_н_о_й.

       ssoouurrccee _и_м_я
              ccsshh считывает команды из  файла  _и_м_я.  Команда
              ssoouurrccee может быть вложенной; если глубина вло-
              жения слишком  велика,  то  может  не  хватить
              дескрипторов  файлов.  Ошибка в команде ssoouurrccee
              на любом уровне прерывает выполнение остальных
              вложенных команд ssoouurrccee.

       ssttoopp %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
              Приостанавливает асинхронно выполняющийся про-
              цесс.

       ssuussppeenndd
              Приостанавливает выполнение  порожденной  обо-
              лочки.   От сигнала CCTTRRLL//ZZ и команды ssttoopp обо-
              лочка защищена.

       ttiimmee
       ttiimmee _к_о_м_а_н_д_а
              При отсутствии параметров сообщает время, зат-
              раченное  интерпретатором  ccsshh  и порожденными
              процессами.   Если  параметр  задан,  выдается
              время, затраченное указанной _к_о_м_а_н_д_о_й.

       uummaasskk
       uummaasskk _з_н_а_ч_е_н_и_е
              Маска доступа к файлу выводится (первая форма)
              или устанавливается равной указанному значению
              (вторая форма). Значение маски  указывается  в
              восьмеричном  коде.  Самыми  распространенными
              значениями маски являются 022 (по  умолчанию),
              которое  задает любой доступ для пользователей
              своей группы и доступ для чтения и  выполнения
              другим   пользователям,  и  002,  определяющее
              любой доступ, за исключением записи, для поль-
              зователей своей группы и всех прочих.

       uunnaalliiaass _о_б_р_а_з_е_ц
              Все псевдонимы,  имена  которых  соответствуют
              указанному  образцу,  отбрасываются.  Следова-
              тельно, команда 'uunnaalliiaass **' удаляет все  псев-
              донимы.  Если  псевдонимы не удалились, это не
              считается ошибкой; использование  команды  без
              параметров приводит к возникновению ошибки.

       uunnhhaasshh Запрещает использование хэш-таблицы для  уско-
              рения нахождения выполняемых программ.




                            -15-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       uunnlliimmiitt _р_е_с_у_р_с
       uunnlliimmiitt
              Снимает ограничение на _р_е_с_у_р_с.  Если _р_е_с_у_р_с не
              указан,   то   снимаются  ограничения  на  все
              ресурсы.

       uunnsseett _о_б_р_а_з_е_ц
              Все переменные,  имена  которых  соответствуют
              указанному  образцу, удаляются. Таким образом,
              команда  'uunnsseett **'  удаляет  все   переменные,
              определенные  командой  sseett.   Попытка удалить
              неопределенную переменную не приводит  к  воз-
              никновению ошибки.

       uunnsseetteennvv _и_м_я
              Удаляется переменная окружения _и_м_я.  Удаляются
              только  переменные  окружения,  добавленные  к
              установленным системой.

       wwaaiitt
       wwaaiitt _p_i_d
       wwaaiitt %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
              В первой форме происходит ожидание всех порож-
              денных  процессов. В интерактивном режиме сиг-
              нал прерывания  может  прервать  и  выполнение
              команды  wwaaiitt;  при  этом ccsshh печатает имена и
              номера всех незавершенных процессов.  Во  вто-
              рой  и  третьей  форме ожидается окончание или
              останов  указанного  процесса.   Остальные  не
              ожидаются.

       @@
       @@_и_м_я=_в_ы_р_а_ж_е_н_и_е
       @@_и_м_я[_и_н_д_е_к_с]=_в_ы_р_а_ж_е_н_и_е
              Первая форма распечатывает значения всех пере-
              менных  ccsshh.   Вторая  форма присваивает пара-
              метру  _и_м_я  значение  _в_ы_р_а_ж_е_н_и_я.   Если  часть
              выражения  содержит  символы '<<', '>>', '&&' или
              '||', то она должна быть  заключена  в  круглые
              скобки  '(...)'. Третья форма присваивает ком-
              поненте _и_м_я с номером _и_н_д_е_к_с значение  _в_ы_р_а_ж_е_-
              _н_и_я.   _И_м_я  и  его компонента с номером _и_н_д_е_к_с
              должны существовать.

       %%
       %%%%
       %%++
       %%--
       %%_в_н_у_т_р_е_н_н_и_й__и_д_е_н_т_и_ф_и_к_а_т_о_р__п_р_о_ц_е_с_с_а
       %%_п_р_е_ф_и_к_с__и_м_е_н_и__п_р_о_ц_е_с_с_а
              Формы '%%', '%%%%' и  '%%++'  возвращают  последнее
              приостановленное  задание  в  синхронный режим
              выполнения. Форма '%%--' делает то же для  пред-
              последнего   из   приостановленных  процессов.
              Остальные формы делают  то  же  для  указанных
              процессов.  Для запуска в асинхронный режим на
              конце командной строки указывается  '&&'.   Эти
              команды аналогичны ffgg и bbgg.


                            -16-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


РРЕЕДДААККТТООРР ССТТРРООКК CCSSHH
       Редактор строк, встроенный в интерпретатор ccsshh, запо-
       минает  все введенные Вами строки. Для редактирования
       введенных  ранее  строк  используются  функциональные
       клавиши со стрелками.  Допустимы следующие команды:

       стрелки вверх/вниз
             перемещение по строкам назад/вперед;
       стрелки вправо/влево
             перемещение на один символ вправо/влево в теку-
             щей строке;
       клавиши вставки/удаления символа (IINNSS/DDEELL)
             вставить/удалить символ;
       HHOOMMEE стрелка вправо/влево
             перемещение в конец/начало строки;
       HHOOMMEE IINNSS/DDEELL
             переход в режим вставки/замены. В начале сеанса
             редактор работает в режиме вставки;
       забой стереть один символ перед курсором;
       ССТТРР   стереть конец строки, начиная от текущей  пози-
             ции (на которую указывает курсор);
       ССУУ//UU (CCTTRRLL//UU)
             стереть текущую строку;
       ССУУ//WW (CCTTRRLL//WW)
             стереть слово (или часть слова) перед курсором;

       Для редактирования доступны все строки, а  не  только
       командные  (в том числе и строки, содержащиеся внутри
       циклов с подсказкой '??'). Строка запоминается  в  том
       виде,  в  каком ее ввели (то есть строка запоминается
       до того, как начинают выполняться подстановки).

       Число  запоминаемых  строк  определяется   переменной
       sshhiissttoorryy, которую можно установить в файле ._c_s_h_r_c.

ВВННУУТТРРЕЕННННИИЕЕ ППЕЕРРЕЕММЕЕННННЫЫЕЕ
       aarrggvv   Определяет значения параметров ccsshh. К ней при-
              менимы   подстановки   позиционных  параметров
              (например, $$1 заменяется на $$aarrggvv[1]).

       ccddppaatthh Если переменная ccddppaatthh определена,  то  каждый
              каталог  в  ccddppaatthh  будет  просматриваться при
              поиске каталога, указанного в  команде  cchhddiirr,
              если  каталога  с указанным именем нет в рабо-
              чем.

       cchhkkttiimmee
              Если переменная cchhkkttiimmee установлена и, если  в
              течении   указанного  времени  не  выполнялось
              каких-либо действий, выполняется eexxiitt.  Допус-
              тим,   выполнена   команда  'sseett cchhkkttiimmee = 3',
              тогда, если в течении 3 минут  не  выполнялись
              какие-либо  действия,  выполняется  eexxiitt и ccsshh
              прекращает работу.

       cchhiilldd  Номер процесса; выводится при  запуске  парал-
              лельного процесса. По завершении процесса зна-
              чение переменной сбрасывается.


                            -17-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       ccwwdd    BВ этой переменной ccsshh хранит полное имя рабо-
              чего каталога.

       eecchhoo   Устанавливается, если в командной строке  ука-
              зывается   ключ  --xx.  Вызывает  печать  каждой
              команды и ее параметров перед выполнением. Все
              расширения выполняются перед выводом.

       hhiissttoorryy
              Определяет   размер   списка    предшествующих
              команд.   Слишком  большое значение переменной
              может привести к нехватке памяти.  Оптимальное
              число - 22 строки.

       hhoommee   Определяет имя регистрационного каталога поль-
              зователя.

       iiggnnoorreeeeooff
              Предотвращает завершение ccsshh при приеме  концa
              файла CCTTRRLL//DD.

       mmaaiill   Содержит имена файлов почтовых ящиков, которые
              проверяются  интерпретатором  ccsshh  на  наличие
              почты после завершения каждой команды.

       nnoocclloobbbbeerr
              Устанавливает защиту файлов от случайного раз-
              рушения  и  обеспечивает  существование файлов
              вывода при использовании конструкции '>>>>'.

       nnoogglloobb Запретить расширение имен файлов.

       nnoonnoommaattcchh
              Обычно, если указанному  шаблону  имен  файлов
              Bне соответствует ни один файл, то порождается
              состояние ошибки. Если установлена  переменная
              nnoonnoommaattcchh,  состояние  ошибки  не возникает, а
              указанный шаблон передается как аргумент прог-
              рамме.

       nnoottiiffyy Асинхронно  выводит  сообщения  о   состояниях
              выполняемых  процессов. Если переменная nnoottiiffyy
              не установлена, эти сообщения выводятся  после
              запуска на выполнение новой командной строки.

       ppaatthh   Определяет список имен  каталогов  для  поиска
              выполняемых команд.

       pprroommpptt Определяет  строку-приглашение  интерпретатора
              для ввода команд. Если в этой строке присутст-
              вует символ '!!', то он заменяется  на  текущий
              номер  команды.  Стандартными значениями явля-
              ются '%' - для обычного пользователя и  '#'  -
              для суперпользователя.

       ssaavveehhiisstt
              Определяет размер  файла  ~/._h_i_s_t_o_r_y  .  Если,
              например,    в    файле    ~/._l_o_g_i_n    указано


                            -18-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              'sseett ssaavveehhiisstt = 20', то  ccsshh  будет  сохранять
              последние  20 строк _и_с_т_о_р_и_и действий в файле -
              ~/._h_i_s_t_o_r_y,  который  будет  считываться   при
              возобновлении сеанса работы.

       sshheellll  Имя интерпретатора командного языка, использу-
              емого пользователем.

       sshhiissttoorryy
              Определяет число строк, запоминаемых  редакто-
              ром строк ccsshh.

       ssttaattuuss Определяет код завершения последней команды (0
              -  при  успешном  выполнении  команды, 1 - при
              неуспешном).

       ttiimmee   Хронометрирует команды, если их действие  про-
              должалось более указанного времени.

       vveerrbboossee
              Устанавливается ключом --vv  и  вызывает  распе-
              чатку  каждой командной строки перед ее выпол-
              нением.

ППЕЕРРЕЕММЕЕННННЫЫЕЕ ССРРЕЕДДЫЫ
       Переменные  среды  (переменные  окружения)   являются
       внутренними  константами  интерпретатора.   Для уста-
       новки их значений используется  команда  sseetteennvv,  для
       отмены  - команда uunnsseetteennvv.  Перечисленные ниже имена
       зарезервированы  как  стандартные  имена   переменных
       окружения:

       PPAATTHH     имена  стандартных  каталогов,   разделенных
                двоеточием;
       HHOOMMEE     регистрационный каталог пользователя,  уста-
                новленный в файле /_e_t_c/_p_a_s_s_w_d;
       TTEERRMM     имя типа терминала;
       TTEERRMMCCAAPP  строка определения возможностей  дисплея  из
                файла /_e_t_c/_t_e_r_m_c_a_p;
       SSHHEELLLL    имя интерпретатора командного языка, который
                инициализируется  при  входе  пользователя в
                систему;
       MMSSGG      определяет, на каком языке будут  выводиться
                сообщения пользователю при работе с системой
                (MMSSGG = rr - на русском, MMSSGG = ee - на английс-
                ком);
       UUSSEERR     регистрационное имя пользователя.

ППЕЕРРЕЕММЕЕННННЫЫЕЕ УУППРРААВВЛЛЕЕННИИЯЯ ЭЭККРРААННООММ
       В CC--sshheellll есть встроенные переменные, предназначенные
       для  работы  с  экраном терминала, при помощи которых
       можно  выполнять  такие  действия,  как  переключение
       шрифта,  перемещение  курсора  в  заданную позицию на
       экране, очистка экрана и др., в зависимости  от  воз-
       можностей  данного  терминала. При запуске ccsshh считы-
       вает возможности терминала из  файла  /_e_t_c/_t_e_r_m_c_a_p  и
       присваивает  каждой  из  этих  переменных управляющую
       последовательность,   необходимую   для    выполнения


                            -19-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


       соответствующего  действия на данном терминале.  Если
       данной возможности у терминала  нет,  соответствующей
       переменной присваивается пустая строка.  Команда

           eecchhoo "$_п_е_р_е_м_е_н_н_а_я"

       вызовет выполнение действия, которым управляет  _п_е_р_е_-
       _м_е_н_н_а_я.  Переменные управления экраном:

       __bbeellll         звонок;
       __bblliinnkk        включить  мигание;  чтобы  вывести   на
                     экран  мигающую строку, можно использо-
                     вать команду
                         eecchhoo "$$__bblliinnkk" "_с_т_р_о_к_а" "$$__nnoorrmmaall"
                     переменная __nnoorrmmaall отключает мигание;
       __bboolldd         включить выделение жирным шрифтом; отк-
                     лючается переменной __nnoorrmmaall;
       __cclleeaarr        очистить экран;
       __ccllrrlliinnee      очистить строку;
       __hhoommee         переместить курсор в левый верхний угол
                     экрана;
       __iinnvveerrssee      включить выделение инверсным  изображе-
                     нием; отключается переменной __nnoorrmmaall;
       __iittaalliicc       включить выделение  курсивом;  отключа-
                     ется переменной __nnoorrmmaall;
       __lliinneess        число строк на экране;
       __lloowweerrlleefftt    переместить курсор в левый нижний  угол
                     экрана;
       __rroollll[_x_1,_x_2]  установить роллирование от строки _x_1 до
                     строки _x_2;
       __rroowwss         число символов в строке;
       __ssttaannddoouutt     включить стандартное выделение;  отклю-
                     чается переменной __nnoorrmmaall;
       __ttiimmee         эта переменная содержит текущее время в
                     формате  _ч_ч:_м_м:_с_с и автоматически уста-
                     навливается каждый раз в момент исполь-
                     зования;
       __uunnddeerrlliinnee    включить выделение подчеркиванием; отк-
                     лючается переменной __nnoorrmmaall.

       Кроме того, есть псевдопеременная  __ppooss,  которая  на
       самом  деле  является функцией (это довольно искусст-
       венная для ccsshh конструкция, больше нигде не использу-
       ется).   При  помощи  __ppooss можно переместить курсор в
       заданную позицию на экране:

       eecchhoo "$$__ppooss[_x,_y]"

       где _x - номер строки, _y - номер  колонки,  считая  от
       верхнего левого угла экрана.

ККЛЛЮЮЧЧИИ CCSSHH
       --cc     Считать команду  из  единственного  параметра,
              указанного сразу после --cc. Все остальные пара-
              метры размещаются в переменной aarrggvv.

       --ee     Прекратить работу ccsshh,  если  любая  вызванная
              команда   выполнена  неуспешно  или  если  код


                            -20-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


              завершения команды не равен нулю.

       --ff     Запретить чтение файла ._c_s_h_r_c для  обеспечения
              более быстрого запуска интерпретатора ccsshh.

       --ii     Устанавливает   интерактивный   режим   работы
              интерпретатора.

       --nn     Осуществляет  только  синтаксическую  проверку
              команд.

       --ss     Считывать входную информацию  из  стандартного
              файла ввода.

       --tt     Считывать и выполнять  только  одну  командную
              строку.   Эта  строка  может содержать в конце
              символ продолжения строки '\'.

       --vv     Вызывает  установку  переменной   vveerrbboossee,   в
              результате  чего вводимые команды распечатыва-
              ются после подстановки предшествующих команд.

       --VV     Вызывает установку  переменной  vveerrbboossee  перед
              выполнением файла ._c_s_h_r_c.

       --xx     Вызывает распечатку команд перед  их  выполне-
              нием.

       --XX     Устанавливает ключ --xx при интерпретации  файла
              ._c_s_h_r_c.

ООББРРААББООТТККАА ССИИГГННААЛЛООВВ
       Интерпретатор команд обычно игнорирует сигналы выхода
       (SSIIGGQQUUIITT).  Команды,  выполняемые  в  фоновом режиме,
       обычно  игнорируют  сигналы  прерывания  (SSIIGGIINNTT)   и
       выхода.  В обычном режиме эти сигналы имеют значения,
       наследуемые от предыдущего процесса. Реакция  ccsshh  на
       прерывания  может  устанавливаться  командой  oonniinnttrr.
       Интерпретаторы, устанавливаемые  непосредственно  при
       регистрации пользователя в системе, воспринимают сиг-
       нал завершения (SSIIGGTTEERRMM); в остальных случаях состоя-
       ние  сигнала  прерывания  передается из текущего про-
       цесса  в  порождаемый.  Во  время  считывания   файла
       ._l_o_g_o_u_t сигналы прерывания на воспринимаются.

ФФААЙЙЛЛЫЫ
       ~/._c_s_h_r_c       Считывается ccsshh в начале выполнения.
       ~/._l_o_g_i_n       Считывается ccsshh после ._c_s_h_r_c при входе
                      в систему.
       ~/._l_o_g_o_u_t      Считывается ccsshh при выходе.
       ~/._h_i_s_t_o_r_y     Считывается ccsshh в  начале  выполнения.
                      Содержит  _и_с_т_о_р_и_ю  предыдущего  сеанса
                      работы. Файл  ~/._h_i_s_t_o_r_y  формируется,
                      когда установлена переменная ssaavveehhiisstt.
       /_b_i_n/_s_h        Стандартный _s_h_e_l_l для  командных  фай-
                      лов, которые начинаются не с '##'.
       /_t_m_p/_s_h*       Временный файл для '<<<<'.
       /_e_t_c/_p_a_s_s_w_d    Регистрационные  имена   пользователей


                            -21-                    ДЕМОС/PV


CSH(1)                 ДЕМОС. Команды                 CSH(1)


                      для обработки конструкции '~_и_м_я'.

ООГГРРААННИИЧЧЕЕННИИЯЯ
       Слова не могут быть длинее, чем 512 символов.   Коли-
       чество  символов  в  параметрах  зависит  от системы.
       Предел составляет от 512 до 5120 символов. Количество
       параметров  команды,  включающих расширения имен фай-
       лов, ограничено 1/6-ой числа символов, разрешенных  в
       списке  параметров. При подстановке команд количество
       подставляемых символов  не  должно  превышать  числа,
       указанного  в  списке параметров.  Для предотвращения
       зацикливания ccsshh ограничивает количество  подстановок
       псевдонимов в одной строке до 20-ти.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _s_h(1), _e_n_v_i_r_o_n(7)

       Имеется отдельное описание ccsshh.

ЗЗААММЕЕЧЧААННИИЯЯ
       Не  путайте  механизм  hhiissttoorryy  с  редактором  строк,
       встроенным  в ccsshh.  Команды, содержащиеся внутри цик-
       лов с подсказкой '??', не помещаются в _и_с_т_о_р_и_ю (список
       предшествуюих  команд),  но  они  доступны  с помощью
       редактора строк. В _и_с_т_о_р_и_ю запоминается строка  после
       подстановок,  а редактор запоминает строку до подста-
       новки.

       В подстановках переменных допускается не более одного
       модификатора '::'.






























                            -22-                    ДЕМОС/PV

