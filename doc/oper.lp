
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







                   РУКОВОДСТВО ОПЕРАТОРА







                 Усиков Сергей Анатольевич












                       МОСКВА - 1985









                                                           1







   Данный документ представляет собой руководство  оператора
по  работе с диалоговой единой мобильной операционной систе-
мой (ДЕМОС).























































2



     ВВЕДЕНИЕ


   При написании данного документа ставилась цель  разобрать
действия по поддержанию ДЕМОС в рабочем состоянии. Наличие в
документе многочисленных примеров и вводных  глав  (1  и  2)
позволяет использовать его работавшим ранее с другими опера-
ционными системами без предварительного  изучения  ДЕМОС,  а
сами  главы 1 и 2 можно рекомендовать в качестве руководства
начинающему.

Документ включает следующие разделы:

1) Базовые понятия
     содержит неформальное описание базовых понятий операци-
     онной   системы  (работа  с  терминалом,  интерпретатор
     команд, выполнение команд, файловая система, привелеги-
     рованные  пользователи)  и  ряда простейших команд (cd,
     pwd, cat, ps, kill, ls);

2) Минимальный набор команд
     содержит описание минимального набора команд, без  зна-
     ния  которого  загрузка  ДЕМОС возможна только при пол-
     ностью исправной системе;

3) Загрузка ДЕМОС
     содержит описание процесса загрузки и  разбор  типичных
     ситуаций;

4) Ведение копии системы
     содержит описание действий оператора по  ведению  копии
     системы и восстановлению необходимой информации;

5) Восстановление системы
     содержит описание действий оператора по  восстановлению
     утерянной информации с резервной копии;

6) Настройка терминалов
     содержит описание правил настройки терминалов (то  есть
     действия  по  установке соответствия модели терминала и
     информации о нем в системе);

7) Включение пользователей
     содержит описание правил включения новых  пользователей
     ДЕМОС;

8) Работа со статистикой
     содержит описание работы со статистикой;

9) Сообщения системы
     содержит описание диагностических сообщений ядра систе-
     мы.


Особенности документа:

   - по методическим причинам часто используются  упрощенные
     модели работы системы и команд;




                                                           3


   - раздел 3.1 построен как автономный и  позволяет  загру-
     зить исправную систему на исправной машине без изучения
     других разделов;

   - не рассмотренна важнейшая особенность ДЕМОС  -  возмож-
     ность  создавать  новые команды используя базовый набор
     утилит. Заметим только одно: "не торопитесь  писать  на
     фортране  или Си - очень многие программы пользователей
     дублируют стандартные возможности".






















































4





                     1. БАЗОВЫЕ ПОНЯТИЯ


   Для выполнения своих функций оператору  необходимо  иметь
некоторый  опыт  работы  с ДЕМОС, для чего ему рекомендуется
немного потренироваться в работающей  системе  как  обычному
пользователю.

   При описании действий оператора будет использоваться сле-
дующая форма. Как известно, стандартный интерпретатор команд
shell  при  готовности  к  приему  команды  выдает   строку-
подсказку  $  любому  пользователю кроме супер-пользователя,
который имеет свою подсказку #. Однако при входе  в  систему
строку-подсказку  можно установить на свой вкус. Для нагляд-
ности многие используют строки типа bin> , user>,  games>  и
т.д.  Поэтому  в дальнейшем описании тот факт, что пользова-
тель bin выполнил команду ls будет отражен как

        bin> ls
        file1 file2 file3
        bin>

Читать эту запись следует так:

   - интерпретатор был готов к приему команды;

   - пользователь набрал команду ls и закончил  ее  символом
     ВК;

   - команда ls напечатала список файлов (какие нашлись);

   - интерпретатор сообщил о  готовности  принять  очередную
     команду.

Если бы команду выполнял супер-пользователь, то  наш  пример
имел бы вид:

        # ls
        file1 file2 file3
        #

Исключением из этого  правила  являются  подсказки  login  и
passwd, которые выдаются при входе в систему.


   1.1. Работа с терминалом


   Терминал для пользователя есть средство  обмена  информа-
цией  с  ЭВМ.  Терминал состоит из двух отдельных устройств:
экрана и клавиатуры. На большинстве терминалов  есть  специ-
альные  клавиши  управления  режимами  самого  терминала как
электронного устройства (назовем их для себя группа 1).

   В первую очередь это переключатель  ЛИНИЯ.  Он  позволяет
либо  подключить  терминал  к линии связи с ЭВМ, либо отклю-
читься от нее. Если на вашем терминале эти клавиши называют-
ся  OFF-LINE и ON-LINE то нажмите ON, если есть одна клавиша


                                                           5


ЛИН - нажмите ее.

   Так как экран и клавиатура есть два отдельных устройства,
то  существует возможность соединять их вместе. При этом на-
бираемые символы попадают как в линию связи  с  ЭВМ,  так  и
сразуотображаются на экране терминала. Эти режимы называются
ДУПЛЕКС - когда устройства разделены и СИМПЛЕКС - экран под-
соединен  к  клавиатуре.  В ДЕМОС применяется режим дуплекс,
поэтому, если на вашем терминале  есть  клавиша  FULL-DUPLEX
или ДУП, нажмите ее.

   Существует множество моделей терминалов и трудно  расска-
зать о включении их в общем случае. Обычно порядок включения
можно узнать у других пользователей или в паспорте на терми-
нал. Обратите внимание на такие клавиши как ROLL, РЕД и т.д.

   Из работы в режиме ДУПЛЕКС следует  первый  вывод  -  при
выключении  ЭВМ набираемые символы перестают отображаться на
экране. Более правильно сказать, что они попадают  в  специ-
альную  программу,  которая,  среди  разных других действий,
обычно еще и отображает часть символов на экране.

   Это очень важный момент в  изучении  терминала.  Понятно,
что  очень нетрудно научить программу обслуживания терминала
(ее называют "драйвер терминала") разным чудесам кроме прос-
той  передачи  символов  другой  программе  (называемой "ин-
терпретатором команд"), которая будет разбирать их и пытать-
ся понять, что вам надо.

   Рассмотрим простейший пример. Желая набрать команду  mail
вы  можете  нечаянно набрать неверный символ и получите maik
вместо mail. Забегая вперед скажем, что  во  многих  случаях
набираемый текст не сразу передается программе интерпретато-
ру, а копится в буфере до нажатия клавиши ВК (на многих тер-
миналах RETURN). Пока не нажата ВК набранная строка еще дос-
тупна для исправлений.

   Так что делать с maik? Отменять всю команду  (заметьте  -
понадобилась  еще одна специальная функция - отменить коман-
ду) жалко - три символа набраны  верно.  Для  таких  случаев
обычно  есть  специальный символ, задача которого - отменять
предыдущий символ. В нашем примере для  исправления  команды
на правильную надо было бы набрать сивол отмены (то есть от-
менить символ k), а затем ввести верный символ  l.  Заметим,
что  в  хорошей  системе  всегда есть возможность установить
символ отмены на ваш вкус.

   Приняв команду отмены последнего символа, система  должна
сообщить  об этом. Самый хороший способ - стереть отменяемый
символ, но не все терминалы имеют такую  аппаратную  возмож-
ность.  По этой причине в драйвере терминала (мы уже догово-
рились - это программа  принятия  символов)  можно  включить
режим  scope - стирать отмененный символ, или выключить его.
Если режим scope выключен, то отменяемые символы будут  пов-
торяться на экране в скобках вроде:

        bin> maik[k]l

   Понятно, что в одном случае теряется нагляднось, а в дру-
гом  требуются  аппаратные  возможности терминала. Поскольку
стирание символа осуществляется посылкой на экран  терминала


6


специальной  команды  (это делает драйвер в ответ на нажатие
клавиши отмены символа), то при отсутствии  аппаратной  спо-
собности  терминала к стиранию символа вы в лучшем случае не
увидите ничего, а в худшем произойдет выдача непонятных сим-
волов и т.д.

   Итак, у нас появилась вторая группа клавиш - для управле-
ния работой драйвера. Сюда относятся рассмотренные выше кла-
виши "отменить символ" (устанавливается на ваш  вкус,  стан-
дартно  #),  "отменить  команду" (так же на вкус, стандартно
@), "ввод команды" (почти всегда ВК или RETURN) а также кла-
виша  "послать  процессу  сигнал  завершения" (обычно ЗБ или
DEL). Команда завершения процесса позволяет  прекратить  вы-
полнение  запущенной программы если такая необходимость воз-
никает (например, вы начали печатать об'ектный модуль).

   При общении с ДЕМОС используется широкий класс  символов.
Это буквы:

     ABCDEFGHIJKLMNOPQRSTUVWXYZ
     abcdefghijklmnopqrstuvwxyz
     юабцдефгхийклмнопярстужвьызшэщч
     ЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧ

цифры:

     0 1 2 3 4 5 6 7 8 9

и специальные знаки:

     !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~

   Это наша условная группа 3. При  наборе  нужного  символа
этой группы надо нажать клавишу с соответствующей мнемоникой
не забывая про то, что переключение больших и малых, а также
русскихи латинских букв производится специальными клавишами,
которые в  зависимости  от  типа  терминала  называются  РУС
(русский), ЛАТ (латинский), ВР (верхний регистр), НР (нижний
регистр) или что-то в этом роде. Иногда  требуется  одновре-
менное  нажатие,  то есть просто клавиша с мнемоникой s дает
символ s, а если во время нажатия другой рукой держать  кла-
вишу ВР, то получится S и, пока вы не отпустите ВР все наби-
раемые символы будут из верхнего регистра. В других  моделях
терминалов  достаточно одноразового нажатия клавиши ВР и да-
лее регистр запоминается. В этом случае для его отмены  надо
нажать  клавишу НР. Правила набора цифр и специальных симво-
лов аналогичны - нажать нужную клавишу предустановки и  кла-
вишу  с нужной мнемоникой (либо одновременно, либо по очере-
ди).

   Очень неприятным в данном аспекте является наличие терми-
налов,  имеющих только большие буквы (и, как правило, меньше
специальных символов). В этом случае вместо строки

        текст AB | \  ~

на экране отобразится

        ТЕКСТ \A\B \! \\  \^

что существенно усложняет работу.


                                                           7


   Есть еще четвертая группа клавиш - назовем ее непечатной.
При их именовании используется термин CONTROL. Для получения
такого символа, например control-a, надо нажать клавишу   СУ
(она может называться CTRL) и, не отпуская ее, нажать клави-
шу a. Обычно control-символы не отображаются на терминале, а
вызывают  какое-либо действие. Для удобства работы некоторые
из них вынесены на отдельные клавиши - ВК,  ТАБ,  ПС,  ГТ  и
всякие  стрелочки. В дальнейшем описании мы будем обозначать
нажатие control-символа как ^a, ^d и т.д.


   1.2. Выполнение команд


   После  входа  в  систему  на  экран  терминала   выдается
подсказка программы интерпретатора о готовности к приему ко-
манды. Если вы нажмете клавишу ВК, то увидите новую подсказ-
ку. Все правильно - выполнилась пустая команда.

   Теперь рассмотрим, как  разбирается  простейшая  непустая
строка,  то  есть  состоящая из слов и разделителей - обычно
пробелов. Пусть она имеет вид

        user> ls -al filea fileb

Здесь присутствует четыре слова, которые для  интерпретатора
означают:  найти и запустить программу, хранящуюся в системе
под именем ls и передать ей остальные 3 слова как аргументы.
Работа  программы со своими аргументами зависит, конечно, от
самой программы. Команда ls, например, печатает информацию о
файлах,  имена  которых  присутствуют  в командной строке (в
нашем примере filea и fileb), а первое слово, если оно начи-
нается  со  знака  минус, рассматривает как указание о форме
выдачи информации. Наиболее типичными ошибками являются  не-
верное  имя  команды и неправильное задание аргументов. Пос-
кольку почти наверное нет команды oooooo и нет такого файла,
попробуйте набрать

        bin> oooooo
и
        bin> ls oooooo

В первом случае вы увидите сообщение об отсутствии  команды,
а  во втором программа ls сообщит об отсутствии файла. Узна-
ете, заодно, форму диагностики на эти случаи.

   Заметим, что существует ряд символов со специальным  зна-
чением для интерпретатора - метасимволов. Обычно это

        & * \ " ' < > | ` $

Подробно ознакомиться с ними можно в описании  используемого
вами интерпретатора команд.

   В общем случае при запуске команды задается  что  (именем
команды)  и  над  чем  (списком ее аргументов) надо сделать,
например

        user> ls file1 file2

получить каталог (ls) файлов (file1 file2).  Однако,  иногда


8


возникает  проблема выражения дополнительных желаний, напри-
мер, получить каталог в обратном порядке. В ДЕМОС существует
необязательное  соглашение  о  том,  что если первый (иногда
первые) аргумент команды начинается со знака минус,  то  это
не  об'ект  для работы, а дополнительные указания программе.
Эти аргументы с минусом  называются  ключами  и  исследуются
самой  программой. Например, команда ls знает ключ -l (среди
других) и при вызове

        user> ls -l file1 file2

выдает каталог двух файлов, но в другой форме.

   Наиболее распространены две  формы  указания  ключей  (то
есть каждая программа понимает либо тот либо другой способ):

        user> ls -lFR files....
        user> pr -t -m -f files....

   Теперь о самой типичной ошибке. Пусть вы запустили  прог-
рамму,  которая читает набранные символы и что-то с ними де-
лает, например, просто печатает. Запуская эту программу, ин-
терпретатор  уступает  ей свои права на вводимую с терминала
информацию, то есть теперь набрав

        ls -al

вы не увидите работы команды ls. Ваша строка попала не в ин-
терпретатор,  а  в  другую программу, которая и реагирует на
нее по-своему. Однако символы по-прежнему попадают  в  прог-
рамму  через  драйвер,  то есть его функции остаются в силе:
набранный текст передается  в  работающую  программу  только
после  нажатия  клавиши  ВК,  отмена символа делается им же,
клавиша ЗБ не только не передастся в программу, но, в  соот-
ветствии со своей функцией, пошлет программе сигнал заверше-
ния.

   Очень яркие впечатления в  этой  области  на  начинающего
производит  экранный редактор. Это самая обычная программа и
служит она для работы с текстами. Документ, который вы чита-
ете,  например, набирался и исправлялся при помощи экранного
редактора.

Для удобства работы редактор делает вам на терминале  как-бы
окно, в котором вы видите свой текст. Если вы теперь набере-
те

        ls -al

то эти символы попадут в ваш текст и, естественно,  никакого
списка  файлов  вы  не  получите. Более того, редактор имеет
свои соглашения об отмене символа,  о  реакции  на  control-
символы,  и  т.д.  Если  у вашего терминала есть специальная
клавиатура (например, расположенный справа второй набор кла-
виш с цифрами), то редактор при своей работе может восприни-
мать второй набор цифр как указания на специальные действия:
сдвинуть окно, сменить файл и т.д.

   Поэтому предостерегаем вас: учитывайте особенности  запу-
щенной  вами программы, особенно если она, как редактор, пе-
реключает режимы работы драйвера терминала.


                                                           9


   Следует иметь ввиду,  что  такие  программы,  как  login,
passwd, boot и некоторые другие имеют свои особенности рабо-
ты с терминалом и, когда  вы,  работая  с  ними,  совершаете
какую-то ощибку при вводе, то проще всего набрать ВК, из лю-
бопытства посмотреть на полученную диагностику  и  повторить
ввод.

   Разберем еще некоторые особенности понятия "конец ввода".
В  тех  случаях, когда вводимая вами информация представляет
одну строку, естественным  признаком  конца  ввода  является
клавиша  ВК  или RETURN - переход на новую строку. Поскольку
она отображается действием (переходом), а не каким-то симво-
лом,  в приводимых примерах ее присутствие только подразуме-
вается, но не отображается, то есть в примере команды

        su> ls *

имеется ввиду

        su> ls *ВК

или, как иногда обозначают

        su> ls * <ВК>

где ВК и <ВК> есть обозначение одного нажатия одной клавиши.

Аналогично ответ некоторой программе  (например,  спросившей
"Будем резать ?" и ждущей ответа) будет иметь вид:

        Будем резать ? y <ВК>

то есть подразумевается нажатие клавиши y (yes - да) и  кла-
виши ВК.

   В том случае, когда вводимая  информация  содержит  более
одной строки ВК не является завершением ввода, а использует-
ся для перехода на новую  строку  внутри  вводимого  текста.
Символом завершения ввода в этом случае становится ввод ^d в
первой позиции строки (называется конец файла - EOF). Коман-
да  mail (послать письмо), например, после запуска будет за-
поминать как письмо весь вводимый далее текст до EOF:

        su> mail asa
        это текст
        и это текст
        и это текст
        ^d
        su>

Здесь вводимый текст до ^d принимала  команда  mail,  а  при
вводе ^d она отправила этот текст письмом и вернула управле-
ние интерпретатору команд.

   Внекоторых случаях можно подобрать специальную комбинацию
символов,  которую  программа будет воспринимать как признак
завершения ввода (это будет персональным свойством  програм-
мы).  Например, в языке basic нет оператора "q", поэтому при
его создании было принято решение  об  использовании  q  как




10


признака конца сеанса работы с языком:

        su> bas
        a=551.3
        a
        551.3
        q
        su>

   Поскольку интерпретатор  команд  является  самой  обычной
программой,  то ввод ^d в первой позиции он воспринимает как
конец сеанса работы (так обычно происходит выход из системы:

        su> ^d
        login:

   Напоследок заметим, что при работе на ЭВМ всегда  необхо-
димо учитывать время ответа системы - типично оно колеблется
от мгновенной выдачи результатов до нескольких минут при вы-
даче полного каталога файловой системы.


   1.3. Файловая система


   Для  хранения  информации  ДЕМОС   использует   различные
устройства - диски, ленты и т.д. Файловая система требует от
вас только правильно указать некоторое имя, под которым хра-
нится ваша информация, а поиск ее на запоминающем устройстве
ведет сама. Это имя мы и  будем  называть  файлом,  то  есть
вместо  фразы  "откроем файл по имени mytext" мы будем гово-
рить "откроем mytext".

В ДЕМОС существуют три типа файлов:

   - специальные;

   - каталоги;

   - обычные файлы (текстовые, содержащие набор  инструкций,
     данные  и  т.д.).  Их  мы будем называть просто файлами
     (без слова просто).

Специальные файлы есть входы в устройства. Например,  терми-
нал  имеет  имя  /dev/tty  и,  если  копировать информацию в
данный файл, то она будет  печататься  на  терминале.  Имена
специальных  файлов отражают тип устройства, его номер среди
аналогичных и способ работы. Например

/dev/mt0
     накопитель на магнитной ленте, устройство 0;

/dev/rmt0
     накопитель на магнитной ленте, устройство 0, обмен  без
     буферизации;

/dev/nrmt2
     накопитель на магнитной ленте, устройство 2, обмен  без
     буферизации, по завершении обмена ленту не перематывать
     в начало.



                                                          11


   С точки зрения чтения и  записи  работа  со  специальными
файлами  ведется по общим правилам, а создание и копирование
самих специальных файлов  имеет  некоторые  особенности.  Не
следует  путать, например, специальный файл /dev/rrk5, кото-
рый обычно находится на нулевом диске, но дает доступ к  ин-
формации  на диске 5, и собственно диск 5. Копирование диска
5 это одно, правила общие, а копирование специального  файла
- это другое.

   Сами файлы (простые, специальные и каталоги)  хранятся  в
каталогах.  Мы  уже  договорились,  что для нас важно умение
правильно задавать имена файлов.

   Самый главный каталог ДЕМОС называется root и обозначает-
ся  символом "/". В любом каталоге могут находиться каталоги
и файлы. Для получения информации о каталогах и  файлах  ис-
пользуется  команда  ls.  Давайте посмотрим типичный главный
каталог (для простоты некоторые колонки из'яты):

user>ls -al /
drwxrwxrwx root 2832 Jul 24 13:51 .
drwxrwxrwx root 2832 Jul 24 13:51 ..
-rw-r--r-- root    2 Mar 30 00:31 .msgsrc
-rw-r--r-- root 1312 Jul 22 22:33 .profile
drwxr-xr-x bin  2496 Jul  7 19:38 bin
-rwxr-xr-x bin  9318 Jun  6 20:05 boot
-rwxr-xr-x root 8216 Jul 16 19:33 demos
drw-rw-rw- root 1104 Jul 22 18:26 dev
drwxrwxr-x root 1056 Jul 25 08:05 etc
drwxr-xr-x root   48 Jul 22 14:31 guest
drwxrwxr-x bin   368 Jun 17 21:26 lib
drwxr-xr-x root  304 Jun 27 16:55 mdec
drwxrwxr-x root  640 Jul 19 14:57 mnt
drwxrwxr-x root  128 Aug 26  1984 sys
drwxrwxrwt root 1376 Jul 25 17:06 tmp
drwxrwxr-x asa   496 Jul 16 18:10 usr

Как понимать эту информацию? Каждая строка  здесь  описывает
один файл в следующем порядке:

drwxrwxrwx
   - первая буква d говорит, что данный файл - каталог  (бы-
     вает еще "-" - простой файл, "c" или "b" - специальный-
     ). Далее следуют три комплекта кодов защиты файла (rwx)
     говорящие  о  возможности чтения (r),  записи (w) и вы-
     полнения (x) владельцу файла (первый комплект), пользо-
     вателем  одной  с  ним  группы (второй комплект) и всем
     прочим (третий комплект). Знак минус  в  этих  позициях
     говорит о запрете.

root
   - владелец файла.

2832
   - размер в байтах

Jul 24 13:51
   - дата создания





12


.  - имя файла. Заметим, что имена начинающиеся с точки  об-
     ладают особыми свойствами, а "." и ".." - особые файлы.

Для примера разберем файлы:

dev
   - каталог, всем разрешены запись и чтение, никому  выпол-
     нение;

boot
   - не каталог, всем разрешены чтение  и  выполнение,  вла-
     дельцу (по имени bin) - запись.

   Таким образом, если файл boot находится в корневом  ката-
логе,  то  его  полное  имя есть /boot. Однако, если бы boot
хранился в каталоге etc, который, в свою очередь хранится  в
каталоге  /, то его полное имя было бы /etc/boot. Теперь уже
можно интуитивно предсказать, что если в каталоге / есть ка-
талог  usr,  в котором есть каталог games, а в нем есть файл
snake, то полным именем файла snake будет

        /usr/games/snake

а если надо получить список файлов в каталоге games, то  ко-
манда примет вид

        bin> ls /usr/games

(мы не задавали ключи -al, так как список нужен  в  короткой
форме. Это свойство не файловой системы, а программы ls).

   Обратиm внимание на  важный  факт  -  имена  каталогов  и
файлов  создаются по одному правилу. Но действия над ними не
всегда совпадают. Mожно получить как информацию о  файлах  в
каталоге (ls /usr), так и информацию о файле (ls /boot), од-
нако каталог нельзя, например, выполнить, а в  простой  файл
нельзя записать другой файл.

   При дальнейшем изучении системы будет предполагатся  вза-
имосвязь  каталогов, показанная на рис.1 (маленький фрагмент
реальной файловой системы):

Обсудим немного эту  файловую  систему  (заодно  доопределим
картинку):

   - в корневом каталоге есть каталоги usr, bin, dev и  mnt,
     а также файл boot (загрузчик системы);

   - в usr есть  каталоги  bin  (с  командами  -  изображена
     только одна) и games (с играми - выполняемые файлы wump
     и super);

   - в каталоге bin есть два выполняемых файла ls и cat;

   - в каталоге dev есть два специальных файла lp и rk3;

   - в каталоге mnt есть 4 пустых каталога.

К сожалению, команда ls не умеет рисовать картинок, а выдает




                                                          13


    _________root_________________
    |     |      |       |       |
   usr   boot   bin     dev     mnt
  |   |        |   |   |   |    |
bin   games   ls  cat  lp  rk3  |
 |    |   |      ---------------+----
pif wump super   |      |     |     |
              paremsky man    su   tmp

        Рис.1.



информацию примерно в таком виде:

bin> ls -alR
drwxr-xr-x bin     496 Jul  7 19:38 bin
-rwxr-xr-x bin     318 Jun  6 20:05 boot
dr-xr-xr-x root    104 Jun  7 18:55 dev
drwxr-xr-x root    640 Aug  8 07:19 mnt
drwxr-xr-x root    640 Aug  8 07:19 usr
/bin:
-rwxr-xr-x bin     844 May  2  1980 cat
-rwxr-xr-x bin     616 Oct 30  1980 ls
/dev:
c-w--w--w- root    5,0 Aug 11 17:21 lp
brw-rw-r-- root    4,3 Aug  7 22:57 rk3
/mnt:
drwxrwxrwx root     32 Apr 13 12:49 man
drwxrwxr-x paremsky112 Aug 10 15:37 paremsky
drwxrwxrwx su      352 Aug 11 10:25 su
drwxrwxr-x root    832 Aug 11 17:33 tmp
/usr:
dr-xr-xr-x root    840 Aug 10 19:44 bin
dr-xr-xr-x games   272 Jul 20 22:41 games
/usr/bin:
-r-xr-xr-x bin     916 Apr  3 23:06 pif
/usr/games:
-r-xr-xr-x alex    302 Jun 25 01:54 wump
-rwxr-xr-x root 989726 Jun 25 01:54 super

В дополнение к предыдущему разбору такой  картинки  заметим,
что:

   - ключ -R при вызове программы ls указал ей на  необходи-
     мость  выдать  информацию  о файлах рекурсивно, то есть
     обнаружив каталог ls печатает его содержимое;

   - первым символом в описании файла может быть "-" - прос-
     той  файл, d - каталог, c - утройство небуферизованного
     обмена, b - утройство символьного (буферизованного) об-
     мена.











14


   1.4. Сокращенные имена файлов


   Есть случаи, когда не требуется задавать полное имя файла
вроде /usr/games/snake.

   Прежде всего, в ДЕМОС есть понятие "текущий каталог"  от-
ражающее  тот факт, что при своей работе пользователь всегда
"находится" в некотором каталоге (который можно изменять). В
том  случае,  когда в полном имени файла встречается текущий
каталог, всегда можно указывать только ту часть имени, кото-
рая  находится после него. Кроме того, текущий каталог имеет
имя ".", а сам он находится в каталоге "..", где имена  .  и
..  есть  введенные  для простоты записи синонимы. Например,
находясь в каталоге games можно назвать файлы как:

        wump
        super
        ../bin/pif
        ../../boot

Последние два сокращения не дают особого эффекта  вблизи  от
корневого каталога, но в противном случае имя заметно сокра-
щается и, кроме того, возникает  ряд  удобств  относительной
адресации.

   Текущий каталог можно изменить командой cd  и  посмотреть
командой pwd. Для нашей файловой системы (см. рисунок ранее)
можно привести такие примеры (первоначально текущим  катало-
гом для нас пусть будет "/" ):

        # pwd
        /
        # cd bin
        # pwd
        /bin
        # cd /mnt/su ; pwd
        /mnt/su
        # cd ../man
        #

читать этот протокол реальной работы надо так:

   - смотрим, какой каталог для нас текущий;

   - команда pwd сообщает - это корневой каталог "/";

   - устанавливаем текущим каталогом каталог /bin (используя
     сокращенное имя файла bin вместо /bin);

   - командой pwd снова смотрим текущий каталог. Команде  не
     лень и она пишет полное имя;

   - устанавливаем текущим каталогом  /mnt/su  (сокращенного
     имени  тут  не  выйдет)  и  снова выполняем команду pwd
     (разделенные ";" команды выполняются по очереди);

   - переходим в каталог /mnt/man.

   Другая возможность укорачивать имена  файлов  применяется
при  выполнении  команд.  В  ДЕМОС  большинство  команд есть


                                                          15


запуск на выполнение файла с таким именем. В  ответ  на  имя
команды программа интерпретатор при поиске обычно просматри-
вает несколько каталогов (стандартно текущий, то есть ".", а
так  же  /bin  и  /usr/bin). Поэтому для запуска любой стан-
дартной программы бывает достаточно набрать ее имя вроде ls,
а не /bin/ls.


   1.5. Подключение дисков


   В ДЕМОС существует одна особенная файловая система, иден-
тифицированная  в  ядре  ДЕМОС  как  корневая.  Она содержит
исключительно самое необходимое для функционирования  ДЕМОС;
если  вы  запустили ДЕМОС и работаете в однопользовательском
режиме, то используется только  корневая  файловая  система.
Остальные  располагаются на других дисководах и ДЕМОС до оп-
ределенного момента о них не "знает". Чтобы ДЕМОС "узнала" о
существовании некорневой файловой системы, необходимо "смон-
тировать" файловую систему на некоторый каталог, после  чего
все  файлы  смонтированной  файловой системы станут доступны
как находящиеся в данном каталоге.

   Предположим, например, что вы хотите смонтировать  файло-
вую  систему  на  диске /dev/rk3. Во-первых, вы должны иметь
место, где монтировать ее; это место  -  каталог.  Обычно  в
ДЕМОС пользователи, работающие с отдельным диском, имеют для
этого персональный каталог в каталоге /mnt.  Пусть  для  нас
это будет /mnt/su. Тогда, для монтирования нашего диска надо
ввести команду:

        # /etc/mount /dev/rk3 /mnt/su

С этого момента и до момента, когда /dev/rk3 будет размонти-
рован  или  система будет разгружена, первоначальный каталог
/mnt/su и находящиеся в нем файлы  становятся  недоступными.
Любая  ссылка  на каталог /mnt/su рассматривается теперь как
ссылка на каталог самого верхнего уровня  файловой  системы,
расположенной  на диске /dev/rk3, то есть наша файловая сис-
тема примет вид, соответствующий рис.2.

   Если бы вы смонтировали /dev/rk3 на каталоге /mnt/tmp, то
каталог  doc  в смонтированной файловой системе назывался бы
не /mnt/su/doc, а /mnt/tmp/doc. Отсюда, видимые размеры фай-
ловой  системы  ДЕМОС  в представлении рядового пользователя
намного превосходят пределы, определенные для индивидуально-
го  диска. Заметьте, что антонимом mount (монтировать) явля-
ется umount (размонтировать); например:

        # /etc/umount /dev/rk3

   Заметим, что mount и umount, как и многие  программы  для
специальных действий оператора, находятся в каталоге /etc, а
не /bin. Заметим также, что большая группа команд хранится в
каталоге  /usr/bin, который может не входить в корневую фай-
ловую систему и до его подключения эти команды будут для вас
недоступны.

   Обратим внимание на упомянутые ранее имена  "."  и  "..".
Как  мы  увидели, при монтировании дисков имена файлов могут
меняться. Именно в таких случаях дает  эффект  относительная


16


    _________root_________________
    |     |      |       |       |
   usr   boot   bin     dev     mnt
  |   |        |   |   |   |    |
bin   games   ls  cat  lp  rk3  |
 |    |   |       --------------+---
pif wump super   |      |     |     |
              paremsky man    su   tmp
                              |
                    ----------+------
                    |       |       |
          _________cmd     doc     tmp
          |         |       |
          mx   automou.c  OPER_GUIDE
                          |   |    |
                         ps files boot

        Рис.2.



адресация,  то  есть  использование  в  каталоге  doc  имени
../cmd/mx  иногда  удобней  /mnt/su/cmd/mx  не  только из-за
краткости, но и в силу независимости от расположения катало-
га su внутри файловой системы.


   1.6. Переопределение ввода и вывода


   В базовом наборе примитивов ДЕМОС есть  такие  как  open,
close,  read  и  write,  с  помощью  которых программы могут
открывать файлы и обмениваться с  ними  информацией.  Однако
любая  программа  при  запуске уже имеет три открытых канала
называемых:

stdin
   - стандартный файл ввода (по умолчанию клавиатура  терми-
     нала);

stdout
   - стандартный файл вывода (по умолчанию экран терминала);

stderr
   - стандартный файл вывода ошибок (по умолчанию экран тер-
     минала).

Для изучения работы с  этими  файлами  рассмотрим  программу
cat.

   Программа cat читает  файлы,  указанные  ей  в  командной
строке  и  копирует  их содержимое в стандартный вывод. Если
файлов не заданно, то  читается  стандартный  ввод.  О  всех
ошибках  cat  сообщает  в стандартный канал ошибок. Заметим,
кстати, что на этом принципе основываются очень  многие  ко-
манды ДЕМОС. Например, команда форматирования документов де-
лает все как программа cat, но еще и преобразует по  некото-
рым правилам входную информацию. Итак, для получения на тер-
минале содержимого файлов text и next надо выполнить команду

        user> cat text next


                                                          17


Все дополнительные возможности этой команды кроются в умении
интерпретатора  команд  переопределять  стандартные каналы с
помощью метасимволов:

<  - вместо клавиатуры терминала читать из файла;

>  - вместо экрана терминала выводить в файл;

>>
   - вместо экрана терминала выводить в  файл,  причем  если
     файл  уже есть, то дописывать информацию к уже имеющей-
     ся;

|  - вместо экрана  терминала  передать  вывод  в  следующую
     программу.

Рассмотрим примеры.

cat text next | pif > /dev/lp

   - программа cat поймет свои аргументы (text и  next)  как
     имена  файлов,  откроет  их  и будет копировать в стан-
     дартный вывод, но вместо терминала результат будет  пе-
     редан программе pif, которая, не зная ничего о предыду-
     щем пути информации, будет читать свой stdin и,  как  и
     cat,  выдавать  результат (сформатированный документ) в
     стандартнай вывод, который вместо терминала попадет  на
     АЦПУ;

cat text
cat text | cat | cat
cat < text | cat

   - дадут одинаковый результат - выведут ваш файл  text  на
     терминал;

cat < file1 > nextfile

   - команда cat копирует stdin в stdout и ничего не знает о
     файлах  file1  и  nextfile,  однако вместо терминала ее
     стандартным вводом будет file1, а стандартным выводом -
     nextfile.

Возможно, что из данных примеров трудно понять  преимущества
переопределения ввода/вывода, однако при дальнейшем изучении
ДЕМОС вы увидите всю красоту этого механизма.


   1.7. Метасимвол *


   В практике очень часто возникает ситуация работы с  груп-
пой  файлов,  например, напечатать все файлы в имени которых
есть символ "%".  Для  этих  целей  в  интерпретатор  команд
встроено особое правило работы с символом "*", который трак-
туется как "любая строка, включая пустую". Приведем примеры:

*  - все файлы текущего каталога;





18


a*
   - все файлы текущего каталога с первым символом a  (abba,
     apple, ampex);

u*r
   - все файлы текущего каталога с первым символом u и  пос-
     ледним r (user, ustar, ur);

/etc/*-*
   - все файлы каталога /etc с символом - (/etc/-,  /etc/--,
     /etc/A-, /etc/-super, /etc/su-per).


   1.8. Строки интерпретатора


   Большинство интерпретаторов команд ДЕМОС умеют запоминать
строки по команде

        bin> ABC="ls -al *"

которые затем доступны вам  как  ${ABC},  причем  {}  обычно
можно  опускать.  Определенную  нами строку можно теперь ис-
пользовать в виде команды

        bin> $ABC

для получения списка файлов (его дает команда ls) или просто
посмотреть ее командой

        bin> echo $ABC

где в момент вызова программы  echo  интерпретатор  подменит
строку на

        ls -al *

а команда echo напечатает ее на терминале (она все свои  ар-
гументы всегда печатает).

Простейший пример использования строк  интерпретатора  имеет
вид:

        bin> g="/usr/games"
        bin> $g/snake

   Механизм определения строк играет в  ДЕМОС  важную  роль.
Если  вы командой set посмотрите список определенных для вас
строк (часть которых определили вы, а часть вам была предус-
тановленна), то вы увидите типично следующую картинку:

HOME=ваш_регистрационный_каталог
MAIL=имя_почтового_ящика
PS1=$
PS2=>
SHELL=имя_интерпретатора_команд
TAPE=ваш_любимый_магнитофон
TERM=имя_терминала
TERMCAP=параметры_терминала

что означает примерно следующее:


                                                          19


HOME
   - имя каталога, известного системе как ваш  регистрацион-
     ный,  то  есть  того, в который вы "попадаете", входя в
     систему. Пусть для пользователя по  имени  su  в  нашей
     системе  регистрационный  каталог определен как /mnt/su
     (см. рис. выше). Тогда для него строка будет иметь вид:

     HOME=/mnt/su

     чем можно пользоваться, например, для обращения из  ка-
     талога  /usr/bin к файлу $HOME/cmd/mx. Заметим, что ко-
     манда cd без аргумента выполняется как

     cd $HOME

     В момент входа в систему эта  строка  будет  определена
     вам  системой, но ее можно переопределять (когда вы мо-
     жете об'яснить зачем).

MAIL
   - имя файла для почты. Определяется вами и когда  опреде-
     лено   вызывает  регулярный  просмотр  соответствующего
     файла интерпретатором команд.

PS1
   - стандартная подсказка интерпретатора к готовности  при-
     нять команду. По умолчанию $, но можно установить

     PS1=' ну нажми еще кнопку : '

     или вроде того.

   Необходимо  учитывать  существование  у   строк   статуса
export,  сообщающего  интерпретатору  команд о необходимости
передавать содержимое  этой  строки  порождаемому  процессу.
Список  строк  с  установленным  статусом  выдается командой
export, а установить статус строке string можно командой:

        su> export string


   1.9. Привелегированные пользователи


   В системе существует  по  крайней  мере  два  специальных
пользователя.  Один из них, супер-пользователь, имет текущее
имя "root" и в дальнейшем мы будем называть просто root  (не
путать  с  корневым  каталогом "root file system"). Он может
делать все, что в принципе можно делать с системой и  файло-
выми структурами. Второй (менее привелегированный) пользова-
тель имеет регистрационное имя "bin" и вообще-то не обладает
никакими  привелегиями, но является владельцем многих важных
системных файлов, в результате чего может изменять и уничто-
жать  эти  файлы,  что  никто еще, кроме супер-пользователя,
делать не может.

   Супер-пользователь действительно обладает большими права-
ми. Никакая защита файла не эффективна против него, он может
читать и писать в любые файлы и каталоги.  Однако,  совершая
ошибку,  он  может  запросто  разрушить всю файловую систему
так, что она перестанет функционировать. В этом случае оста-


20


ется  только восстановить предыдущую версию файловой системы
с ленты.

Есть два способа получения прав супер-пользователя:

   - зарегистрироваться в системе под именем "root";

   - выполнить команду su (которая не имеет ничего общего  с
     пользователем su в приводимых примерах).

   Отказаться от прав супер-пользователя можно, послав  сис-
теме  символ  ^d.  При этом вы либо выйдете из системы, либо
вновь станете обычным пользователем (если вы вошли в  приве-
легированный  режим  с  помощью  команды  su). Возможностями
супер-пользователя вы будете обладать  и  в  период,  непос-
редственно  следующий  после  первоначальной  загрузки (пока
система еще функционирует в однопользовательском режиме).

Пример:

login: root
password:<вводится пароль без эхо-печати>
НЕКОТОРЫЕ СООБЩЕНИЯ ПРОЦЕДУРЫ ВХОДА
#

Заметим, что при таком способе вы попадаете в  регистрацион-
ный каталог супер-пользователя /etc.

Чтобы ввести команду "su", надо уже  находиться  в  системе.
Тогда:

user> su
password:<вводится пароль без отражения>
#

При этом вы останетесь в текущем каталогоге.

   Выходить из режима  супер-пользователя  следует  командой
^d,  что  или вернет вас или в команду login или в состояние
предыдущего пользователя.


   1.10. Процессы


   При запуске ДЕМОС программа boot запускает первый процесс
-  саму  операционную  систему.  Этот корневой процесс имеет
номер 1 (каждый новый процесс получит номер на 1 больше пос-
леднего) и запускает другие процессы, по отношению к которым
он будет процесс-отец, а они будут  процессы-сыновья.  Любой
сын  может  породить  свои процессы-сыновья и т.д. Проследим
типичную картину.

   Корневой процесс для каждого терминала запускает програм-
муgetty, которая пишет слово login и ждет ввода с терминала.
После набора  пользователем  своего  регистрационного  имени
getty  запустит  программу login, которая проверит имя и за-
пустит для терминала интерпретатор команд. Теперь все выпол-
няемые  команды будут порождаться этим интерпретатором и яв-
ляться его детьми.



                                                          21


Для получения информации о процессах существует команда  ps,
имеющая  ключи: c - короткая форма выдачи, l - полная инфор-
мация о процессе, u - форма  выдачи  с  именем  пользователя
вместо  номера,  a - дать список не только ваших процессов и
x - включит в список процессы запущенные  не  с  терминалов.
Пусть при выполнении команды ps мы получили следующее:

        su> ps
        pid tt stat   time command
         78 j6 s      0:28 sh
        119 j6 r      0:07 ps
        su>

Читается это так: интерпретатор sh, обслуживающий наш терми-
нал  /dev/ttyj6,  имеет  в  системе номер 78, наработал 28 с
времени и сейчас бездействует (stat=s - sleep). Другой  про-
цесс  имеет  имя  ps, номер 119 и в настоящее время работает
(stat=r). Заметим, что запущенные другими пользователями ко-
манды  ps будут иметь для системы тоже имя ps, но другие но-
мера, так как номера для всех процессов индивидуальны.

Для примера рассмотрим результат работы команды ps с ключами
alx  которую выполним из редактора в момент набора документа
(из-за маленькой ширины листа нашего документа некоторые ко-
лонки выдачи придется убрать)

uid pid ppid stat tt time command
  0   0    0 d    ?  7:39 Demos / KIAE
  0   1    0 s    ?  0:02 /etc/init
  1  68    1 s    ?  0:05 /etc/update
  1  72    1 s    ?  0:04 /etc/cron
  0  73    1 sw   co 0:01 - 0   (getty)
  0  74    1 sw   1  0:01 - 0   (getty)
  0  77    1 sw   j3 0:02 - 0   (getty)
101  78    1 s    j6 0:29 -sh (sh)
101 126   78 s    j6 0:07 re about_ps
101 100   78 r    j6 0:32 mx OPER_GUIDE
101 127   78 r    j6 0:12 ps alx
101 155  100 r    j6 0:12 pif about_files

Отсюда видно, что в системе работает один пользователь с но-
мером  101.  Eсли  бы  вместо ключа a был задан ключ u, то в
этом поле вместо номера стояло бы его имя  в  системе  -  их
взаимосвязь однозначно определена в файле /etc/passwd. Поль-
зователь работает с терминала j6 и имеет четыре процесса:

   - интерпретатор sh (сын процесса номер 1 - колонка ppid);

   - редактор re, с помощью которого набирается данная глава
     (about_ps - имя файла);

   - идет форматирование уже набранной части документа  (ко-
     манда mx);

   - процесс mx при своей работе породил процесс pif,  кото-
     рый  имеет сам номер 155, а в колонке прцесс-родитель у
     него стоит номер процесса mx - 100.

Мx, ps и pif работают (stat=r), re и sh бездействуют (с кла-
виатуры ничего не вводится).



22


Кроме них в системе присутствуют три процесса getty, которые
ждут  ввода  с терминалов co (консоль), 1 - /dev/tty1 и j3 -
/dev/ttyj3. Так как ввода с терминалов нет, то система  выг-
рузила их из оперативной памяти (stat=sw - swaping) в ожида-
нии ввода. Они имеют номера 73, 74 и 77 и запущенны корневым
процессом  номер  1. Так как корневой процесс не принадлежит
никакому пользователю, то и сами getty не принадлежат никому
(uid=0).

   При загрузке системы от имени супер-пользователя запуска-
ется  командный  файл /etc/rc, который среди других действий
запускает процессы /etc/update и /etc/cron. Как видите,  ко-
манда  ps  сообщила,  что владельцем этих процессов является
супер-пользователь (он имеет uid=1).

Корневой процесс /etc/init имеет номер 1 и не имеет отца.

   Типичным примером работы с командой ps является уничтоже-
ние процесса. Например, в нашем случае процесс номер 100 был
запущен как фоновый и, естественно, клавишей ЗБ  не  уничто-
жится, так как она посылает сигнал завершения тому процессу,
который сейчас обслуживает ваш терминал (для нас это  сейчас
редактор,  а  по выходе из него обслуживание терминала вновь
вернется к интерпретатору и тогда сигнал от клавиши ЗБ попа-
дет  ему).  Для  таких  случаев  существует  команда  kill -
послать сигнал процессу. Поэтому, если при  работающем  про-
цессе  мы  решим  его уничтожить (вдруг исчерпалось дисковое
пространство), то определив его номер в системе командой ps,
надо затем выполнить команду

        kill 100

чем и прекратить его работу (команда kill по умолчанию посы-
лает сигнал с кодом 15 - завершение).

   Kоманда kill может посылать процессу  и  другие  сигналы.
Интерпретаторкоманд, например, защищен от сигнала завершение
(ведь нажимаете вы клавишу ЗБ при работе с ним), но от  сиг-
нала kill (код 9) защиты нет. Поэтому команда

        kill -9 78

вызовет прекращение работы интерпретатора и на терминале по-
явится приглашение login.


   1.11. Актуализация дисковой памяти


   Одним из свойств ДЕМОС является наличие в оперативной па-
мяти копии части дисковой памяти, с которой собственно и ве-
дется работа. Этот механизм существенно ускоряет работу (нет
необходимости  в  частых  обменах с дисками), но таит в себе
некоторую опасность. Если во время работы ЭВМ неожиданно ос-
тановить,  то  информация на дисках может не соответствовать
реальной, то есть часть ее может утеряться, а часть оказать-
ся в противоречии с остальной файловой системой.

   Программа update через каждые 30 сек. выполняет системный
вызов  sync который копирует текущее состояние файловой сис-
темы из оперативной памяти на диск. Это дает гарантию  того,


                                                          23


что в случае аварии системы файловая система на дисках будет
содержать свежую (не старше 30 с) информацию. Для выполнения
команды  update  не требуется указывать ее в явном виде: она
выполняется как составная часть командного файла,  использу-
емого интерпретатором в ходе инициализации системы.

   Если при выполнении программы update процессор был  оста-
новлен  в  момент  вызова  примитива  sync, файловая система
может быть разрушена. Это отчасти обусловлено  особенностями
аппаратуры,  которая  при сбое физического обмена записывает
на носитель нули. Эта особенность учитывается командой sync.

   Выполнение команды sync приводит  к  немедленному  сбросу
актуального состояния каталога файловой системы на диск. При
этом внутренний счетчик программы update увеличивается на 30
с  и,  в  течении  этого времени, сброса не будет. Например,
срочная остановка системы может быть произведена в следующем
порядке:

   - выполнить команду sync;

   - по индикаторам диска убедиться в окончании обменов (3-7
     секунд);

   - остановить процессор.


   1.12. Файлы команд


   В ДЕМОС можно создать файл (набрать  редактором  и  т.д.)
содержащий  набор  команд  для  программы  интерпретатора (в
данном документе неявно описывается стандартный  интерпрета-
тор  shell). Если проставить такому файлу статус выполняемый
(см. команду chmod), то набор его имени породит вызов  прог-
раммы  shell, которая начнет выполнять эти команды. Пусть мы
создали файл по имени УДАЛИ со следующим текстом:

        rm *.o

где rm - команда уничтожения файлов,  а  *.o  -  стандартный
шаблон  имен  об'ектных  модулей. Тогда выполнение его можно
проиллюстрировать примерным сеансом работы:

        su> ls
        a.o b.o c.o nn zzz
        su> УДАЛИ
        su> ls
        nn zzz
        su>

Читается  это  так:  мы  посмотрели  список,   видим   много
об'ектных  модулей, выполнили командный файл (теперь для нас
УДАЛИ стала новой командой как и прочие - ls ,cat, ...), за-
ново посмотрели список файлов - об'ектные уничтожены.

   Важными особенностями командных файлов ДЕМОС являются на-
личие  у  строк  интерпретатора статуса export и возможность
получения аргументов из командной строки.




24


   1.13. Регистрационный каталог - шаблоны входа


   Когда в систему включается новый пользователь,  некоторый
каталог  устанавливается ему как регистрационный. Теперь при
входе в систему он изначально попадает именно в этот каталог
и, кроме того, именно в этом каталоге будет искаться файл со
специальным именем (для shell - ".profile"). Поговорим о нем
подробнее.

   При входе в систему пользователю  определяется  некоторый
набор атрибутов: символ отмены последнего введенного символа
(стандартно #), символ готовности  интерпретатора  к  приему
команды  (для shell это $), и т.д. Однако для тех, кто пред-
почитает некоторый персональный  набор,  существует  возмож-
ность  создать  специальный файл - шаблон входа. Это обычный
командный файл с именем .profile и хранящийся  в  вашем  ре-
гистрационном каталоге. Типичный шаблон входа имеет вид:

PS1="> "  PS2="+>"
PATH=:${HOME}/cmd:/bin:/usr/bin:/etc
MAIL=/usr/spool/mail/su
export PATH MAIL
msgs -q

В этом шаблоне входа об'явленно следующее:  символом  готов-
ности  интерпретатора  к  приему  команды установить угловую
скобку, а символом продолжения команды будет +>.  Поиск  ко-
манды следует вести в следующем порядке: в текущем каталоге,
в каталоге cmd регистрационного каталога, затем в  каталогах
/bin,  /usr/bin и /etc. Перед выдачей подсказки об очередной
готовности к приему команды посмотреть новую почту  в  файле
/mnt/spool/mail/su.  Установить для строк PATH и MAIL статус
export. Проверить системную почту (команда msgs).





























                                                          25





                2. МИНИМАЛЬНЫЙ НАБОР КОМАНД


   В данном разделе мы рассмотрим минимальный  набор  команд
ДЕМОС  без  знания которого работа в системе практически не-
возможна. Описание команд дается не в исчерпывающем виде,  а
с точки зрения задач оператора.

Следует иметь ввиду опасность неполного (в пределах  данного
документа) представления о командах, что может создать одно-
бокое впечатление о возможностях ДЕМОС.


   2.1. Выдать аргументы


   Команда echo выдает в stdin свои  аргументы,  разделенные
пробелами  и заканчивающиеся символом новой строки. Если ис-
пользуется флаг "-n", то символ новой строки к выводу не до-
бавляется. Примеры:

echo hello my love
   - печатает строку hello my love на терминале;

echo * > /dev/lp
   - простейший способ получить список файлов (в данном при-
     мере  интерпретатор  команд  вместо  * передаст команде
     echo список всех файлов,  echo  их  напечатает,  а  ин-
     терпретатор переопределит вывод на АЦПУ вместо термина-
     ла).


   2.2. Печать или установка даты


   Эта команда имеет две формы вызова:

        date
и
        date [ггммддччмм [.сс]]

В первом случае печатается текущая дата и время, а во втором
устанавливается  заданная  дата.  "гг"  задает последние две
цифры года, "мм" - месяц, "дд" - день, "чч" -  час  (по  24-
часовой  системе), второе "мм" задает минуты; указание ".сс"
является необязательным и задает секунды. Например:

        date 11070045

устанавливает дату 7 ноября, 12 часов 45 минут. Год, месяц и
день могут быть опущены, по умолчанию текущие значения. Сис-
тема работает по среднегринвичскому времени. Date  выполняет
преобразования  "в"  и  "из" местного стандартного и летнего
времени.






26


   2.3. Установить параметры терминала


   Команда stty устанавливает режимы работы драйвера  терми-
нала.  При отсутствии параметров она сообщает текущее состо-
яние режима. Командой устанавливаются следующие режимы:

-crmod
     строки на экране заканчиваются только  символами  новой
     строки;

crmod
     допускается употребление символа возврата каретки  (ВК)
     вместо  символа  новой строки (ПС); вместо возврата ка-
     ретки или новой строки выводятся символы возврат карет-
     ки - перевод строки (ПС-ВК);

lcase
     преобразовывать символы  верхнего  регистра  в  символы
     нижнего регистра;

-lcase
     не выполнять преобразования регистра символов;

-tabs
     заменять при печати символы табуляции пробелами;

tabs сохранять символы табуляции;

cyrill
     терминал имеет русские символы;

-cyrill
     терминал не имеет русских символов;

icyrill
     режим работы клавиатуры (русский/латинский)  устанавли-
     вается  от  самой  клавиатуры  (Электроника 15 ИЭ 0013,
     клавиатура в "тестовом" режиме);

-icyrill
     режим работы клавиатуры (русский/латинский)  устанавли-
     вается  от  линии (Электроника 15 ИЭ 0013, клавиатура в
     "нормальном" режиме); Клавиатуру рекомендуется переклю-
     чать в "тестовый" режим.

dec  установить символы забоя, удаления и прерывания в стиле
     ОС RSX/RT-11: (ЗБ - отмена последнего символа, ^u - от-
     мена строки, ^c - прервать процесс).

unix установить символы забоя, удаления и прерывания в стиле
     ОС UNIX: ("#" - отмена последнего символа, "@" - отмена
     строки, ЗБ - прервать процесс).

erase c
     рассматривать символ c как символ  уничтожения.  Символ
     уничтожения  может  также иметь вид ^x (в данном случае
     это значит нажать символ ^, отпустить, нажать x).





                                                          27


kill c
     рассматривать символ c как символ забоя  строки.  Здесь
     также действительна форма  ^х (с предыдущей оговоркой);

nl cr ht vt n
     установить задержку соответствующего  движения  курсора
     на n тиков;

width n
     установить ширину страницы (длину строки) в n  символов
     для автоматического переноса строки;

lengh n
     устанавить длину страницы в n строк,  так  чтобы  вывод
     был  постраничным;  если  задано  length  0, деление на
     страницы прекращается; суть деления состоит в остановке
     выдачи после n строк и, при нажатии кнопки ПРОБЕЛ выда-
     ется новая страница, а при нажатии кнопки  ВК  выдается
     новая строка.

score
     стирание символов с экрана при забое (kill) и  удалении
     (erase);

-score
     отмена режима score;

indctl
     выдавать control-символы в  эхо-режиме,  как  ^<char  +
     0141>;

-indctl
     отмена режима indctl;

hup  прекращает передачу данных по телефонному каналу  связи
     при завершении сеанса;

-hup не прекращает передачу  данных  по  телефонному  каналу
     связи при завершении сеанса;

0    немедленно прекращает телефонную связь.

Примеры:

stty cr0 nl0
   - не задерживать выдачу на терминал (удобно на  медленных
     машинах);

stty cr2 nl2
   - не задерживать выдачу на терминал  (удобно  на  быстрых
     машинах);

stty erase ^[
   - установить кнопкой отмены последнего символа кнопку del
     char на терминале vt-52;

stty erase ^k
   - установить кнопкой отмены последнего символа кнопку ТАБ
     на терминале электроника-15.




28


   2.4. Блокировать терминал


   Команда lock запрашивает у пользователя пароль, затем пе-
чатает  на  терминале  "locked" ("заблокирован") и блокирует
этот терминал до тех пор, пока пароль не будет  указан  пов-
торно.  Если  пользователь забудет пароль, у него нет другой
возможности, кроме как зарегистрироваться  где-то  в  другом
месте и завершить блокирующий процесс.


   2.5. Печать на АЦПУ


   Команда lpr вызывает занесение указанных файлов в очередь
на  печать.  Если  файлы не указаны, считывается стандартный
ввод. Следующие ключи определяют режимы выполнения команды:

-m
   - после завершения печати файла  пользователю  посылается
     письмо;

-c
   - по умолчанию, файлы, которые требуется выдать на  АЦПУ,
     копируются  в  каталог /usr/spool/lpd - в этом режиме в
     /usr/spool/lpd появляется только ссылка на файл и копи-
     рования не происходит;

-r
   - после завершения печати указанные файлы удаляются;

-b
   - по умолчанию, перед каждым файлом печатается заголовок,
     который  содержит имя пользователя, запустившего данную
     команду и время выдачи. В этом режиме заголовок  допол-
     няется  словом,  определенным  в параметре "заголовок",
     которое печатается большими буквами в  середине  листа.
     Печатается не более 14 символов "заголовка".

   Команда lpq выдает соотояние  очереди  файлов,  ожидающих
вывода  на АЦПУ. Каждый элемент очереди выдается с указанием
имени данного файла, размера файла в символах,  владельца  и
идентификационного  номера. Идентификатор полезен для удале-
ния заданного входа из очереди с помощью команды lprm.

   Команда lprm удаляет файл из очереди к АЦПУ.  Идентифика-
тор,  имя-файла  или  владелец  конкретного файла из очереди
можно узнать с помощью команды lpq. Все файлы,  удовлетворя-
ющие  заданному условию, будут удалены. Выдается идентифика-
тор каждого удаленного из очереди файла.


   2.6. Стандартный редактор текстов


   Строчный редактор текстов ed имеет ряд очень мощных меха-
низмов  и, в сочетании с чтением команд из стандартного вво-
да, представляет исключительные возможности работы с текста-
ми.  Мы  рассмотрим маленькое подмножество команд редактора,
которым необходимо уметь пользоваться оператору.



                                                          29


Приведем протокол простого сеанса работы, на примере которо-
го  познакомимся  с  редактором  (строки  пронумерованны для
удобства комментирования):

  1   su> ed fff
  2   ?fff
  3   a
  4   набираю строку 1
  5   а теперь 2
  6   .
  7   w
  8   28
  9   q
 10   su> ed fff
 11   28
 12   1
 13   набираю строку 1
 14   2
 15   а теперь 2
 16   3
 17   ?
 18   1,$p
 19   набираю строку 1
 20   а теперь 2
 21   a
 22   набираю строку 3
 23   .
 24   2d
 25   1,$p
 26   набираю строку 1
 27   набираю строку 3
 28   w
 29   34
 30   q
 31   su>

В строке 1 вызывается редактор  для  работы  с  файлом  fff.
Oтсутствие  файла  вызывает диагностику в строке 2 (такой же
эффект вызовет и запрет записи в текущий каталог). В  строке
3 редактору дается команда a - добавлять текст после текущей
строки (так как fff пока пуст это эквивалентно "0a").  Затем
набирается две строки текста и символом точка в первой пози-
ции (строка 6) набор текста закончен. Команда  w  записывает
набранный файл на диск и сообщает о размере файла - 28 байт.
Типичной ошибкой является пропуск заканчивающей ввод точки -
тогда  w  была  бы  не командой, а набираемым текстом и, ес-
тественно, запись не произошла бы. Командой q сеанс работы с
редактором  закончен - интерпретатор команд выдает подсказку
готовности (su>).

В ответ на нее в строке 10 начинается  новый  сеанс.  Теперь
файл  существует и вместо ?fff выдается его размер. Ввод но-
мера строки (1) вызывает ее печать (то  же  со  строкой  2).
Строка  3 в нашем файле отсутствует, о чем редактор сообщает
вопросительным знаком (его реакция на любые ошибки). Команда
в строке 18 читается как "напечатать весь текст", что редак-
тор и делает (строки 19,20).

В редакторе ed есть понятие текущей строки - той, с  которой
делалась последняя операция. В данном случае последней печа-
талась вторая строка текста, поэтому команда "a" будет экви-


30


валентна  "2a"  -  вводить после 2-й строки (для ввода перед
строкой существует команда "i"). Далее вводится третья стро-
ка  текста  и  ввод  заканчивается  точкой в первой позиции.
Команда "2d" уничтожает строку 2. Явное указание номера  не-
обходимо, так как после набора строки 3 она является текущей
и просто команда "d" уничтожила бы строку 3. Далее опять пе-
чатается  весь  файл (строки 2 уже нет), производится запись
на диск и выход из редактора.


   2.7. Экранный редактор текстов


Экранный редактор текстов red вызывается в форме

        su> red file

или

        su> red

в том случае, если нужный файл уже  редактировался  и  после
этого вы не выходили из системы и не меняли текущий каталог.
При этом редактирование начинается с того места, на  котором
оно было окончено.

Выход из сеанса редактирования  осуществляется  клавишей  ЗБ
(DEL).

   В ходе редактирования на экране терминала создается нечто
вроде   окна,  внутри  которого  находится  фрагмент  вашего
текста.

   Если такого файла еще не существует,  red  задает  вопрос
"sOZDATX"  и  в  случае ответа "y" создает новый файл, иначе
подключает специальный файл вспомогательной информации,  ко-
торый доступен вам только для чтения. Этот файл подключается
и еще в ряде случаев (обычно при неверных действиях). К нему
следует привыкнуть и не бояться его внезапных появлений.

   Практически все терминалы имеют клавиши-стрелки в  четыре
стороны (обычно самые простые когда стрелок много) с помощью
которых можно перемещаться внутри окна редактирования.

   Простейшим случаем редактирования является набор. Необхо-
димо просто набирать нужный вам текст и в конце каждой стро-
ки нажимать клавишу ВК (RETURN). Когда  вы  используете  все
окно, red автоматически сдвинет его на несколько строк вниз,
то есть несколько верхних строк  пропадут  (из  вашего  поля
зрения), нижняя строка окна станет средней, а часть окна ос-
вободится для нового текста.

   Кроме стрелок и простого набора red понимает набор специ-
альных  приказов. Обычно их выносят на функциональную клави-
атуру, но на любом терминале все эти приказы  можно  вызвать
последовательным нажатием клавиши ПС (LF) и клавиши, завися-
щей от необходимого действия. В описании редактора специаль-
ные  приказы мы будем обозначать как lfD для комбинации LF и
D, lfA для комбинации LF и A и так далее.




                                                          31


К специальным приказам red относятся (приводятся  клавиши  -
указатели действия):

пробел
   - ARG - ввод аргументов. Используется для замены  умолча-
     ния.  Команда уничтожения строк, например, по умолчанию
     исключает  одну  строку  текста,  а  комбинация  lfпро-
     бел10lf^  уничтожит  10 строк текста. Если вместо цифры
     10 стрелками обозначить прямоугольник, то будет уничто-
     жен  обозначенный кусок. В дальнейшем тексте последова-
     тельное нажатие этих двух клавиш (lf и пробел) mы будем
     обозначать как ARG.

T  - +LINE - движение по строкам вниз, то есть сдвиг окна на
     треть. ARGlfT делает текущую строку верхней.

W  - -LINE - движение по строкам вверх.

N  - +PAGE - движение по страницам вниз.

Q  - -PAGE - движение по страницам вверх (антипод +page).

O  - GOTO - подвод к строке: lfO - к первой, ARGlfO - к пос-
     ледней, ARG10lfO - к десятой.

\  - INSERT - режим вставки. Этот режим определяет,  раздви-
     гать  внутри  строки предыдущий текст при наборе нового
     или создавать новый поверх старого. Кроме того, немного
     меняется отработка команды b-space. Работает insert как
     выключатель сети у торшера -  нажал  -  включил,  снова
     нажал - выключил.

]  - B-SPACE - отменить символ. В  режиме  insert  тянет  за
     собой остаток строки.

U  - DEL-CH - исключить символ справа от курсора.

^  - CLOSE - сдвинуть строки, то есть убить текущую. При по-
     мощи команды ARG можно указать несколько строк или пря-
     моугольник.

K  - OPEN - раздвинуть, то есть  создать  пустое  место.  По
     умолчанию - строку, через ARG - N строк или прямоуголь-
     ник.

F  - PICK - отметить, то есть запомнить  в  буфере.  Вылитая
     close, только без уничтожения текста.

G  - PUT - поместить, то есть вынуть из буфера. ARGlfG выни-
     мает  не  из  буфера,  а последний уничтоженный (close)
     текст.

B  - B-TAB - шаг на табуляцю назад.

[  - CH-TAB - установка табуляции. Подвести курсор на нужное
     место  и нажать lf[. Отменить текущую позицию табуляции
     можно как ARGlf[.

D  - USE - переключить файл. Каждое окно редактирования име-
     ет  с  изнанки  альтернативный файл, то есть работает с
     двумя файлами, переключение которых происходит по  lfD.


32


     Изначально  к  каждому окну подключен файл подсказок, а
     подключение нужного вам  файла  происходит  по  команде
     ARGимяфайлаlfD.

C  - CH-PORT - сменить окно. Используется при редактировании
     нескольких  файлов  одновременно.  Окно  предварительно
     должно быть созданно подгоном курсора к краю  экрана  и
     выполнением  последовательности  команд ARGимяфайлаlfJ.
     Уничтожается экран подводом  курсора  в  левый  верхний
     угол и сочетанием ARGlfJ.

J  - M-PORT - создать окно (см. ch-port).

E  - -SEARCH - поиск назад. Что искать указывается через ар-
     гумент, а предыдущий образ указывать не надо, например,
     последовательно     искать     слово      red      надо
     ARGredlfElfElfE...

R  - +SEARCH поиск вперед (антипод -search).

A  - RIGHT - сдвинуть окно вправо на 16 позиций.

S  - LEFT - окно влево (см. RIGTH).

V  - SAVE - записать файл на диск. ARGимяlfV - записать  под
     другим именем.

@  - ESCAPE - признак управляющего  (control)  символа.  Для
     включения  в текст того, что в данном документе называ-
     ется control-символом и обозначается ^что-то,  например
     ^c, необходимо набрать lf@C.

P  - EXEC - выполнить  команду  фильтр.  Возможностей  уйма.
     Приведем только примеры:
       ARGcat filelfP
     считать файл в текущий текст.
       ARG10l rpl петя ваняlfP
     в десяти строках заменить сочетание петя  на  сочетание
     ваня. Осторожно с метасимволами \, *, @, ", '.
       ARG20sortlfP
     отсортировать  20  абзацев  (абзацы  отделяются  пустой
     строкой).


Кроме того:

ARGaЗБ
   - аварийное прекращение работы без сохранения результатов
     редактирования;

ARGrВК
   - восстановление экрана.











                                                          33


   2.8. Сравнение двух файлов


   Команда cmp сравнивает указанных файла.  Вызов  ее  имеет
вид:

        cmp [-l] [-s] файл1 файл2

Eсли параметр "файл1" представляет собой  "-",  используется
стандартный ввод. Без параметров команда cmp не выдает ника-
ких сообщений, если  файлы  одинаковы,  но  указывает  номер
байта и строки, где произошло несовпадение, если они отлича-
ются. Если один из файлов является началом другого - вам со-
общат. Смысл ключей таков:

-l
   - печатает номер байта (десятичный) и отличающиеся  байты
     (восьмеричные) для каждого несовпадения.

-s
   - для отличающихся файлов ничего не печатается, возвраща-
     ется  только  код равный 0 для идентичных файлов, 1 для
     отличающихся файлов и 2 для недоступных или пропущенных
     параметров.


   2.9. Сравнение файлов и каталогов


   Команда diff имеет несколько способов вызова  из  которых
простейший:

        diff файл1 файл2

Если оба  параметра  являются  каталогами,  diff  составляет
списки имен содержащихся в них файлов (отсортировав их в ал-
фавитном порядке) и выполняет регулярную процедуру сравнения
над текстовыми файлами. Если в каталогах содержатся несовпа-
дающие подкаталоги или нетекстовые файлы с одинаковыми  име-
нами,  они просто перечисляются. Так же перечисляются файлы,
встречающиеся только в одном из каталогов. При сравнении ка-
талогов можно задавать следующие ключи:

-r
   - команда diff выполняется рекурсивно для всех подкатало-
     гов с одинаковыми именами.

-s
   - команда сообщает только о совпадающих файлах.

-sname
   - сравнение  содержимого  каталогов  начинается  с  имени
     name.

   Команда diff сообщает, какие строки должны быть  изменены
в  двух  файлах,  чтобы  они  совпали.  Если  вместо "файл1"
("файл2") указан "-", используется  стандартный  ввод.  Если
один  из  параметров  указывает на каталог, используется тот
файл в этом каталоге,  чье  имя  совпадает  с  именем  файла
"файл2" ("файл1").



34


Нормальный вывод содержит строки следующего вида:

        n1 a n3, n4
        n1, n2 d n3
        n1, n2 с n3, n4

Эти строки соответствуют командам редактора ed для  преобра-
зования  "файла1"  в  "файл2".  Числа после букв относятся к
файлу "файл2". На самом деле, меняя "a" на "d"  и  производя
чтение  в обратном порядке, можно также определить, как пре-
образовать "файл2" в "файл1". Как и в ed, одинаковые пары, в
которых  n1=n2  или n3=n4 сокращаются до одного числа. После
каждой из этих строк следуют все соответствующие строки пер-
вого  файла,  отмеченные  "<",  а  затем все соответствующие
строки второго файла, отмеченные ">".

   Ключ "-b" приводит к игнорированию заключительных  пробе-
лов и символов табуляции, а также к тому, что различные пос-
ледовательности пробелов считаются эквивалентными.

   Ключ "-h" выполняет свою работу быстро и грубо. Он  рабо-
тает  только  в  тех случаях, когда участки изменений малы и
хорошо отделены друг от  друга,  однако  может  обрабатывать
файлы  неограниченной  длины.  С  ключом "-h" не допускаются
ключи "-e" и "-f".

   За исключением редких случаев,  diff  находит  наименьший
достаточный набор различий файлов.

   Код возврата равен 0 если нет различий, 1  если  различия
есть, 2 если выполение команды неудачно.


   2.10. Кто работает в системе


   Команда who без аргумента выдает  для  каждого  активного
пользователя  системы его регистрационное имя, имя терминала
и время регистрации.

   Если заданы два аргумента, например, "who am I" (а  также
"who  are  you"),  who  печатает  имя,  под которым вы заре-
гистрировались в системе.


   2.11. Передача и прием почты между пользователями


   Команда mail предназначена для реализации обмена  сообще-
ниями  между  пользователями  посредством аппарата "почтовых
ящиков". Почтовым ящиком пользователя обычно является файл в
каталоге /usr/spool/mail с именем, аналогичным имени пользо-
вателя, под которым тот зарегистрирован в системе.  Применяя
команду  mail, пользователь получает возможность просмотреть
собственный "почтовый ящик" или дополнить чужой своим  сооб-
щением.

Если в команде не указан "адресат", выдается почта пользова-
теля, сообщение за сообщением, в порядке "последним пришел -
первым вышел". Когда перечислены "адресаты", mail  считывает
стандартный  ввод до конца файла или строки, содержащей лишь


                                                          35


".", и добавляет его к "почтовому ящику" каждого "адресата".
В начале сообщения указывается имя отправителя, дата отправ-
ления и "почтовый штемпель". В качестве "почтового штемпеля"
используются строки, начинающиеся символом ">". Обычно, "ад-
ресат" - имя пользователя, под которым тот зарегистрирован в
системе,  если  необходимо отправить сообщение пользователю,
находящемуся в другой системе (на другой машине),  то  перед
параметром "адресат" следует указать "!имя_системы".

   Во время просмотра "почтового ящика" после печати очеред-
ного сообщения программа выдает на терминал знак вопроса "?"
и ожидает команду. Допустимы следующие ответы:

<return>
   - перейти к следующему сообщению без изменения содержимо-
     го почтового ящика;

d  - удалить сообщение и перейти к следующему;

p  - повторно напечатать текущее сообщение;

-  - вернуться к предыдущему сообщению;

s [файл]...
   - сохранить сообщение в файлах с указанными  именами  (по
     умолчанию,  используется  файл  mbox в рабочем каталоге
     пользователя);

w [файл]...
   - сохранить сообщение без заголовка в файлах с указанными
     именами (по умолчанию - mbox);

m [пользователь]...
   - направить  сообщение  перечисленным  пользователям  (по
     умолчанию - себе);

^d или q
   - поместить непросмотренную почту обратно в почтовый ящик
     и завершить просмотр.

Пример:

послать:
        su> mail asa
        пишите письма.
        ^d
        su>
получить:
        su> mail
        From asa Tue Aug 13 14:08:19 1985
        пишу тебе письмо!
        ? d
        su>










36


   2.12. Получение сообщений о системе


   Команда msgs используется для чтения системных  сообщений
и имеет формат вызова:

msgs ключи

Эти  сообщения  посылаются  по  почте  в  каталог  "msgs"  и
представляют  собой  небольшие  порции  информации,  которые
могут быть прочитаны  один  раз  большинством  пользователей
системы.

   Команда msgs обычно помещается в файл шаблон входа и  вы-
зывается  каждый раз, когда начинается сеанс. Если сообщение
занимает более двух строк, указывается  его  длина  и  будет
задан  вопрос  о том, хотите ли вы посмотреть все сообщение.
Вы можете нажать клавишу возврата каретки или "y",  если  вы
хотите  посмотреть  сообщение или "n", если нужно пропустить
его и перейти к следующему сообщению. Прерывание выводит вас
из  команды  msgs;  при  следующем вызове этой программы она
продолжит работу с того места, где вы остановились.

   Команда msgs записывает номер следующего сообщения в файл
/usr/msgs, где хранится набор файлов, имена которых являются
(последовательными)   номерами   сообщений,   которые    они
представляют.   Файл  /usr/msgs/bounds  указывает  нижний  и
верхний номера сообщений в каталоге, по которым команда msgs
может быстро определить, имеется ли для вас новое сообщение.
Если файл bounds задан не верно, его можно  удалить  -  msgs
создаст новый файл bounds во время следующего запуска.

Команда msgs управляется следующими ключами:

-f
   - Отменяет печать диагностики "no messages" ("нет сообще-
     ний") при отсутствии новых сообщений.

-q
   - Если имеются новые сообщения, печатается "there are new
     messages" ("имеются новые сообщения").

число
   - Выдача начинается с указанного, а не со следующего  со-
     общения.

-число
   - Начинает с заданного "-числа" сообщений  до  сообщения,
     указанного в вашем файле .msgsrc, и удобна для просмот-
     ра недавних сообщений.

   Во время работы с этой командой вы можете перейти к любо-
му  заданному сообщению, печатая его номер в ответ на запрос
msgs о том, что делать.









                                                          37


   2.13. Сообщение для всех пользвателей


   Команда wall считывает свой  стандартный  ввод  до  конца
файла. Затем всем зарегистрированным в системе пользователям
посылается  сообщение,   начинающееся   словами   "broadcast
message ...".

   Посылающий  сообщение  должен  быть  супер-пользователем,
чтобы  преодолеть  всевозможные  виды  защиты, которые могут
применять пользователи.

Пример:

        # /etc/wall
        последний шанс пообедать
        ^d
        #


   2.14. Передача сообщения другому пользователю


   Команда write используется для передачи сообщений на тер-
минал другого пользователя:

write user_name

Когда команда вызывается, она посылает сообщение:

Message from "имя отправителя"

Передача продолжается до тех пор, пока не считывается  конец
файла  на  терминале  или не посылается прерывание. По концу
передачи, write печатает на другом терминале "EOF" и  завер-
шает работу.

   Если вы хотите послать  сообщение  пользователю,  который
более  чем  один  раз зарегистрировался в системе, можно ис-
пользовать второй аргумент "имя_tty" для того, чтобы указать
соответствующее имя терминала.

   С помощью команды "mesg n" можно закрыть свой терминал на
прием сообщений от других пользователей. Вначале запись раз-
решается. Некоторые команды, в частности re, и pr, на  время
своей  работы  закрывают  терминал на прием сообщений, чтобы
предотвратить беспорядочный вывод.

   Если строка начинаетсяя символом "!", write вызывает  ин-
терпретатор  команд для того, чтобы выполнить остаток строки
как команду.

Пример:

        su> write alex
        Привет, Алексей.
        ^d
        su>





38


   2.15. Сменить код защиты


   Статус каждого из перечисленных файлов изменяется в соот-
ветствии со значением символического параметра "статус", ко-
торый комбинируется из букв следующего смысла:

        r - чтение
        w - запись
        x - выполнение
        u - владелец
        g - группа
        o - прочие

например:

chmod o-w файлы
   - запретить чтение прочим;

chmod +x файлы
   - разрешить выполнение (если нет o,g или u, то подразуме-
     вается ugo вместе).

   Только владелец файла (или супер-пользователь) может  из-
менить его режим.

Напомним, что статус файла выдается командой

        bin> ls -l files ...

в форме

-rwxrwxrwx  - можно все,
-rwxrwx---  - можно все владельцу и группе,
-rwx------  - можно все владельцу,
-r--------  - можно чтение владельцу,
и т.д.

Часто все группы rwx трактуют  как  восьмеричные  числа,  то
есть:

        -rwxrwxrwx  = 0777
        -rwxrwx---  = 0770
        -rwx------  = 0700
        -r--------  = 0400
        -r-------x  = 0401
и т.д.

Команда

        bin> chmod 0777 files ...

разрешает все всем.

   Заметим, что если при сборке файл с машинными  инструкци-
ями  обычно  получает  статус  выполняемого, то при создании
файла с набором  указаний  для  интерпретатора  команд  (ко-
мандного файла) ему надо проставить статус выполняемого явно
с помощью команды chmod.




                                                          39


   2.16. Сменить владельца файла


   Среди атрибутов файла (которые можно  поглядеть  командой
ls) есть "владелец", то есть тот, кто создал данный файл. Из
факта владения файлом вытекают права доступа  к  нему.  Если
возникает  необходимость поменять владельца, то это делается
командой

        bin> chown own files ...

где own - регистрационное имя того пользователя, которому вы
передаете файл, а files - список файлов.

Только владелец файла (или супер-пользователь)  может  изме-
нить его владельца.


   2.17. Создание каталогов


   Команда mkdir  создает  указанные  каталоги  со  статусом
0755.  Стандартные  входы "." для самого каталога и ".." для
порождающегокаталога создаются автоматически. Для выполнения
команды mkdir требуется право записи в порождающем каталоге.

Пример:

        # mkdir /mnt/new
        # chmod 0777 /mnt/new
        # chown new /mnt/new
        #


   2.18. Удаление файлов


   Команда rm удаляет из каталога ссылки на  один  или  нес-
колько файлов.

   Для удаления файла из каталога требуется право  записи  в
данный  каталог,  но  не  требуются ни право записи в данный
файл, ни право чтения файла.

   Если пользователь не имеет права записи в файл,  а  стан-
дартным  файлом  ввода является терминал, выдается запрос на
подтверждение операции  и  считывается  строка  стандартного
ввода.  Если эта строка начинается символом "y", файл удаля-
ется, в противном случае файл остается. Никакие  вопросы  не
задаются, если задан ключ "-f".

   Если указанный файл является каталогом, печатается  сооб-
щение  об  ошибке.  При  использовании ключа "-r" рекурсивно
уничтожаются файлы из этого каталога и сам каталог.

   При указании ключа "-i" (интерактивно) команда rm  задает
вопрос  о  необходимости  удаления каждого файла, а вместе с
ключом "-r" - нужно ли проверять каждый каталог.

   Могут возникнуть вредные последствия при неумышленном вы-
полнении чего-нибудь вроде "rm *".


40


Пример:

        # rm /tmp/*
        # rm -ir /mnt/tmp


   2.19. Контроль дисков


   Команда  fbb  читает  информацию  из  заданных   файловых
систем.  За один раз считывается (16*512) байт. Код возврата
обычно 0, при наличии плохих блоков 1. Ключи имеют смысл:

d    Следующий аргумент указывает размер читаемого  диска  в
     блоках по 512 байт;

s    Подавить печать (важен только код ответа).

Примеры:

fbb /dev/rrk1 -d 4872
   - Проверить на наличие плохих блоков диск rk1,  на  диске
     4872 блока;

fbb -s /dev/rrk[0-8]
   - Проверить все диски на наличие  плохих  блоков,  выдать
     только код ответа.

   Проверку дисков рекомендуем проводить с консольного  тер-
минала(драйверы большинства устройств выдают туда информацию
об ошибках обмена).


   2.20. Контроль файловой системы


   Программа fsck служит для проверки и восстановления  фай-
ловой  системы.  С  ключом  -p fsck восстанавливает заданные
файловые системы без участия оператора. Этот режим  рекомен-
дуется  как основной. По каждой исправленной ошибке выдается
диагностическое сообщение, указывающее имя проверяемой  фай-
ловой системы и проведенные в ней изменения. После успешного
восстановления файловой системы fsck укажет имеющееся в  ней
число файлов, свободных и использованных блоков.

   Без ключа -p fsck проверяет и интерактивно устраняет про-
тиворечивые  ситуации, возникающие в файловой системе. Обна-
ружив ошибку в файловой системе, fsck задает вопросы и далее
действует,  сообразуясь  с  ответами оператора. Отметим, что
при автономной работе fsck может произойти некоторая  потеря
информации,  хранящейся в файловой системе. Количество поте-
рянной информации может быть определено  по  диагностическим
сообщениям.  Fsck  начинает  восстановление файловой системы
только после того, как  будет  получен  ответ  оператора  по
каждой  директиве. Если у оператора нет полномочий на запись
в файловую систему, то fsck только выдаст диагностику.

Еще можно использовать ключи:





                                                          41


-y   Предполагается, что на все вопросы системы fsck был дан
     положительный  ответ.  Этим  ключом  нужно пользоваться
     чрезвычайно осторожно, т.к. его задание дает fsck  воз-
     можность  продолжить  работу  даже в случае обнаружения
     чрезвычайно опасных ошибок.

-n   Предполагается, что на все вопросы fsck был дан отрица-
     тельный  ответ.  Файловая система в этом случае закрыта
     для fsck на запись.

   Файлы и каталоги, на которые отсутствуют ссылки, создают-
ся  с  верными ссылками в каталоге lost+found (имя несколько
варьируется). Им присваиваются имена, равные номеру  i-узла.
Единственным   ограничением   является   то,   что   каталог
lost+found должен быть заранее создан в "корне"  проверяемой
файловой  системы  и  должен  иметь достаточные размеры. Для
этого в нем создают некоторое число файлов или  каталогов  с
последующим их уничтожением (перед запуском fsck).

   Проверяемое устройство рекомендуется размонтировать и ис-
пользовать  имя  для  небуферизованного  обмена  (/dev/rrk).
Обычно проверка файловой системы производится перед монтиро-
ванием, например:

        fsck -p /dev/rrk3
        mount /dev/rrk3 /mnt/su

   Особым случаем является работа с корневой файловой систе-
мой которую нельзя размонтировать (об этом позже).


   2.21. Создать на диске файловую систему


Команда mkfs имеет 2 формата вызова. Простейший случай имеет
вид:

        # mkfs спецф длина

и конструирует файловую систему путем записи  в  специальный
файл "спецф".

Например:

создать файловую систему на дисках rk5 и rx1:

        # mkfs /dev/rrk5 4872
        # mkfs /dev/rx1 400

(здесь на диске rx специально не используются  последние  90
блоков из-за невысокой надежности).


   2.22. Контроль и подключение файловой системы


   Программа automou служит для  автоматической  проверки  и
монтирования дисков. Команда automou использует метку диска,
создаваемую командой mark:

        # mark rk3 /mnt/su


42


и для всех указанных  файловых  систем  выполняет  следующие
действия:

   - контролирует диск на наличие плохих блоков;

   - проверяет файловую систему;

   - монтирует диск.

   Ключ -s используется только в стартовом файле  /etc/rc  и
вызывает просмотр содержимого клавишного регистра процессора
перед каждым действием. При этом  значения  ключей  регистра
интерпретируются следующим образом:

0 -  включить проверку на плохие блоки;

3 -  включить проверку файловой системы;

6 -  монтировать,

причем проверка ключей регистра происходит перед каждым дей-
ствием (можно управлять работой с отдельными дисками).

   Ключи -f и -n используются для монтирования диска в рабо-
тающей системе и означают следующее:

-n   выключить проверку файловой системы;

-f   включить режим проверки на плохие блоки.

В одном вызове может быть или -s, или комбинация -n и -f.

При задании имен устройств используется правило:

   - к именам без лидирующего символа "/"  добавляются  пре-
     фиксы  /dev/  (для  команды mount) и /dev/r (для fsck и
     fbb)

   - у имен с лидирующим символом "-" сам "-" отбрасывается,
     имя исследуется на лидирующий "/", а следующий аргумент
     команды рассматривается как марка взамен записанной  на
     томе (и при отсутствии ее).

Заметим, что работа с диском начинается  с  проверки  марки.
Указывая марку в командной строке, вы тем самым отмените эту
проверку, что может привести к странным эффектам  (программа
fsck начнет проверять диск RSX-11).

Примеры:

/etc/automou -s rk0 rk1 rk2
   - такая команда обычно записывается в файле /etc/rc и вы-
     зывает  проверку всех маркированных дисков в момент пе-
     рехода в многопользовательский  режим  работы  ОС.  Для
     всех  маркированных  дисков выполняются действия, зака-
     занные на клавишном регистре процессора;

/etc/automou -n rk2 rk3
   - смонтировать файловые системы, расположенные на устрой-
     ствах rk2 и rk3 без проверки файловой системы;



                                                          43


/etc/automou -f rk2 -rk3 /mnt/tmp
   - аналогично  предыдущему,  но  диск  3  монтируется   на
     /mnt/tmp и проводится проверка плохих блоков;

/etc/automou -s rk2 -rk3 /mnt/tmp
   - аналогично, но управляется ключами процессора.


   2.23. Копирование файлов


Команда cp копирует файлы и имеет формат вызова:

        cp файл1 файл2
        cp файл ... каталог

"Файл1" копируется в "файл2". Если "файл2" существует, режим
доступа и владелец сохраняются, в противном случае использу-
ется режим исходного файла.

Вторая форма данной команды копирует один или несколько ука-
занных файлов в "каталог" с исходными именами.

Команда cp отвергает запрос на копирование  файла  в  самого
себя.


   2.24. Переместить файл


   Команда mv перемещает "файл1" в "файл2" и по формату  вы-
зова  совпадает  с командой cp. Если "файл2" уже существует,
он удаляется  перед  переписыванием  "файла1".  Если  статус
файла  "файл2"  запрещает  запись, но пользователю разрешена
запись в данный каталог,  команда  mv  печатает  режим  (см.
chmod)  и  считывает  строку из стандартного ввода. Eсли эта
строка начинается символом "y", происходит перезапись,  а  в
остальных случаях происходит выход из mv.

   Вторая форма команды приводит к тому, что один  или  нес-
колько "файлов" переписываются в "каталог" под своими исход-
ными именами.

   Команда mv (как и cp) отказывается  переписывать  файл  в
самого себя.

   Если "файл1" и "файл2" расположены в разных файловых сис-
темах,  команда  mv должна скопировать файл и удалить исход-
ный. В этом случае именем владельца становится  имя  копиру-
ющего  процесса,  а  связи с другими файлами (альтернативные
имена) теряются.

   Каталоги могут перемещаться только в пределах одной и той
же файловой системы.

   Команда mv должна бы иметь флаг "-f"  аналогично  команде
rm,  для  подавления  запроса на подтвержение в случае, если
целевой файл существует и защищен от записи.





44


   2.25. Преобразование и копирование


   Команда dd копирует заданный входной файл в заданный  вы-
ходной  файл с возможными преобразованиями. По умолчанию ис-
пользуются стандартный ввод и стандартный вывод. Может  быть
задан  размер  блока  при вводе и выводе, чтобы использовать
преимущества прямого физического ввода-вывода. Параметры ко-
манды dd имеют смысл:

if=
   - имя входного файла (по умолчанию - стандартный ввод);

of=
   - имя выходного файла (по умолчанию - стандартный вывод);

ibs=n
   - устанавливает размер блока при вводе равным n байт  (по
     умолчанию - 512);

obs=n
   - устанавливает размер блока при выводе равным n байт (по
     умолчанию - 512);

bs=n
   - устанавливает размер блока как для ввода, так и для вы-
     вода,  отменяя  ibs и obs. Особенно эффективен, если не
     задано преобразование (не требуется создание  копии);

cbs=n
   - размер буфера преобразования;

skip=n
   - пропускает n входных записей перед началом копирования;

files=n
   - пропускает n входных файлов перед началом копирования;

seek=n
   - пропускает n записей от начала  выходного  файла  перед
     копированием;

count=n
   - копирует только n входных записей;

conv=ascii
   - выполняет преобразование из кода ДКОИ в код КОИ-8;

conv=ebcdic
   - выполняет преобразование из кода КОИ-8 в код ДКОИ;

conv=ibm
   - несколько отличающееся преобразование КОИ-8 в ДКОИ;

conv=lcase
   - преобразует алфавитные символы в нижний регистр;

conv=ucase
   - преобразует алфавитные символы в верхний регистр;




                                                          45


conv=swab
   - переставляет каждую пару байтов;

conv=noerror
   - не прекращает обработку при обнаружении ошибки;

conv=sync
   - дополняет каждую входную запись до размера ibs;

conv=...,...
   - несколько преобразований, разделенных запятой;

Там, где определяются размеры, предполагается указание числа
байтов.  Число  может оканчиваться символами k, b или w, что
означает умножение на 1024, 512 или  2  соответственно.  Для
обозначения произведения пара чисел может разделяться симво-
лом "x".

Параметр "cbs=n" используется  только  тогда,  когда  заданы
преобразования  ascii или ebcdic. В первом случае cbs симво-
лов помещаются в буфер преобразования, преобразуются  в  код
КОИ-8  и перед помещением этой строки в выходной файл заклю-
чительные пробелы отбрасываются и добавляется  символ  новой
строки.  Во  втором случае символы КОИ-8 считываются в буфер
преобразования, преобразуются в код ДКОИ и дополняются  про-
белами, чтобы получить выходную запись размером cbs.

После завершения dd сообщает количество  полных  и  неполных
введенных и выведенных блоков.

Например:

dd if=/dev/rmt0 of=х \ ibs=800 cbs=80 conv=ascii,lcase

   - переписывает ленту ДКОИ, которая содержит по десять 80-
     байтных   образов  карт ДКОИ в блоке, в файл с именем x
     (символ \ сообщает интерпретатору команд о том, что ко-
     манда не поместилась в одной строке). Обратите внимание
     на использование небуферизоанного  обмена  с  магнитной
     лентой (rmt).

dd if=/dev/rrk5 of=/dev/rrk6 bs=8k

   - копирует диск в диск.


   2.26. Свободное пространство на диске


   Команда df распечатывает размер файловой системы,  размер
свободного  и  используемого пространства (в логических бло-
ках), и процент использования. Если задан  параметр  "файл",
то выдается информация о файловых системах, содержащих пере-
численные файлы. Если "файловая-система" и "файл" не  указа-
ны,  то выдается информация о свободном пространстве на всех
смонтированных файловых системах. Например:

df /dev/rk0
   - свободное пространство на диске rk0;




46


df
   - свободное пространство на всех смонтированных дисках;

df .
   - свободное пространство на том диске, где находится  те-
     кущий каталог.

   Команда du выдает число блоков, занимаемых всеми  файлами
и  каталогами (рекурсивно), содержащимися внутри каждого за-
данного каталога или файла "имя".  Если  "имя"  отсутствует,
используется ".".

Ключ "-s" вызывает выдачу только общего итога. Ключ "-a" вы-
зывает вывод сообщения по каждому файлу. При отсутствии клю-
ча сообщения генерируются только по каталогам.

Файлы, которые имеют несколько альтернативных имен, учитыва-
ются только один раз.

Если в качестве параметров заданы не каталоги  и  не  указан
ключ  "-a",  то они не распечатываются. Если имеется слишком
много различных альтернативных имен файлов, команда du  учи-
тывает избыточные файлы по несколько раз.

Примеры:

        su> du .
        su> du -s *


   2.27. Определить тип файла


   Команда file выполняет серию проверок для  каждого  пара-
метра (файла) и пытается классифицировать его. Если оказыва-
ется, что файл состоит из символов кода КОИ-8, команда  file
исследует первые 512 байтов и пытается угадать язык.

Данная команда часто  совершает  ошибки.  В  частности,  она
часто  предполагает, что командные файлы являются программа-
ми, написанными на языке Си.

Примеры:

        su> cd /
        su> file *


   2.28. Поиск файлов


Команда find имеет формат вызова

find список_полных_имен выражение

и рекурсивно понижает иерархию каталогов для  каждого  имени
пути  в "списке_полных_имен" (т.е. одно или несколько полных
имен) и ищет файлы, которые  соответствуют  булеву  "выраже-
нию",  записанному  с помощью элементов, приведенных ниже. В
этих описаниях параметр n используется как десятичное целое,
причем +n означает более чем n, -n означает менее чем n, а n


                                                          47


означает точно n.

-name имя_файла
   - Истина, если параметр "имя-файла" соответствует текуще-
     му  имени файла. Может использоваться обычный синтаксис
     параметров интерпретатора команд, если он скрыт (будьте
     осторожны с символами "[, "?" и "*").

-perm вчис
   - Истина, если статус файла точно  соответствуют  восьме-
     ричному  числу  "вчис"  (см.  chmod). Если "вчис" имеет
     перед собой знак минус,  становятся  значимыми  большее
     количество битов статуса (017777, см. stat).

-type X
   - Истина, если файл имеет тип "X", где  "X"  представляет
     собой один из символов b, c, d или f - для специального
     блочного файла; специального символьного файла; катало-
     га или простого файла соответственно.

-links n
   - Истина, если файл имеет n связей.

-user имяп
   - Истина, если файл принадлежит пользователю "имяп"  (ре-
     гистрационное  имя или числовой идентификатор пользова-
     теля).

-group имяг
   - Истина, если файл принадлежит группе "имяг" (имя группы
     или числовой идентификатор группы).

-size n
   - Истина, если длина файла составляет n  блоков  (по  512
     байт в блоке).

-inum n
   - Истина, если номер i-узла файла равен n.

-atime n
   - Истина, если доступ к файлу производился в течение пос-
     ледних n дней.

-mtime n
   - Истина, если файл модифицировался в течение последних n
     дней.

-exec команда
   - Истина,  если  выполненная  "команда"  возвращает   код
     возврата  нуль.  Конец  команды  должен  быть обозначен
     скрытой точкой с запятой "\;".  Параметр  команды  "()"
     заменяется текущим именем.

-ok команда
   - Аналогично "-exec", за исключением того, что сгенериро-
     ванная  команда записывается в стандартный вывод, затем
     считывается  стандартный  ввод  и  команда  выполняется
     только в случае ответа "y".





48


-print
   - Всегда истина. Вызывает печать текущего полного имени.

-newer файл
   - Истина, если текущий файл  был  модифицирован  позднее,
     чем указанный "файл".

   Все эти элементы могут об'единяться с  помощью  следующих
операций  (операции  перечислены  в порядке уменьшения стар-
шинства):

   - Заключение группы элементов и операций в скобки (скобки
     служат специальными символами для интерпретатора команд
     и должны быть скрыты).

   - Отрицание элемента ("!" представляет собой унарную опе-
     рацию "нет").

   - Конкатенация элементов (операция  "-a"  подразумевается
     непосредственным соседством двух элементов).

   - Альтернативность  элементов  ("-o"  представляет  собой
     операцию "или").

Примеры:

Удалить все файлы с именами "a.out" или "*.o", доступ к  ко-
торым не производился в течение недели:

find / \(-name a.out -o -name '*.o' \) \\
   -atime +7 -exec rm() \;

Дать список всех файлов в системе,  удовлетворяющих  шаблону
*lp*:

find / -name '*lp*' -print


   2.29. Создание альтернативных имен


   Один и тот же файл (вместе со  своим  размером,  информа-
цией,  относящейся  к  защите, и т.д.) может иметь несколько
альтернативных имен. Не существует способа отличить  альтер-
нативное имя данного файла от его исходного имени, любые из-
менения в файле выполняются независимо от имени, под которым
известен этот файл.

Команда ln имеет форму вызова

ln имя1 [имя2]

и создает альтернативное имя для существующего файла "имя1".
Если  указано "имя2", то будет создано данное альтернативное
имя файла в текущем каталоге. Если  "имя2"  является  именем
уже существующего каталога, то в нем будет создано альтерна-
тивное имя "имя1". Если задан только один параметр и он  яв-
ляется  именем каталога, то альтернативное имя будет создано
в текущем каталоге с таким же именем, как  последняя  компо-
нента данного каталога.



                                                          49


   Создавать  альтернативные  имена  каталогов  и   файловых
систем запрещается.


   2.30. Распечатать содержимое каталога


   Для каждого параметра, являющегося именем  каталога,  ко-
манда ls распечатывает содержимое этого каталога. Для каждо-
го параметра, являющегося файлом, команда ls  повторяет  его
имя  и  сообщает  всю остальную затребованную информацию. По
умолчанию выходная информация сортируется в  алфавитном  по-
рядке.  Если параметры не указаны, выдается содержимое теку-
щего каталога. Если указано  несколько  параметров,  то  они
вначале  соответствующим  образом  сортируются, однако те из
них, которые являются файлами, помещаются перед каталогами и
их содержимым.

   Имеется три возможных формата выдачи.  Выбираемый  формат
зависит  от того, направляется ли вывод на терминал, а также
может управляться с помощью ключей. Стандартным форматом для
терминала  является выдача содержимого каталогов в несколько
столбцов.

   Файлы, которые рассматриваются не как содержимое  катало-
га,  всегда  сортируются  поперек  страницы, а не в столбцах
таблицы сверху вниз. Это связано с тем, что имена  отдельных
файлов  могут  иметь  произвольную  длину. Имеется несколько
ключей:

-l
   - Выдавать "в  длинном  формате",  указывая  для  каждого
     файла  его  режим,  число  связей,  владельца, размер в
     байтах и время последней модификации. Если файл являет-
     ся специальным файлом, поле размера будет содержать ос-
     новной и дополнительный номера устройства.

-t
   - Отсортировать в соответствии  со  временем  модификации
     (вначале  с  более поздним временем модификации) вместо
     обычной сортировки по именам.

-a
   - Выдавать все имена (обычно имена файлов, начинающиеся с
     точки, не выдаются).

-s
   - Указать размер для каждого имени в блоках, включая бло-
     ки косвенной адресации.

-d
   - Если параметр является именем каталога, выдавать только
     его  имя, а не содержимое (используется главным образом
     с "-l" для получения состояния каталога).

-g
   - Указать идентификатор группы вместо идентификатора вла-
     дельца при подробной выдаче ("-l").





50


-m
   - Используется потоковый выходной формат.

-1
   - Используется формат с одним именем в строке,  например,
     при выводе на терминал.

-c
   - Используется вывод в несколько столбцов, например,  при
     выводе в файл или в поток (pipe).

-x
   - Вызывает сортировку состоящей  из  нескольких  столбцов
     выдачи поперек страницы, а не сверху вниз; такой формат
     является стандартным, если последним символом имени,  с
     которым была вызвана программа, является "x".

-R
   - Рекурсивная выдача содержимого всех встречающихся ката-
     логов.

Для получения на АЦПУ полного  списка  всех  файлов  системы
можно использовать команду:

ls -Rla / > /dev/lp






































                                                          51





                     3. ЗАГРУЗКА ДЕМОС


   Необходимость в процедуре начальной  загрузки  вызывается
следующей  причиной:  в  самом  начале работы машины ни одна
программа не находится в оперативной памяти. Поэтому первое,
что необходимо сделать - это загрузить программу в память. К
сожалению, нужная нам программа (ядро операционной  системы)
находится на диске и процессор не знает, где именно.

Решается эта проблема следующим образом:

   - совсем маленькая программка (аппаратный загрузчик) "за-
     шивается" в постоянную память ЭВМ и умеет считать нуле-
     вой блок некоторого устройства (диска, ленты и т.д.);

   - в нулевой  блок  устройства  записывают  более  сложную
     программу  (начальный  загрузчик),  которая  знает, как
     прочитать с диска другую (большую) программу;

   - эта программа (boot), в свою очередь, знает, как загру-
     зить саму операционную систему.


   3.1. Действия оператора


   С точки зрения оператора процедура начальной загруки сис-
темы  представляет собой запуск корневого процесса, контроль
и монтирование файловых систем, а также  ряд  действий  типа
ввода даты и перехода в многопользовательский режим.

Для СМ-4 эта процедура имеет вид:

   - нажать на процессоре кнопку "останов";

   - набрать адрес аппаратного  загрузчика  с  вашего  диска
     (например, 0173110);

   - отжать кнопку "останов";

   - нажать кнопку "пуск";

   - на терминале появился символ "@". Этим символом началь-
     ный загрузчик ДЕМОС сообщает о себе и о готовности про-
     явить свои способности, а именно вызвать файл из корне-
     вой файловой системы и запустить его;

   - если у вас  полупроводниковая  память,  то  при  первом
     включении машины ее надо расписать командой mdec/clrmem
     (возможно у вас в системе будет менее оригинальное наз-
     вание).  Через  несколько  секунд  появится сообщение о
     конце росписи "OK" и новая подсказка  "@"  -  clrmem  в
     конце работы опять вызовет загрузчик;

   - теперь надо вызвать загрузчик boot -  более  серьезный,
     чем  начальный  и умеющий запускать ядро ДЕМОС с произ-
     вольного диска;


52


   - при появлении подсказки BOOT: надо набрать имя ядра,  с
     которым  вы  будете  работать  (уточняется у системного
     программиста). Имя ядра для программы boot строится  по
     следующему принципу: к двум буквам мнемонического обоз-
     начения диска, с которого производится загрузка  добав-
     ляется номер диска и номер блока, с которого начинается
     файловая система (на диске файловая система не обязанна
     начинаться  с  нулевого  блока), после чего добавляется
     имя файла - образа ядра. Если диск имеет  мнемоническое
     обозначение  rk  (ИЗОТ-1370), причем файловая система с
     ядром по имени mydemos находится на втором устройстве и
     начинается  с  блока  1000,  то  вызов  будет иметь вид
     rk(2,1000)mydemos.

В большинстве случаев для диска rk проходит следующее  (при-
ведем копию диалога системы и пользователя):

        @mdec/clrmem
        ОК
        @boot
        BOOT
        :rk(0,0)demos

если вы все сделали правильно, то после некоторой паузы  по-
явится  сообщение  о  имеющейся  памяти и начнет выполняться
шаблон запуска системы.

Дальнейшая деятельность по загрузке имеет на терминале  при-
мерно следующий вид в соответсвии с рис.3 (возможны вариации
в зависимости от конкретной системы), где номера строк  при-
водятся для удобства комментирования.

Смысл всего этого следующий:

1  - сообщение системы о наличии оперативной  памяти  ЭВМ  -
     всего и для пользователей;

2  - идентификация версии;

3  - запуск контроля корневой файловой системы;

4  - сообщение программы fsck  о  результатах.  Цифры  могут
     варьироваться, но количество свободных блоков (free) не
     должно быть слишком мало (по вашим понятиям);

5  - сообщение о времени последнего выключения машины: втор-
     ник,  август  13,  22  часа 34 минуты по Гринвичу, 1985
     год.

6  - 6a и 6b есть одна строка, но начально  она  выдается  в
     виде  6a  и  курсор  останавливается  перед  сочетанием
     "mmddhhmm", а оператор поверх этих букв набирает  новую
     дату и строка принимает вид 6b;

7  - сообщение о установке в системе новой даты;

8  - подсказка о том, что система находится в  однопользова-
     тельском  режиме и для перехода в многопользовательский
     режим надо ввести ^d.




                                                          53


1  REAL MEM = 124 KW AVAIL MEM =87 KW
2  ДЕМОС верс.1.1 (ИАЭ,МОСКВА)
3  /etc/fsck -p /dev/rrk0
4  /dev/rrk0: 289files 2406blocks 616 free
5  Прошл.дата: Tue Aug 13 22:34:33 GMT 1985
6a Введите дату в формате ДЕМОС : mmddhhmm
6b Введите дату в формате ДЕМОС : 08140929
7  Новая дата: Wed Aug 14 09:29:33 GMT 1985
8  To run multiuser just hit ^d
9  LOGIN:

        Рис.3.



9  - подсказка программы login о возможности входа в  систе-
     му.

Теперь возможны три варианта:

   - ввод регистрационного имени вызовет вход  в  систему  в
     однопользовательском  режиме,  а  последующий  выход из
     системы (ввод ^d интерпретатору команд) вызовет переход
     в многопользовательский режим;

   - ввод ^d вызовет немедленный  переход  в  многопользова-
     тельский режим;

   - отсутствие действий оператора  вызовет  самостоятельный
     переход системы в многопользовательский режим через 1-2
     минуты.

При переходе в многопользовательский режим запускается прог-
рамма automou, которая проверяет и монтирует некорневые фай-
ловые системы (на других дисках). Выдача на  терминал  имеет
вид, примерно соответствующий рис.4 (возможны вариации в за-
висимости от конкретной системы). где номера строк приводят-
ся для удобства комментирования.

Смысл всего этого следующий:

1  - вызов программы fsck для первого диска;

2  - сообщение программы о результатах контроля;

3  - монтирование диска 1 на каталог  /mnt/su  (такая  метка
     была ранее записана на диске программой mark);

4-7
   - диск 2 проверяется аналогично диску 1, однако во  время
     монтирования  диска 1 оператор нажал на консоли процес-
     сора ключ 0, что вызвало для диска 2  запуск  программы
     fbb;

8  - диск 3 оказался без метки и программа  automou  его  не
     трогает;

9-10
   - с дисками 4 и 5 работа не удается (возможно, они  и  не
     включенны);



54


 1  /etc/fsck /dev/rrk1
 2  /dev/rrk1: 111files 2222blocks 333 free
 3  /etc/mount /dev/rk1 /mnt/su
 4  /etc/fbb  /dev/rrk2
 5  /etc/fsck /dev/rrk2
 6  /dev/rrk2: 444files 2222blocks 111 free
 7  /etc/mount /dev/rk2 /usr
 8  ---Automou: /dev/rrk3 not marked
 9  ---Automou: /dev/rrk4 can't open
10  ---Automou: /dev/rrk5 can't open
11  login:

        Рис.4.



11
   - переход в многопользовательский режим закончен, на  все
     терминалы  (включая  консольный)  посылается  подсказка
     login. Пользователи могут входить в систему.

   В ходе загрузки системы могут обнаружиться ошибки. Разбе-
рем те из них, которые система может устранить сама.

   Прежде всего, это ошибки  в  корневой  файловой  системе.
Сообщение  о них появляется на этапе начальной загрузки (см.
рис.3) после запуска программы fsck (строка 4 рис.3) в  фор-
мате  "ПОВТОРИТЕ  ВЫЗОВ". Это говорит о том, что ошибки уда-
лось исправить, но теперь надо перезагрузить систему заново.

   Аналогичные ошибки могут быть  обнаруженны  и  на  других
дисках, однако исправление их не требует перезагрузки и при-
ведет лишь к появлению сообщений. Например, для диска 2  это
сообщение появилось бы после строки 5 (см. рис.4).

   Все остальные ошибки загрузки носят более сложный  харак-
тер и требуют активного вмешательства оператора.


   3.2. Шаблоны загрузки


Мы уже говорили про шаблон входа. Среди них два:

        /.profile
и
        /etc/rc

имеют особый смысл. Первый из них  выполняется  при  запуске
системы,  а  второй  -  при переходе в многопользовательский
режим. Для понимания загрузки ДЕМОС мы сейчас приведем  при-
меры этих шаблонов.

Шаблон запуска системы обычно похож на:

  1 stty erase  ^X scope
  2 if [ $HOME ]
  3         then {
  4        PATH=:/bin:/usr/bin
  5        HOME=/guest
  6        PS1="$USER> "


                                                          55


  7        PS2="$USER+>"
  8         }
  9    else {  sync
 10    stty -lcase
 11    PATH=:/bin:/usr/bin:/etc
 12    HOME=/
 13    echo  "ДЕМОС верс.1.1 (ИАЭ,МОСКВА)"
 14    echo /etc/fsck -p /dev/rrk0
 15    /etc/fsck -p -R /dev/rrk0
 16    case $? in
 17    0);;
 18    8) echo
 19       echo ОШИБКИ В КОРНЕВОЙ Ф.С.
 20       echo ВЫЗОВИТЕ fsck В ДИАЛОГЕ
 21       echo
 22       exit;;
 23    1) echo "  ПОВТОРИТЕ ВЫЗОВ"
 24         /etc/reboot;;
 25      esac
 26    [ $$ -le 10 ] && {
 27    cat /dev/null > /etc/utmp
 28    cat /dev/null > /etc/mtab
 29 chown bin /etc/mtab;chgrp bin /etc/mtab
 30 аskdate</dev/console>/dev/console 2>&1
 31       }
 32 echo To run multiuser just hit ^d
 33 stty lcase ; login
 34 }
 35 fi
 36 export HOME PATH
 37 cd
 38 echo "HOME = $HOME"
 39 echo "erase = <dc>"

Здесьлевая колонка цифр введена для удобства комментирования
и в реальном файле отсутствует. Шаблон запуска системы имеет
следующий  смысл  (приводим  номера  строк   и   выполняемые
функции):

1  - установить режим работы консольного  терминала  (модели
     vt-52),  в том числе символом отмены последнего символа
     установить ^X (клавиша "del char") и разрешить драйверу
     испОльзовать  аппаратную  возможность терминала стирать
     символ (работать в режиме scope);

2-8
   - эти строки выполняются в том случае,  когда  определена
     строка  интерпретатора команд HOME. Это сделанно по той
     причине, что при входе в систему пользователя, не  име-
     ющего  домашнего  каталога, таким каталогом ему устано-
     вится /, и тогда имя шаблона входа пользователя  совпа-
     дет  с  именем шаблона зазрузки системы. Понятно, что в
     таком случае надо отработать другой набор команд, что и
     будет  сделано в строках 4-7. При этом пользователю ус-
     тановится путь поиска команды, домашний каталог  /guest
     и  подсказки  интерпретатора  по  его  имени, например,
     marina> при входе под именем marina.  Различить  запуск
     системы  и вход пользователя без каталога позволяет то,
     что при входе пользователя $HOME=/, а при запуске  сис-
     темы строка HOME пуста. В этом случае отработают строки
     9-34 вместо 4-7.


56


9-34
   - отрабатывают процедуру  загрузки  системы.  Выполняются
     команды sync, переключение драйвера терминала на работу
     с  маленькими  буквами,  устанавливается  путь   поиска
     команд  (в том числе и в каталоге /etc), домашний ката-
     лог определяется как /,  выдается  сообщение  о  версии
     системы,  после чего запускается контроль корневой фай-
     ловой системы. Контроль смонтированной файловой системы
     (а  корневую  систему нельзя размонтировать) отличается
     важной особенностью - даже после минимальных  исправле-
     ний  систему надо остановить и загрузить опять. Поэтому
     в строках 16-25 исследуется код окончания работы  прог-
     раммы  fsck (которым она сообщает о результатах провер-
     ки) и отрабатывается  3  ситуации:  код  0  говорит  об
     исправной файловой системе и ничего не предпринимается;
     код 8 говорит о серьезных дефектах, которые  можно  пы-
     таться исправить только в диалоговом режиме fsck, выда-
     ется сообщение и процедура заканчивается (о  дальнейших
     ваших  действиях мы поговорим в разделе "Восстановление
     системы"); и код 1 говорит о том, что дефекты  файловой
     системы  удалось исправить (они попали под детерминиро-
     ванный для fsck набор) и вам просто надо  перезагрузить
     систему, Остановленную программой /etc/reboot.

26-31
   - эти строки проверяют,  запуск  или  перезапуск  системы
     имеет  место. В качестве критерия проверки выбран номер
     процесса (менее 10 - запуск). Запуск от перезапуска от-
     личается набором необходимых действий, а именно: созда-
     ются пустые файлы mtab и utmp для регистрации  монтиро-
     вания  дисков  и входов пользователей и владельцем этих
     файлов устанавливается bin. Кроме того, в  этом  случае
     запускается  команда  askdate для принудительного ввода
     даты (ДЕМОС предпочитает знать точную дату, в противном
     случае наруШается работоспособность многих команд).

32-33
   - эти строки  печатают  сообщение  о  готовности  системы
     начать  работу  с  вами  в  однопользовательском режиме
     (если наберете свое имя) или перейти  в  многопользова-
     тельский  режим (при нажатии ^d). Команда stty устанав-
     ливает режим вывода только большими буквами (принятый в
     ДЕМОС метод отличать однопользовательский режим).

36-39
   - здесь строкам HOME и PATH устанавливается статус export
     и сообщается о регистрационном каталоге и о клавише от-
     мены последнего символа.

   Обычно работа  в  однопользовательском  режиме  требуется
только при восстановлении системы, поэтому чаще всего систе-
му сразу переводят в многопользовательский режим (ответом ^d
на  подсказку LOGIN) и тогда начинает работать второй шаблон
загрузки /etc/rc. Если же вместо ввода ^d имели место вход в
систему и работа в однопользовательском режиме, то переход к
/etc/rc пройзойдет при выходе пользователя (то есть при  на-
жатии ^d на подсказку интерпретатора о готовности).

Типичный для машины СМ-4 с дисками ИЗОТ-1370 файл  rc  имеет




                                                          57


вид:

 1 PATH=:/bin:/usr/bin:/etc
 2 automou -s /dev/rk[1-5] >/dev/console
 3 rm -f /tmp/[A-q]* /tmp/[s-z]*
 4 /etc/update
 5 /etc/cron &
 6 lpcat=/tmp/spool/lpd
 7 [ -f $lpcat/lock ] && {
 8 rm -f $lpcat/lock
 9 echo ЕСТЬ ОЧЕРЕДЬ НА ПЕЧАТЬ>/dev/console
10 }
11 /usr/lib/lpd &
12 exit 0

где нумерация строк введена для удобства разбора и не  явля-
ется составной частью файла rc.

Разберем работу шаблона (по строкам):

1  - определяет путь поиска команд по каталогам;

2  - запустить автоматическое монтирование дисков rk0...rk5;

3  - уничтожить в каталоге /tmp все файлы, кроме тех, у  ко-
     торых первой буквой имени является "r";

4-5
   - запустить программы cron и update;

6-11
   - проверить очередь на печать, сообщить, если непуста,  и
     запустить программу lpd (демон печати);

12
   - завершить работу.


   3.3. Возможные сбои


   Главные опасности при загрузке системы кроются в дефектах
дисков и файловых систем.

   Дефекты дисков возникают от "уплывания" головок и  подоб-
ных  аппаратных причин. Ловятся они программой automou (если
при загрузке на консольном переключателе нажат  ключ  0),  а
для корневой системы можно запустить команду

        # fbb /dev/rrk0

например.

Такая проверка делается не регулярно, а при нарушении  обме-
нов, о чем система выдает диагностику на консольный терминал
в виде

        err on dev N/M
        bn XXXXX er YYYYYY ZZZZZZ

Это указывает на ошибку в устройстве группы М номер  N  (ин-


58


формацию  о  соответствии  M и мнемонического названия можно
получить командой ls -l /dev - для специальных файлов M  вы-
дается в позиции "размер").

XXXXX за символами "bn" представляет номер блока на  устрой-
стве, в котором обнаружилась ошибка. Числa за символами "er"
представляет собой два регистра, а что означает их  содержи-
мое,  зависит от типа устройства, на котором произошла ошиб-
ка.

   Причиной дефектов файловых систем является,  чаще  всего,
аппаратный  сбой во время работы системы. О них при загрузке
сообщает программа fsck, вызываемая  для  корневой  файловой
системы в /.profile, а для остальных в /etc/rc (неявно прог-
раммой automou).

   В любом из этих случаев вам потребуется резервная  копия,
ведение  которой будет рассмотренно далее, а пока рассмотрим
зачем она нужна.

   Случай "расформатирования" диска с корневой файловой сис-
темой, например, очевиден. Его придется форматировать снова,
а этот процесс уничтожит на нем всю информацию. Если имеется
свежая копия - диск форматируется и копия восстанавливается.
Если со времени последнего копирования некоторые файлы меня-
лись - проблема сложнее (она будет рассмотренна позже).

   В случае дефектов некорневой файловой системы  ее  ремонт
производится  программой  fsck,  а следствием этого является
возможная утеря файлов, которые придется  восстанавливать  с
резервной копии. Напомним, что ремонтируемое устройство надо
размонтировать и  желательно  использовать  небуферизованный
вход, например:

        # /etc/umount /dev/rk3
        # fsck /dev/rrk3

   Дефекты корневой файловой системы  исправить  сложнее  по
двум причинам:

 1 - ее нельзя размонтировать, а значит надо работать в  од-
     нопользовательском  режиме, использовать небуферизован-
     ный вход и после ремонта сразу остановить процессор без
     команды sync;

 2 - в ходе этого творчества могут пропасть некоторые  файлы
     без которых система не сможет запуститься.


   3.4. Тестирование ЭВМ


   На этапе загрузки системы имеется  возможность  проверить
работуЭВМ. Для этих целей в каталоге /mdec обычно записывают
соответствующие тесты. При использовании ЭВМ  СМ-4  в  /mdec
обычно  присутствуют  комбинированный тест команд процессора
fox и тест памяти mm124k. Вызов тестов имеет вид:

        @mdec/fox
и
        @mdec/mm124k


                                                          59


Следует помнить о свойстве тестов лазить  в  регистр  ключей
процессора. Обычно перед запуском теста следует нажать ключи
7, 9 и 11 для теста процессора и отжать все ключи для  теста
памяти.



























































60





                  4. ВЕДЕНИЕ КОПИИ СИСТЕМЫ


   Для ведения копии системы на магнитных лентах  существует
несколько  способов, которые зависят от типа дисков, исполь-
зования операционной системы и вкусов оператора. При ведении
копии обычно используются программы:

   - dump и restor;

   - tar;

   - rollin (rollout).


   4.1. Программы dump и restor


   Команда dump переписывает на магнитную ленту  все  файлы,
которые  были  изменены  после  определенной даты в файловой
системе. Ключи определяют дату и другие режимы  копирования.
В ключ могут входить символы из набора 0123456789fusd:

f    следующий параметр командной строки будет именем  файла
     для  копирования (например, /dev/rmt3 - третий магнито-
     фон);

u    если операция завершается успешно, dump записывает дату
     начала выгрузки в файл /etc/ddate. В этом файле записы-
     ваются отдельные даты для  каждой  файловой  системы  и
     каждого уровня дампа.

0-9  Это число представляет собой уровень вложенности. Будут
     выгружены  все  файлы,  которые  были модифицированы со
     времени последней даты, хранящейся в  файле  /etc/ddate
     для  данной  файловой системы с более низкими уровнями.
     Если для данного уровня не определено никакой даты, ис-
     пользуется начальная точка отсчета времени; таким обра-
     зом, опция 0 вызывает выгрузку всей файловой системы.

s    Указывает  размер  ленты  для   копирования   в   футах
     (1фут=30,5  см). Количество футов берется из следующего
     параметра. Когда заданный участок будет исчерпан,  dump
     будет  ожидать  смены  бобин. По умолчанию размер равен
     2300 футов (700 метров).

d    Плотность записи на ленту , выраженная в битах на  дюйм
     (1  бит/дюйм  =  0,4  бит/см), берется из следующего за
     ключем параметра. Она используется для вычисления длины
     ленты, использованной при записи. Значение по умолчанию
     равно 1600 (64 бит/мм).

   Если параметры не заданы, ключ предполагается равным  9u,
и  стандартная  файловая  система выгружается на стандартную
ленту.

   Ниже приводятся краткие рекомендации о том, как выполнять
копирование файловой системы.


                                                          61


Начните с полного дампа уровня 0:

        # dump 0u

Затем должны периодически  создаваться  копии  уровня  9  на
лентах, номера которых подчиняются экспоненциальной прогрес-
сии (12131214...): лента 1  используется каждый второй  раз,
лента 2 используется каждый четвертый раз, лента 3 использу-
ется каждый восьмой раз, и т.д.).

   Когда количество копий уровня  9  приближается  к  полной
ленте (около 78000 блоков при плотности записи 1600 бит/дюйм
(64 бит/мм) и коэффициенте  блокирования  20),  должен  быть
сделан дамп уровня 1:

        # dump 1u

После этого экспоненциальная последовательность должна  про-
должаться   как прежде. Эти копии уровня 9 базируются на ко-
пиях уровня 1, который базируется на полной копии уровня  0.
Эта прогрессия уровней копирования может продолжаться до же-
лаемой глубины.

   Команда restor используется для чтения информации с  маг-
нитных  лент,  полученной  в  результате  выполнения команды
dump. Ключ задает определенный режим работы команды и содер-
жит один из символов Rrxt, возможно, дополненный символом f.
Ключи задают следующие режимы:

f    позволяет определить магнитную ленту  вместо  использу-
     емой по умолчанию. Имя ленты указывается в первом аргу-
     менте;

r или R
     позволяет указывать файловую систему,  в  которую  надо
     помещать  файлы с магнитной ленты. Имя файловой системы
     задается в аргументе. Если указан ключ r (а не R),  ко-
     манда  restor  запрашивает, какую ленту из многотомного
     набора обрабатывать. Это дает возможность прерывать вы-
     полнение  команды  restor и инициировать ее продолжение
     (перед этим необходимо выполнить команду icheck -s);

x    производится выборка каждого файла на ленте, имя  кото-
     рого указано в аргументе. В имени файла отсутствуют все
     префиксы для монтирования, то есть файл /usr/bin/lpr на
     ленте имеет имя /bin/lpr;

t    если указана данная опция, печатается дата, когда  была
     записана  информация  на  ленту, и дата получения копии
     данной файловой системы.

Ключ R используется для восстановления с ленты файловой сис-
темы целиком на чистый диск. Например:

        # /etc/mkfs /dev/rp0 40600
        # restor R /dev/rp0

является типичным применением команды restor.

   Особенностью работы с парой dump/restor является их зави-
симость  от физического расположения дисков, то есть при ра-


62


боте со сменными касетами эффективность их сильно падает.


   4.2. Программа tar


   Программа tar сохраняет и восстанавливает файлы в  архиве
на  магнитной ленте. Режим работы команды определяется с по-
мощью аргумента ключ. Ключ представляет собой один из  приз-
наков  операции  (r,x,t,u или c), и возможно, один или более
ключей-модификаторов. Остальными аргументами команды являют-
ся имена файлов или каталогов, которые должны быть сохранены
или восстановлены.

Tar выполняет следующие операции:

r    Перечисленные файлы дозаписываются в  архив  на  ленте.
     Запись ведется в конец архива.

х    Перечисленные файлы считываются с  ленты.  Если  задано
     имя  каталога,  содержимое  которого  было  записано на
     ленту, считываются файлы из этого каталога  (начинающи-
     еся  с  указанного  имени).  Владелец  и  статус файлов
     восстанавливаются (если это возможно). Если не задается
     ни  одного аргумента "имя", восстанавливаются все файлы
     с ленты. Заметим, что, если на ленте имеется  несколько
     имен, специфицирующих тот же самый файл, то считываются
     все варианты файла и остается последний.

t    Выдаются имена указанных файлов каждый раз,  когда  они
     появляются  на  ленте.  Если аргументы "имя" не заданы,
     выдаются имена всех файлов на ленте.

u    Перечисленные файлы дозаписываются в  архив  на  ленте,
     если  их  там не было или они были модифицированы с мо-
     мента последней записи на ленту;

c    Создает новый архив на ленте. Запись ведется с  начала,
     а не в конец архива.

   Следующие символы модифицируют заданную операцию:

v    При использовании ключа v команда tar печатает имя каж-
     дого  обрабатываемого  файла  и  соответствующую букву-
     функцию. В случае операции t, выдаются не только  имена
     файлов на ленте, но и другая информация.

w    Заставляет команду tar печатать принимаемое к  исполне-
     нию действие, а затем ждать подтверждения пользователя.
     Возможны следующие варианты  ответа:  "y"  -  выполнить
     действие, "n" - пропустить действие, "=имя" - выполнить
     действие без запроса для  всех  файлов,  имена  которых
     совпадают или начинаются с "имя", "#имя" - пропускаются
     файлы, имена которых совпадают или начинаются с "имя".

0 или 1
     Этот модификатор задает лентопротяжный механизм, на ко-
     тором монтируется лента. Эквивалентно -f /dev/mt?.





                                                          63


f    Заставляет команду tar использовать следующий  аргумент
     в  качестве  имени  архива вместо /dev/mt?. Если именем
     файла служит "-", tar пишет в стандартный вывод или чи-
     тает  из  стандартного  ввода. Таким образом, можно ис-
     пользовать tar как начало или окончание  цепи  фильтра.
     Если -01f не заданы, используется сочетание -f $TAPE.

b    Заставляет команду tar использовать следующий  аргумент
     в  качестве коэффициента блокирования записей на ленте.
     По умолчанию он равен 1,  максимальное  значение  равно
     32.  Этот  ключ следует использовать только для архивов
     на магнитной ленте типа /dev/?rmt?.

i    продолжать  работу  при  ошибках   чтения   ленты   или
     контрольной  суммы заголовка, что позволяет, в частнос-
     ти, начинать чтение с середины ленты.  При  ошибке  tar
     ищет следующий заголовок файла и продолжает работу.

l    Провоцирует выдачу сообщений при  невозможности  разре-
     шить все связи восстанавливаемых файлов. Если этот ключ
     не задан, сообщения об ошибках не печатаются.

   Архив на ленте состоит из логических блоков по  512  байт
(возможно,  сблокированных  в более длинные физические запи-
си). Файлы занимают целое число записей, каждому файлу пред-
шествует  логический блок-заголовок. Весь архив записывается
одним физическим файлом на ленте. Дозапись в  сблокированный
архив возможна только при использовании магнитных лент.

   Главным недостатком  программы  tar  является  отсутствие
возможности  работы с корневой файловой структурой и со спе-
циальными файлами. В силу этого  ее  обычно  используют  для
хранения  отдельных  каталогов, а корневую систему сохраняют
другими средствами. Эта программа удобна для индивидуального
хранения своей информации самим пользователем.

Примеры:

сохранить каталог man (полное имя /mnt/man) на чистой  пере-
мотанной в начало ленте:

        user> cd /mnt
        user> tar crbf 20 /dev/rmt2 man

спустя неделю добавить на ленту новые изменения  (такая  ко-
манда работает медленно):

        user> cd /mnt
        user> tar uf /dev/rmt2 man

восстановить потерянный файл man/man1/tar.1 :

        user> cd /mnt/man
        user> tar xf /dev/rmt2 man1/tar.1

восстановить всю информацию с ленты:

        user> cd /mnt
        user> tar xf /dev/rmt2




64


К особенностям программы tar относятся:

   - выдача при чтении и дозаписи коэффициента блокировки;

   - для  выдачи  сообщений  и  списка  файлов  используется
     stderr;

   - при записи на ленту она позиционируется после ленточной
     марки, а при чтении - перед ней.


   4.3. Программы rollin и rollout


   Внесистемная программа  rollin  (и  ее  системная  версия
rollout)  позволяют  создать на магнитной ленте копию образа
диска в некотором специальном формате. Полностью скопирован-
ный на ленту диск можно полностью скопировать обратно. Поло-
жительной чертой программы является простота работы,  а  не-
достатком   -   отсутствие  возможности  восстановить  часть
файлов. Внесистемный вариант программы rollin вызывается на-
чальным  загрузчиком  (смотри раздел "Загрузка ДЕМОС") с по-
мощью команды:

        @mdec/rollin

В ответ появляется сообщение о версии программы и символ го-
товности  "#".  Простейшей  операцией  по сохранению дисков,
например rk0, rk2 и rk4 будет (если  лента  установленна  на
зеркальце):

        # МТ0:DISK0<DK0
        # МТ0:DISK2<DK2
        # МТ0:DISK4<DK2

Обратная процедура имеет вид (например, для диска 4):

        # DK4:/FO<MT0:DISK4/FI




                 5. ВОССТАНОВЛЕНИЕ СИСТЕМЫ


   Восстановление системы существенно зависит от:

   - способа ведения архива;

   - степени разрушения системы;

   - квалификации оператора.

Рассмотрим простые примеры.

   Пусть файловая система имеет вид в соответствии с  рис.2.
Работа  производится с дисками ИЗОТ-1370 и корневая файловая
система расположенна на диске 0, файловая система usr  -  на
диске  2, а su - на диске 3. При ведении копии системы регу-
лярно сохранялись образы дисков 0 и 2 (программой rollin)  и
каталог su (программой tar).


                                                          65


Пример 1.

Машина исправна, но ДЕМОС не вызывается. Поскольку диски 2 и
3 явно не причем (до них дело даже не доходит), то мы посту-
паем простейшим образом: загружаем ленту с  образами  дисков
(rollin  создает  загружаемые ленты) и восстанвливаем диск 0
со старой копии. Все изменения с того  времени,  когда  была
сделана копия, пропадают (расплата за простой способ).

Пример 2.

При загрузке ДЕМОС программа fsck (запущенная из  /.profile)
предложила  перейти  в  "ручной"  режим работы. При работе в
этом режиме часть файлов была уничтожена (как противоречащая
остальной  файловой системе), после чего процессор был оста-
новлен без команды sync.

Теперь возможны два варианта:

1  - загрузка ДЕМОС с такого диска еще возможна. Тогда  надо
     восстановить  образ корневой файловой системы на другой
     диск, например rk1 и смонтируем его куда-нибудь, напри-
     мер на /mnt/tmp:

             # mount /dev/rk1 /mtn/tmp

     Теперь можно восстановить пропавшие при  ремонте  файлы
     (например, /bin/ar и /etc/shut):

             # cp /mnt/tmp/bin/ar /bin/ar
             # cp /mnt/tmp/etc/shut /etc/shut

2  - в ходе творчества пропали некоторые файлы, без  которых
     система  не  сможет  запуститься.  Тогда  опять же надо
     восстановить образ корневой файловой системы на  другой
     диск, например rk1, но теперь с него и загрузить систе-
     му. Смонтировать  rk0  на  /mnt/tmp  и  скопировать  на
     восстановленную  с  ленты  систему новые файлы (которые
     остались на уже не загружаемом диске rk0). Теперь можно
     скопировать  rk1  на rk0, с которого снова можно загру-
     зить систему.

Пример 3.

В каталоге su пропала часть файлов. Поскольку  мы  сохраняли
его  в  формате  tar,  то имеем возможность извлекать только
нужные файлы. Возможные варианты:

   - последняя копия была сделана вчера и с тех пор там  ни-
     чего  не менялось. Проще всего создать на диске 3 новую
     файловую систему (командой  mkfs)  и  восстановить  все
     файлы с ленты.

   - последняя копия была сделана вчера и сегодня утром  был
     набран  еще  один файл. Его на ленте нет. Копируем файл
     на другой диск, повторяем процедуру предыдущего случая,
     а затем копируем новый файл на восстановленный диск.

   - пропал один файл. Копию мы делали давно и на диске  ус-
     пели  многое  изменить.  Для  восстановления копируем с
     ленты на диск только один файл - потерянный.


66





                  6. НАСТРОЙКА ТЕРМИНАЛОВ


   Количество, адреса  и  вектора  терминалов  задаются  при
сборке ядра ДЕМОС, а при изменении их необходима пересборка.
Однако такие проблемы, как изменение типов подключенных тер-
миналов и вообще отключение их решаются на уровне редактиро-
вания некоторых файлов.

Прежде всего сюда входит файл /etc/ttys примерно  следующего
формата:

        10console
        10tty1
        00tty2
        00ttyj0
        10ttyj1
        10ttyj2
        10ttyj3
        00ttyj4

что означает наличие в системе потенциальной возможности ра-
ботать  с  восьмью терминалами, но в настоящее время при за-
пуске требуется работать только с  console,  tty1  и  вообще
только  с  теми,  у  которых  в  первой позиции строки стоит
символ 1 (это и есть приказ системе работать с  терминалом).
Если  вы  захотите  добавить  работу  с  терминалом  tty2  -
исправьте редактором строку на

        10tty2

Кроме признака физического наличия терминала в другом  файле
(/etc/ttytype)  перечисленны типы терминалов, подключенных к
каждой линии. Например:

        vt52c  console
        vdtk   tty1
        vdtk   tty2
        vdt52100r tty7
        el7401  ttyj0
        el15iem ttyj1
        el15ie  ttyj2

   В случае, если терминал tty2 заменят на другой,  например
vt52, третью строку в файле /etc/ttytype надо заменить на

        vt52 tty2

   Возможные  типы  терминалов  можно  посмотреть  в   файле
/etc/termcap.










                                                          67





                 7. ВКЛЮЧЕНИЕ ПОЛЬЗОВАТЕЛЕЙ


   Полный список пользователей системы  содержится  в  файле
/etc/passwd,  известном  под  именем  "файл паролей". Каждая
строка данного файла содержит информацию об одном  пользова-
теле. Типовая строка имеет вид:

name::U:G: информ. о пользователе :home:shell

и состоит из полей (разделенных двоеточием):

name
   - регистрационное имя пользователя (вводится им при входе
     в систему);

поле пароля
   - изначально пустое, заполняется команой passwd;

U  - индивидуальный номер пользователя;

G  - номер группы;

   - поле для комментария;

home
   - каталог, в который пользователь  попадет  при  входе  в
     систему;

shell
   - интерпретатор команд, запускаемый для пользователя  (по
     умолчанию sh).

Например, первые несколько строк типичного файла /etc/passwd
могут содержать:

root:(#оккр:1:1: Serg A. Usikow KIAE :/etc:
bin::2:1::/bin:
sys::4:1: :/sys:
games::6:2: Games :/usr/games:
dump::3:1:system:/usr/adm:/usr/adm/dumper
guest::12:3:  :/guest:


   Как видно, супер-пользователь root имеет номер 1 и входит
в  первую  группу,  куда  входят  еще bin, sys, uucp и dump.
Games и guest имеют другие номера групп. Результатом  этого,
например, будет то, что файл вида

-rw-r----- root 3064 Jul 24 /etc/passwd

будет доступен супер-пользователю по записи и чтению, bin  и
вся  первая группа смогут его лишь прочесть, а games и guest
вообще не имеют к нему доступа. Пользователь с регистрацион-
ным  именем  dump  в  приведенном  примере  является псевдо-
пользователем, который, войдя в  систему,  выполняет  только
программу  /usr/adm/dumper;  когда программа окончит работу,
dump выйдет из системы.


68


   Идентификатор   пользователя   и   идентификатор   группы
представляют  собой  целые числа. Каждый пользователь должен
иметь определенный номер,  идентифицирующий  его;  связанные
между  собой  пользователи  (например,  работающие над одним
проектом)  должны  иметь  одинаковый  идентификатор  группы.
Файлом   идентификаторов   групп,   по   аналогии  с  файлом
/etc/passwd, является файл /etc/group.

   Допустимо появление нескольких регистрационных имен с од-
ним  и  тем  же  номером  пользователя,  но разными номерами
групппы. Это необходимо, если один пользователь работает од-
новременно  над  разными  "проектами", то есть входит в нес-
колько групп.

   Чтобы зарегистрировать в системе нового пользователя, не-
обходимо  просто  добавить  новую строку в файл /etc/passwd.
Новая строка имеет ту же структуру, что и приведенные  выше,
a поле пароля должно оставаться незаполненным. Это указывает
системе ДЕМОС, что пользователь еще не имеет  пароля.  Когда
пользователь  в  первый  раз входит в систему, он может вос-
пользоваться  программой  passwd,  чтобы   установить   свой
пароль.

   Если, как это в основном и бывает, вы  указываете  в  ка-
честве регистрационного каталога нового пользователя еще не-
существующий каталог, необходимо этот каталог создать  преж-
де, чем пользователь войдет в систему. Для этого используйте
команду mkdir, затем замените принадлежность данного катало-
га, установив его владельцем вместо пользователя с регистра-
ционным именем "root" нового пользователя. Пример:

 # mkdir /usr/usernew
 # chown newuser /usr/usernew

   Теперь известным вам редактором  вставьте  в  /etc/passwd
строку:

newuser::10:7: новенький :/usr/usernew:

Можно воспользоваться свойством интерпретатора команд  доза-
писывать информацию в файл. Выглядеть это будет так:

cat >> /etc/passwd
newuser::10:7: новенький :/usr/usernew:
^d


















                                                          69





                  8. РАБОТА СО СТАТИСТИКОЙ



   8.1. Статистика по сеансам работы


   Программa ac генерируют сводку  статистических  данных  о
работе  в системе. Регистрация производится системными прог-
раммами, вызываемыми в момент входа и выхода пользователя из
системы.

   Команда ac имеет формат вызова

ac [-w учфайл] [-р] [-d] [пользователи]...

и выдает продолжительность сеансов всех пользователей, рабо-
тавших во время существования текущего файла "учфайл". Кроме
того, выдается общая сумма времен сенсов.

   Ключ -w используется для  задания  альтернативного  файла
"учфайл", ключ -р выдает индивидуальные суммы времен пользо-
вателей, а ключ -d устанавливает режим  печати  для  каждого
суточного периода. Если указаны пользователи, распечатка вы-
дается только для заданных регистрационных имен.  Если  файл
"учфайл" не задан, используется /usr/adm/wtmp.

   Учетный  файл  /usr/adm/wtmp  поддерживается  программами
init  и  login.  Ни  одна  из этих программ не создает этого
файла, так что если данный файл не существует, учет  времени
подключения  не ведется. Для того,  чтобы начался учет, файл
должен быть создан с длиной, равной 0. С другой стороны, ес-
ли  не  принимать  никаких  мер, этот файл будет безгранично
разрастаться, поэтому из него  нужно  периодически  выбирать
требуемую информацию и усекать его.

























70





                    9. СООБЩЕНИЯ СИСТЕМЫ


   Ядро системы ДЕМОС выводит сообщения об ошибках  на  сис-
темную консоль в случае ошибок обменов при вводе/выводе, пе-
реполнении системных таблиц или ошибок в операционной систе-
ме и т.д. Ниже приводится то подмножество сообщений, реакция
на которые входит в функции оператора. Регулярное  появление
этих ошибок (и появление ошибок с иной диагностикой) требует
вмешательства системного программиста.

Формат сообщений об ошибках обмена имеет вид:

        err on dev M/N
        bn XXXXX er YYYYYY ZZZZZZ

M/N представляет собой старший и младший  номер  устройства,
на  котором  произошел сбой, XXXXX за символами "bn" - номер
блока на устройстве, в котором обнаружилась ошибка, а  числa
за  символами  "er"  - содержимое двух регистров устройства,
(их содержимое зависит от типа устройства).

   Список старших/младших номеров устройств  и  соответству-
ющих  им устройств можно получить с помощью следующей коман-
ды:

        # ls -l /dev | grep "^b"

в результате чего выводится  информация  в  следующей  форме
(некоторые колонки и строки из'яты):

brw-r--r-- 1 bin  4,0  Mar 13 15:13  hk0
brw-r--r-- 1 bin  4,1  Mar 27 12:06  hk1
brw-r--r-- 1 bii  3,0  Apr 10 17:45  rk0
brw-r--r-- 1 btn  3,1  Apr 10 01:27  rk1

Отсюда видно, что 3/0 соответствует диску rk0, а 4/1 - hk1.

   Сообщение  об  отсутствии  свободного   пространства   на
устройстве M/N имеет форму:

        no space on M/N

и указывает на то, что  свободное  пространство  в  файловой
системе на запрашиваемом устройстве отсутствует. Пользовате-
ли могут потерять часть своих файлов, когда, например, будут
пытаться  записать  их после редактирования. Лучше всего ис-
пользовать команду /etc/wall и послать предупреждающее сооб-
щение  всем пользователям о том, что они не должны создавать
и копировать файлы в данную файловую систему.

   Сообщение об отсутствии индексных узлов (файловая система
ДЕМОС в данном документе не рассматривается - есть такие уз-
лы и все) на устройстве M/N имеет форму:

        out of inodes on M/N

и указывает на то, что свободное пространство в  списке  ин-


                                                          71


дексных  узлов исчерпано. Комментарии, приведенные к сообще-
нию "no space" полностью применимы к данному сообщению.

   Сообщение об отсутствии возможности  открыть  файл  имеет
форму:

        no file

и указывает на то, что программа пыталась открыть файл, но в
системной  таблице  "открытия  файла"  для  него  не хватает
места.  Лучше  всего  предупредить  пользователей   командой
/etc/wall, а если ошибка повторяется, обратиться к системно-
му программисту.

   Сообщение о переполнении таблицы  индексных  узлов  имеет
форму:

        inoude  table overflow

и указывает на то, что программа пыталась использовать файл,
но в системной таблице "индексных узлов" в оперативной памя-
ти не хватает места для размещения его. И в  данном  случае,
если  ошибка повторяется, предупредите пользователей и обра-
титесь к системному программисту.

   Сообщение о серьезной аппаратной или  программной  ошибке
имеет форму:

        panic: причина

и указывает на то, что произошла очень  серьезная  ошибка  и
операционная  система  не может продолжать функционирование.
Необходимо остановить машину (скорее всего она сама  остано-
вится)  и запомнить причину ошибки. Возможными причинами яв-
ляются:

out of swap space
   - исчерпано свободное пространство диска, выделенное  под
     область обмена для свопинга программ из основной памяти
     на диск.

out of text
   - система пыталась выполнить программу,  чей  выполняемый
     набор  кодов  мог  совместно обрабатываться несколькими
     пользователями, использующими эту программу, но в  сис-
     темной таблице "совместно используемого текста" не ока-
     залось  места,  чтобы  зарегистрировать   использование
     данной программы.

swap error
   - произошла ошибка ввода/вывода в процессе свопинга прог-
     раммы  в  область  обмена  или в основную память. Перед
     этим сообщением на системной консоли  должно  появиться
     сообщение  об ошибке ввода/вывода. Если ошибка повторя-
     ется вновь и вновь, необходимо проверить дисководы.

parity
   - имеет место ошибка четности в основной памяти - явление
     чисто аппаратное.




72


(other)
   - сообщение "panic:  (other)"  указывает  либо  на  прог-
     раммную ошибку в операционной системе, либо на аппарат-
     ный сбой.



























































                                                          73


                           СОДЕРЖАНИЕ



ВВЕДЕНИЕ...............................................    3

1.  БАЗОВЫЕ ПОНЯТИЯ....................................    5
    1.1. Работа с терминалом...........................    5
    1.2. Выполнение команд.............................    8
    1.3. Файловая система..............................   11
    1.4. Сокращенные имена файлов......................   15
    1.5. Подключение дисков............................   16
    1.6. Переопределение ввода и вывода................   17
    1.7. Метасимвол *..................................   18
    1.8. Строки интерпретатора.........................   19
    1.9. Привелегированные пользователи................   20
    1.10.Процессы......................................   21
    1.11.Актуализация дисковой памяти..................   23
    1.12.Файлы команд..................................   24
    1.13.Регистрационный каталог - шаблоны входа.......   25

2.  МИНИМАЛЬНЫЙ НАБОР КОМАНД...........................   26
    2.1. Выдать аргументы..............................   26
    2.2. Печать или установка даты.....................   26
    2.3. Установить параметры терминала................   27
    2.4. Блокировать терминал..........................   29
    2.5. Печать на АЦПУ................................   29
    2.6. Стандартный редактор текстов..................   29
    2.7. Экранный редактор текстов.....................   31
    2.8. Сравнение двух файлов.........................   34
    2.9. Сравнение файлов и каталогов..................   34
    2.10.Кто работает в системе........................   35
    2.11.Передача и прием почты между пользователями...   35
    2.12.Получение сообщений о системе.................   37
    2.13.Сообщение для всех пользвателей...............   38
    2.14.Передача сообщения другому пользователю.......   38
    2.15.Сменить код защиты............................   39
    2.16.Сменить владельца файла.......................   40
    2.17.Создание каталогов............................   40
    2.18.Удаление файлов...............................   40
    2.19.Контроль дисков...............................   41
    2.20.Контроль файловой системы.....................   41
    2.21.Создать на диске файловую систему.............   42
    2.22.Контроль и подключение файловой системы.......   42
    2.23.Копирование файлов............................   44
    2.24.Переместить файл..............................   44
    2.25.Преобразование и копирование..................   45
    2.26.Свободное пространство на диске...............   46
    2.27.Определить тип файла..........................   47
    2.28.Поиск файлов..................................   47
    2.29.Создание альтернативных имен..................   49
    2.30.Распечатать содержимое каталога...............   50

3.  ЗАГРУЗКА ДЕМОС.....................................   52
    3.1. Действия оператора............................   52
    3.2. Шаблоны загрузки..............................   55
    3.3. Возможные сбои................................   58
    3.4. Тестирование ЭВМ..............................   59

4.  ВЕДЕНИЕ КОПИИ СИСТЕМЫ..............................   61
    4.1. Программы dump и restor.......................   61


74


    4.2. Программа tar.................................   63
    4.3. Программы rollin и rollout....................   65

5.  ВОССТАНОВЛЕНИЕ СИСТЕМЫ.............................   65

6.  НАСТРОЙКА ТЕРМИНАЛОВ...............................   67

7.  ВКЛЮЧЕНИЕ ПОЛЬЗОВАТЕЛЕЙ............................   68

8.  РАБОТА СО СТАТИСТИКОЙ..............................   70
    8.1. Статистика по сеансам работы..................   70

9.  СООБЩЕНИЯ СИСТЕМЫ..................................   71


















































                                                          75


