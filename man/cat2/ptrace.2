
PTRACE(2)         ДЕМОС. Системные вызовы          PTRACE(2)


ИИММЯЯ
       ppttrraaccee - трассировка процесса.

ФФООРРММААТТ
       #iinncclluuddee <_s_i_g_n_a_l._h>

       ppttrraaccee (_r_e_q_u_e_s_t, _p_i_d, _a_d_d_r, _d_a_t_a)
       iinntt **_a_d_d_r, _r_e_q_u_e_s_t, _p_i_d, _d_a_t_a

ООППИИССААННИИЕЕ
       Системный вызов ppttrraaccee  позволяет  текущему  процессу
       управлять  выполнением порожденного процесса, а также
       изучать и изменять его образ памяти.  Основным назна-
       чением  ppttrraaccee является реализация пошаговой отладки.
       Используются четыре аргумента, интерпретация  которых
       зависит  от  аргумента  _r_e_q_u_e_s_t.  Обычно _p_i_d является
       идентификатором трассируемого процесса, который явля-
       ется прямым потомком трассирующего процесса.  Трасси-
       руемый процесс ведет себя как обычно, пока не  встре-
       чает  некоторый  сигнал,  который  либо  генерируется
       внутренне, подобно "неправильной команде", либо  пос-
       тупает  извне,  например,  _с_и_г_н_а_л  (см.   _s_i_g_n_a_l(2)).
       Затем трассируемый процесс останавливается,  а  поро-
       дивший  его извещается об этом посредством системного
       вызова _w_a_i_t(2).  Когда порожденный процесс  находится
       в  остановленном  состоянии,  с  помощью ppttrraaccee можно
       изучать и модифицировать его память.  В случае  необ-
       ходимости  можно  с  помощью  другого  запроса ppttrraaccee
       завершить или продолжить выполнение порождаемого про-
       цесса, возможно, игнорируя сигнал.

       Значение аргумента  _r_e_q_u_e_s_t  задает  тип  выполняемой
       операции:

       0    Это единственный  запрос,  который  используется
            порожденным  процессом.  Он объявляет о том, что
            этот процесс будет трассироваться породившим его
            процессом.   Все  остальные  аргументы игнориру-
            ются.  Если  при  этом  порождающий  процесс  не
            собирается   трассировать  порожденный  процесс,
            можно получить удивительные результаты.

       1,2  Возвращается слово с  адресом  _a_d_d_r  в  адресном
            пространстве    порожденного   процесса.    Если
            используется  аппаратное   разделение   адресных
            простанств  команд  и данных, то запрос 1 указы-
            вает на сегмент команд, а запрос 2 - на  сегмент
            данных.   Параметр  _a_d_d_r должен быть четным чис-
            лом. Порожденный процесс должен быть остановлен.
            Аргумент _d_a_t_a игнорируется.

       3    Возвращается слово  _a_d_d_r  из  системной  области
            данных, описывающей этот процесс.  Аргумент _a_d_d_r
            должен быть четным и не превосходить  512.   Это
            поле  содержит  регистры  и  другую информацию о
            процессе  и  по  форме  соответствует  системной
            структуре UUSSEERR.



                            -1-                     ДЕМОС/PV


PTRACE(2)         ДЕМОС. Системные вызовы          PTRACE(2)


       4,5  Данные, определенные в параметре _d_a_t_a, записыва-
            ются  в  адресное поле процесса, соответствующее
            аргументу _a_d_d_r, который должен иметь четное зна-
            чение.  Никакой полезной информации не возвраща-
            ется. Если адресные поля команд и данных  разде-
            ляются, то запрос 4 указывает на сегмент команд,
            а запрос 5 - на сегмент данных.  Попытка измене-
            ния  команд  реентерабельной  программы окажется
            неудачной, если она обслуживает  несколько  про-
            цессов.

       6    Запись в структуру UUSSEERR процесса.  Таким  спосо-
            бом можно записать только несколько ячеек: общие
            регистры, статус и регистры  процессора  вещест-
            венной  арифметики, некоторые биты слова состоя-
            ния процессора и номер оверлейного сегмента.

       7    Аргумент _d_a_t_a считается номером сигнала.  Выпол-
            нение   порождаемого   процесса  продолжается  с
            адреса _a_d_d_r, как будто  этот  процесс  подвергся
            воздействию  этого сигнала.  Обычно номером сиг-
            нала является либо  0  (указывающий,  что  нужно
            игнорировать сигнал, который привел к останову),
            либо значение, получаемое из образа памяти  про-
            цесса,  которое  указывает  на  то, какой сигнал
            привел к останову. Если _a_d_d_r представляет  собой
            константу (iinntt **)1, то выполнение продолжается с
            того места, где оно было остановлено.

       8    Завершение выполнения трассируемого процесса.

       9    Выполнение продолжается, как и в случае  запроса
            7.  Однако после выполнения одной команды выпол-
            нение процесса вновь приостанавливается. Номером
            сигнала,  вырабатываемого в результате останова,
            является SSIIGGTTRRAAPP.

       Как указано, эти вызовы (за  исключением  запроса  0)
       можно  использовать только тогда, когда процесс, под-
       вергаемый трассировке,  остановлен.  Для  определения
       момента  остановки  процесса  используется  системный
       вызов wwaaiitt; в таком случае статус "завершения", возв-
       ращаемый wwaaiitt, имеет значение 0177, которое указывает
       на остановку, а не на настоящее завершение.

       Для предупреждения возможного обмана ppttrraaccee запрещает
       использование  в  последующих  вызовах eexxeeccvvee возмож-
       ности sseett--UUIIDD.  Если трассируемый процесс  использует
       eexxeeccee,  он остановится перед выполнением первой инст-
       рукции новой программы и выдаст сигнал SSIIGGTTRRAAPP.

ДДООППООЛЛННИИТТЕЕЛЛЬЬННЫЫЕЕ ССССЫЫЛЛККИИ
       _w_a_i_t(2), _s_i_g_n_a_l(2), _a_d_b(1), _e_x_e_c_v_e(2)

ЗЗННААЧЧЕЕННИИЕЕ
       При успешном завершении возвращается значение 0.  При
       ошибке  выдается  -1, код ошибки записывается в пере-
       менную eerrrrnnoo.


                            -2-                     ДЕМОС/PV


PTRACE(2)         ДЕМОС. Системные вызовы          PTRACE(2)


ККООДДЫЫ ООШШИИББООКК
       Переменная eerrrrnnoo может принимать следующие значения:

       [EEIINNVVAALL]    Недопустимое значение параметра _r_e_q_u_e_s_t.

       [EEIINNVVAALL]    Указанный процесс не существует.

       [EEIINNVVAALL]    Задан несуществующий номер сигнала.

       [EEFFAAUULLTT]    Указан несуществующий адрес.

       [EEPPEERRMM]     Указанный  процесс  не  может   трассиро-
                   ваться.

ЗЗААММЕЕЧЧААННИИЯЯ
       Запрос 0 должен был бы обеспечить указание  сигналов,
       которые  обрабатываются  нормально  и  не  приводят к
       останову.  В этом  случае  можно  было  бы  корректно
       отлаживать  программы,  использующие библиотеку прог-
       рамм эмуляции действительной арифметики.

       Значение -1 для данного вызова является  вполне  нор-
       мальным, для разрешения неоднозначности нужно исполь-
       зовать переменную eerrrrnnoo.

       Полезно ввести режим трассировки системных вызовов.


































                            -3-                     ДЕМОС/PV

