head     1.1;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.1
date     88.12.12.20.42.42;  author abs;  state Exp;
branches ;
next     ;


desc
@
преобразование формата каталогов.
@



1.1
log
@Initial revision
@
text
@/* Преобразование формата каталогов к новому/старому виду.
 * Сделано из программы dump.
 */

#include <ediag.h>
#include <whoami.h>
extern int  errno;
#define NI      4
#define DIRPB   (BSIZE/sizeof(struct direct))

#include <stdio.h>
#include <sys/param.h>
#include <sys/inode.h>
#include <sys/ino.h>
#include <sys/filsys.h>
#include <sys/file.h>
#include <dumprestor.h>
#include <stat.h>

#define IPK_DIRECTORY
#include <sys/dir.h>

struct filsys   sblock;         /* суперблок диска */
struct dinode   itab[INOPB * NI];
short   allocmap[MSIZ];         /* bitmap отведенных I-узлов */
short   dirmap[MSIZ];           /* I-узлы каталогов  */
short   symlinkmap[MSIZ];       /* I-узлы symlink-ов */
int     fi;                     /* файл-диск */
ino_t ino;                      /* текущий обрабатываемый I-узел */
ino_t mino;                     /* число I-узлов в FS */
int     counter;
int     nullf () {}             /* ничего не делающая функция */
long    direntries;             /* число входов в каталоге */
long    scanned;                /* из них просмотрено */

int     dirs,
	links,
	allo;

int     writeyes;               /* проверять и исправлять    */
int     back;                   /* стереть всем поле d_class */
int     verbose;                /* сообщать о сделанных преобразованиях */
int     total;                  /* Выдавать тотальную статистику        */
long    wrote;                  /* Число записей на диск */

report (s) char *s;
{
    static char    d[DIRSIZ + 1];

    strncpy (d, s, DIRSIZ);
    fprintf (stderr, "\"%s\" (каталог I=%-4d, слот %-3ld)\n",
	    d, ino, scanned);
}

allocated (ip) struct dinode   *ip;
{
    register    f;

    f = ip -> di_mode & IFMT;
    if (f == 0)
	return;                 /* not allocated */

    BIS (ino, allocmap);
    allo++;

    if (f == IFLNK) {
	links++;
	BIS (ino, symlinkmap);
    }
    else
	if (f == IFDIR) {
	    dirs++;
	    BIS (ino, dirmap);
	}
}

/* обработать блок каталога */
dopatch (b) daddr_t b;
{
    register    i;
    struct direct   dblk[DIRPB];
    int     changed = 0;
    register    ino_t in;
    short   class;

    if (scanned >= direntries) {
	fprintf (stderr, "Число блоков больше, чем указано в di_size\n");
	return;
    }

    bread (b, (char *) dblk, sizeof (dblk));
    for (i = 0; i < DIRPB; i++, scanned++) {
	if (scanned >= direntries)
	    continue;

	in = dblk[i].d_ino;
	class = dblk[i].d_class;

    /* затирание класса */
	if (back) {
	    if (class) {
		counter++;
		dblk[i].d_class = 0;
		changed++;
		if (verbose) {
		    fprintf (stderr, "Затерт класс у ");
		    report (dblk[i].d_name);
		}
	    }
	    continue;
	}

    /* простановка класса */
	if (in == 0) {
	    if (class) {
		fprintf (stderr, "d_class=%d, a d_ino=0. Класс очищен ", class);
		report (dblk[i].d_name);
		dblk[i].d_class = 0;
		counter++;
		changed++;
	    }
	    continue;
	}

	if (BIT (in, dirmap)) {
	    if (class != DIR_IFDIR) {
		if (verbose) {
		    fprintf (stderr, "Класс DIR у ");
		    report (dblk[i].d_name);
		}
		dblk[i].d_class = DIR_IFDIR;
		counter++;
		changed++;
	    }
	    continue;
	}
	if (BIT (in, symlinkmap)) {
	    if (class != DIR_IFLNK) {
		if (verbose) {
		    fprintf (stderr, "Класс LNK у ");
		    report (dblk[i].d_name);
		}
		dblk[i].d_class = DIR_IFLNK;
		counter++;
		changed++;
	    }
	    continue;
	}
	if (BIT (in, allocmap)) {
	    if (class != DIR_IFREG) {
		if (verbose) {
		    fprintf (stderr, "Класс REG у ");
		    report (dblk[i].d_name);
		}
		dblk[i].d_class = DIR_IFREG;
		counter++;
		changed++;
	    }
	    continue;
	}

	fprintf (stderr, "I-узел %u не отведен, но числится в каталоге. d_ino очищен. ", in);
	report( dblk[i].d_name );

	dblk[i].d_ino   = 0;
	dblk[i].d_class = 0;
	counter++;
	changed++;
    }

    if (changed ){
	wrote++;
	if( writeyes) bwrite (b, (char *) dblk, sizeof (dblk));
    }
}

patch (ip) struct dinode   *ip;
{
 /* обработать каталоги */

    if (!BIT (ino, dirmap)) {
	fprintf (stderr, "промах pass\n");
	return;
    }

    direntries = ip -> di_size / sizeof (struct direct);
    scanned = 0l;

    icat (ip, dopatch, nullf);
}

main (argc, argv)
int     argc;
char   *argv[];
{
    struct stat st;

    while (*argv[1] == '-') {
	switch (argv[1][1]) {
	    case 'w':
		writeyes++;
		break;
	    case 'b':
		back++;
		break;
	    case 'v':
		verbose++;
		total++;
		break;
	    case 't':
		total++;
		break;
	    default:
		fprintf (stderr, "Неизвестный флаг %s\n", argv[1]);
		break;
	}
	argv++;
	argc--;
    }

    if( argc == 1 ){
	fprintf( stderr, "=====  ПРОГРАММА ПРЕОБРАЗОВАНИЯ ФОРМАТА КАТАЛОГОВ  =====\n");
	fprintf( stderr, "Вызов: dircnv    [-t] [-v] [-w] FS1 ... FSn для прямого преобразования.\n");
	fprintf( stderr, "       dircnv -b [-t] [-v] [-w] FS1 ... FSn для обратного.\n");
	fprintf( stderr, "       -v  -  выдавать сообщения о сделанных изменениях.\n");
	fprintf( stderr, "       -t  -  выдать глобальную статистику.\n");
	fprintf( stderr, "       -w  -  записывать изменения на диск.\n");

	exit( 2 );
    }

    while (argc > 1) {

	fprintf (stderr, "*** %s\n", argv[1]);

	stat( argv[1] , &st );
	if( (st.st_mode & S_IFMT) == S_IFCHR )
		fprintf( stderr, "Предупреждение: %s - символьное устройство.\n", argv[1]);
	else if( (st.st_mode & S_IFMT) != S_IFBLK ){
		fprintf( stderr, "%s - не блочное устройство.\n", argv[1]);
		goto NEXT;
	}

	counter = 0;
	allo = dirs = links = 0;
	wrote = 0l;

	fi = open (argv[1], 2);
	if (fi < 0) {
	    fprintf (stderr, "%s: %s\n", argv[1],
		    ediag ("Can not open R/W",
			"Не могу открыть для R/W"));
	    fi = open (argv[1], 0);
	    writeyes = 0;
	    if (fi < 0) {
		fprintf (stderr, "Не могу даже читать.\n");
		goto NEXT;
	    }
	}

	CLR (allocmap);
	CLR (dirmap);
	CLR (symlinkmap);

	fprintf (stderr, "I\tразметка I-узлов.\n");
	pass (allocated, (short *) NULL);

	fprintf (stderr, "II\tпросмотр каталогов.\n");
	pass (patch, dirmap);
	close (fi);

	if (counter)
	    fprintf (stderr,
		    "Изменено поле d_class у %d файлов.\n", counter);
	if (total){
	    fprintf (stderr, "*** Занято %d из %d I-узлов, из них: %d каталогов, %d symlink-ов\n",
		    allo, mino, dirs, links);
	    if( wrote )
		    fprintf (stderr, "*** %s записано %ld блоков.\n",
			 writeyes ? "Было" : "Должно быть" , wrote );
	}

NEXT:
	fprintf( stderr, "\n" );
	argv++;
	argc--;
    }
    sync();
    exit (0);

}

/* Просмотр всех I-узлов диска. Чтение их осуществляется кусками по NI блоков.
 * Каждый узел (числящийся в bitmap-е map, а если map==NULL, то ВСЕ)
 * обрабатывается функцией fn.
 */
pass (fn, map)
int     (*fn) ();
short  *map;
{
    register    i,
		j;
    int     bits;
    daddr_t d;

    sync ();
    bread ((daddr_t) 1, (char *) & sblock, sizeof (sblock));
    mino = (sblock.s_isize - 2) * INOPB;
 /* число I-узлов в файл. системе */

    ino = 0;
    for (i = 2;; i += NI) {
	if (ino >= mino)
	    break;
	d = (unsigned) i;
	for (j = 0; j < INOPB * NI; j++) {
	    if (ino >= mino)
		break;
	    if ((ino % MLEN) == 0) {
		bits = ~0;
		if (map != NULL)
		    bits = *map++;
	    }
	    ino++;
	    if (bits & 1) {
		if (d != 0) {
		    bread (d, (char *) itab, sizeof (itab));
		    d = 0;
		}
		(*fn) (&itab[j]);
	    }
	    bits >>= 1;
	}
    }
}

/* Обработка всех блоков файла, задаваемого узлом ip.
 * Для блоков данных вызывается сначала функция fn2
 * (для формирования адресной записи),
 * затем для каждого блока - fn1.
 */
icat (ip, fn1, fn2)
struct dinode  *ip;
int     (*fn1) (), (*fn2) ();
{
    register    i;
    daddr_t d[NADDR];

    l3tol (&d[0], &ip -> di_addr[0], NADDR);
    (*fn2) (d, NADDR - 3);
    for (i = 0; i < NADDR; i++) {
	if (d[i] != 0) {
	    if (i < NADDR - 3)
		(*fn1) (d[i]);
	    else
		indir (d[i], fn1, fn2, i - (NADDR - 3));
	}
    }
}

/* Рекурсивная часть алгоритма icat, вызываемая для косвенных
 * блоков. fn1 и fn2 сохраняют свой смысл -
 * fn2 - формирует адреса в header-е spcl,
 * fn1 - обрабатывает блоки с данными
 */
indir (d, fn1, fn2, n)
daddr_t d;
int     (*fn1) (), (*fn2) ();
{
    register    i;
    daddr_t idblk[NINDIR];

    bread (d, (char *) idblk, sizeof (idblk));
    if (n <= 0) {
	spcl.c_type = TS_ADDR;
	(*fn2) (idblk, NINDIR);
	for (i = 0; i < NINDIR; i++) {
	    d = idblk[i];
	    if (d != 0)
		(*fn1) (d);
	}
    }
    else {
	n--;
	for (i = 0; i < NINDIR; i++) {
	    d = idblk[i];
	    if (d != 0)
		indir (d, fn1, fn2, n);
	}
    }
}

bread (da, ba, c)
daddr_t da;
char   *ba;
{
    register    n;

#ifndef UCB_NKB
    lseek (fi, da * 512, FSEEK_ABSOLUTE);
#else
    lseek (fi, da * BSIZE, FSEEK_ABSOLUTE);
#endif
    n = read (fi, ba, c);
    if (n != c) {
	fprintf (stderr, ediag ("asked %d; got %d\n", "читали %d; получили %d\n"), c, n);
	fprintf (stderr, ediag ("**** block=%ld, errno=%d\n", "**** блок=%ld, код ошибки=%d\n"), da, errno);
    }
}

bwrite (da, ba, c)
daddr_t da;
char   *ba;
{
    register    n;

#ifndef UCB_NKB
    lseek (fi, da * 512, FSEEK_ABSOLUTE);
#else
    lseek (fi, da * BSIZE, FSEEK_ABSOLUTE);
#endif
    n = write (fi, ba, c);
    if (n != c) {
	fprintf (stderr, ediag ("**** write block=%ld, errno=%d\n", "**** запись блока=%ld, код ошибки=%d\n"), da, errno);
    }
}

/* зачистить шкалу */
CLR (map)
register short *map;
{
    register    n;

    n = MSIZ;
    do
	*map++ = 0;
    while (--n);
}
@
