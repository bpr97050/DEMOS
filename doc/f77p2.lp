
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







                         ФОРТРАН-77
                  РУКОВОДСТВО ПРОГРАММИСТА







                  Руднев Алексей Петрович












                       МОСКВА - 1985








                                                           1


      В  документе  рассматриваeтся   компилятор   с   языка
Фортран-77  операционной  системы  ДЕМОС.  Данный компилятор
обеспечивает трансляцию программ с полного языка Фортран-77,
совместимость  с программами на Си и работу с файлами ОС ДЕ-
МОС.

      Описывается  вызов   компилятора,   расширения   языка
Фортран-77,  интерфейс  с программами на других языках, фор-
маты файлов.























































                                                           1


     ВВЕДЕНИЕ


      Описанная в  данном  документе  версия  компилятора  с
языка  Фортран-77  работает  под управлением ОС ДЕМОС на ЭВМ
СМ-4  и  Электроника-79  (и  совместимых  с  ними  ЭВМ).  На
Электронике-79  реализован  практически полный язык Фортран-
77, на СМ-4 и совместимых с ней ЭВМ имеются некоторые  огра-
ничения,  в  основном  касающиеся  использования  операций с
комплексными числами. Язык несколько расширен  как  с  целью
обеспечить совместимость с некоторыми распространенными диа-
лектами Фортрана-4, так и для расширения возможностей языка.

      Компилятор использует при работе второй проход и опти-
мизатор  от  компилятора  с  языка  Си. Библиотека служебных
программ Фортрана-77 широко использует стандартные  средства
ввода/вывода языка Си (из библиотеки стандартных программ на
Си), и другие служебные программы. В результате программы на
Си  и  Фортране-77  могут  загружаться и использоваться сов-
местно, из программ на Си можно вызывать программы на  Форт-
ране,  и наоборот.  Обеспечивается также возможность исполь-
зовать для отладки программ на Фортране  программы  "adb"  и
"cdeb",  которые  первоначально предназначались для работы с
программами на Си. Отладчик "cdeb" специально  модифицирован
для  использования  с программами на Фортране-77, что позво-
ляет вести отладку в терминах  языка  Фортран  (не  указывая
типы  переменных, принадлежность переменных к общей памяти и
т.п.).

      Данный документ является руководством по компилятору с
языка  Фортран-77  ОС ДЕМОС, а также описывает отличия языка
от стандартного Фортрана-77, интерфейс с программами на Си и
с  ОС ДЕМОС, форматы файлов.  В приложении приведены отличия
Фортрана-77 от Фортрана-66 (ISO/P 1539-72).   Предполагается
знание  пользователем  языка  Фортран-77  [1]  или  хотя  бы
Фортран-66 [2]. Подробное описание входного языка имеется  в
руководстве "ОС ДЕМОС. Описание языка Фортран-77" [3].

      Особенностью первой версии компилятора  с  Фортрана-77
является то, что для обработки плавающих чисел он всегда ге-
нерирует команды процессора плавающих чисел ("FPP"), так же,
как  и компилятор с языка Си.  На машинах, не имеющих такого
процессора (СМ-4, Электроника 100/25) эти команды  интерпре-
тируются программно, что приводит к значительному увеличению
времени счета программ.


















2




             1. ВЫЗОВ КОМПИЛЯТОРА С ФОРТРАНА-77


      Вызов компилятора с Фортрана-77  осуществляется с  по-
мощью команды:

        f77 flags file...

"f77" - команда для компиляции и загрузки программ, написан-
ных  на языках Фортран-77, Ратфор, EFL, Си, Ассемблер. Прог-
раммы на Фортране  обрабатываются  компилятором  Фортран-77,
для  трансляции  с языков Ратфор и EFL вызываются препроцес-
соры с соответствующих языков на язык Фортран, программы  на
Си и ассемблере передаются программе "cc".  Об'ектные модули
загружаются загрузчиком "ld" с использованием библиотек слу-
жебных  программ  на Фортране и стандартной библиотеки прог-
рамм на Си.

П_Р_И_М_Е_Ч_А_Н_И_Е.
     Препроцессоры RATFOR и EFL не входят в состав  компиля-
     тора  Фортран-77,  а являются независимыми компонентами
     ОС ДЕМОС.

      Команда "f77" распознает следующие параметры:

     Параметры, имена которых заканчиваются на ".f",  счита-
     ются  исходными  программами  на  языке Фортран-77; они
     компилируются, и каждая об'ектная программа  помещается
     в файл текущего справочника под именем, которое получа-
     ется из имени исходного  файла  путем  замены  ".f"  на
     ".o".   При этом каждый файл с суффиксом ".f" может со-
     держать несколько программных единиц, которые  трансли-
     руются в единый об'ектный файл.  В совместно транслиру-
     емых программных единицах должны быть согласованы  раз-
     меры  общих блоков, в противном случае выдается предуп-
     редительная  диагностика,  и  правильность   полученной
     программы не гарантируется.

     Параметры, имена  которых  заканчиваются  на  ".r"  или
     ".e",  считаются  именами  файлов,  содержащих исходные
     программы на языках RATFOR или EFL соответственно;  они
     сперва  преобразуются соответствующим препроцессором, а
     затем компилируются с помощью f77;

     Аналогично, параметры, имена которых  заканчиваются  на
     ".c" или ".s", считаются исходными программами на языке
     Си или ассемблере; они  компилируются,  создавая  файлы
     ".o".

      Приведенные ниже ключи имеют то же самое значение, что
и  в  команде cc. Описание ключей, задающих режимы загрузки,
содержится в руководстве программиста (команда ld(1)):

-c   Подавляет загрузку и создает файл ".o" для каждого  ис-
     ходного файла;

-d   Компилятор формирует дополнительные команды и  информа-
     цию в таблице имен об'ектного файла для символьного от-
     ладчика "cdeb".


                                                           3

-p   Подготовить об'ектные файлы для профилирования (см. ко-
     манду prof(1));

-O   Вызвать оптимизатор об'ектного кода;

-S   Скомпилировать указанные программы на язык ассемблер  и
     оставить  ассемблерный текст в соответствующих файлах с
     суффиксами ".s". (файлы ".o" не создаются);

-f   Использовать интерпретатор плавающей запятой (на  маши-
     нах  СМ-4  и Электроника-125), кроме того, подключается
     вариант компилятора, который может работать на  машинах
     без процессора плавающей запятой.

-o вывод
     Присваивает выходному файлу  редактора  связей  ld  имя
     "вывод" вместо "a.out";

      Следующие ключи являются специфическими для f77:

-onetrip
     Компилирует циклы "do", которые выполняются по  крайней
     мере один раз. (В Фортране-77 цикл "do" может не выпол-
     ниться ни разу, если верхняя граница  переменной  цикла
     меньше, чем нижняя);

-u   Устанавливает тип неопределенных переменных "undefined"
     вместо использования стандартных правил языка Фортран;

-C   Генерирует  код  для  контроля  индексов  на  выход  за
     об'явленные  границы  массива  (этой  возможности нет в
     версии для СМ-4);

-w   Подавляет все предупредительные  сообщения.  Если  этот
     ключ  имеет  вид "-w66", подавляются только предупреди-
     тельные сообщения о конструкциях,  допустимых  в  языке
     Фортран-66.

-U   По умолчанию прописные буквы в идентификаторах и в клю-
     чевых  словах  переводятся в строчные. Ключ "-U" блоки-
     рует  перевод,  что  позволяет  различать  прописные  и
     строчные буквы в идентификаторах. Ключевые слова в этом
     случае записываются строчными  буквами.

-O<цифра>
     Разрешить вынесение переменных  циклов  на  регистры  с
     целью оптимизации.  Одновременно включается режим "-O".
     <цифра> определяет число регистров: 1 или 2.

-I2

-I4

-Is  Флаги влияют на размер целых переменных: флаг "-I2" ус-
     танавливает  тип  "integer"  эквивалентным "integer*2",
     "-I4" - "integer*4".  По умолчанию установлен режим  "-
     I4"  (в  соответствии  со  стандартом  переменные типов
     "logical", "integer" и "real" должны занимать  одинако-
     вую  память).   Режим "-Is" разрешает компилятору в ре-
     жиме "-I4" вычислять индексы в предположении,  что  они
     находятся в диапазоне чисел типа "integer*2" (не реали-
     зовано на СМ-4).


4

-v   В этом режиме компилятор сообшает об  начале  очередных
     этапов  трансляции (F77PASS, PASS1, AS, LD, C), а также
     выдает версию компилятора.

-T<символ><имя-компоненты>
     Заменить  указанный  проход  компилятора  на  указанную
     программу.  Служит  для  отладки компилятора или вызова
     других его версий. <символ> обозначает следующие компо-
     ненты транслятора:
      "0" - f77 проход 0;
      "1" - f77 проход 1;
      "2" - c1 (си-компилятор, проход 1);
      "o" - c2 (оптимизатор кода);
      "a" - as (ассемблер);
      "l" - ld (редактора связей);
      "f" - головной раздел (вместо /lib/crt0);
      "m" - макропроцессор m4.  Следует иметь    ввиду,  что
     флаг "-f" переназначает компоненты "1" и "f".

-F   Обработать соответствующие файлы препроцессорами RATFOR
     и  EFL, поместить результат в файл с суффиксом ".f", но
     не компилировать результат;

-m   Применить к каждому файлу ".r"  или  ".e"  препроцессор
     "m4" перед обработкой его препроцессорами RATFOR и EFL;

-ex  Использовать строку "x" как ключ для EFL при  обработке
     файлов ".e";

-rx  При обработке  файлов  с  суффиксом  ".r"  использовать
     строку "x" как ключ для препроцессора RATFOR.

      Прочие параметры считаются  либо  ключами  загрузчика,
либо об'ектными программами, совместимыми с f77, либо библи-
отеками программ.  Эти программы, вместе с результатами ука-
занных  компиляций, загружаются (в заданном порядке) для по-
лучения выполняемой программы с именем "a.out".



























                                                           5




                    2. РАСШИРЕНИЯ ЯЗЫКА



      Фортран-77 является расширением языка Фортран-66  (из-
вестного  под названием "Фортран") и включает его в качестве
подмножества с некоторыми ограничениями.  В приложении  дано
отличие двух этих языков.

      Наиболее  важными  расширениями  языка,  введенными  в
Фортране-77,  являются: символьный тип данных, символические
константы, ввод/вывод по свободному  формату,  ввод/вывод  с
прямым доступом.

      Фортран-77 ОС ДЕМОС содержит также некоторые  расшире-
ния,  описанные в этом разделе. Введенные  расширения облег-
чают интерфейс с Си-программами,  улучшают  совместимость  с
Фортраном-66, и позволяют лучше использовать возможности ЭВМ
и  ОС ДЕМОС.


   2.1. Формат исходного текста


      Стандартная строка исходного файла состоит из 72 пози-
ций, первые 5 символов содержат метку оператора или пробелы,
следующий - символ продолжения, а следующие  66 символов со-
держат собственно инструкцию языка.

      Для облегчения подготовки программ на Фортранe  компи-
лятор  допускает  ввод операторов в "свободном" формате. При
этом первая строка оператора должна содержать в  какой  либо
из 1-6 позиций символ табуляции, а признаком строк продолже-
ния в свободном формате является символ "&" в  первой  пози-
ции. В свободном формате оператор начинается непосредственно
за символом табуляции или признаком продолжения "&", а длина
информации на строке не ограничивается. В остальных позициях
строки символ табуляции может использоваться вместо  пробела
для улучшения распечатки текста программы.

      Строки комментариев могут начинаться с одного из  сим-
волов  "*", "c", "C".  Кроме того, комментарии могут записы-
ваться в конце строк программы, такой комментарий отделяется
от текста инструкции символом "!".

      В стандартном Фортране алфавит языка включает 26  про-
писных  букв.  В  ОС  ДЕМОС  есть возможность набирать текст
программ как прописными, так и строчными буквами. По умолча-
нию  символы  верхнего регистра (прописные буквы) преобразу-
ются в символы нижнего регистра, кроме символов, входящих  в
текстовые  константы.   Флаг  компилятора "-U" отменяет этот
режим.  В этом случае появляется  возможность  ссылаться  на
внешние  имена, содержащие прописные буквы, или использовать
их для различения внутренних идентификаторов; ключевые слова
в режиме "-U" должны записываться строчными буквами.






6

   2.2. Оператор включения файла


      Оператор:

       include 'файл'

заменяется при трансляции содержимым файла 'файл'.  Возможно
до 10 вложений операторов "include".


   2.3. Комплексные данные двойной точности


      В языке Фортран-77 ОС ДЕМОС введен новый  тип  данных:
комплексные  двойной  точности.  Каждый элемент таких данных
представляется  парой переменных   двойной  точности.  Имена
стандартных функций такого типа начинаются с "z" вместо "с".

      Для описания таких данных введен описатель:

        double complex СПИСОК_ИМЕН

можно использовать также описатель "complex*16".


   2.4. Короткие целые числа


      Компилятор воспринимает  об'явление  типа  "integer*2"
(обычные целые числа соответствуют правилам Фортрана, требу-
ющим, чтобы целые занимали столько же места в памяти, что  и
вещественные,  это  соответствует  типу  "long" в языке Си).
Целые "integer*2" соответствуют типу "short  int"  языка  Си
(на  СМ-4  и Электронике 79 в языке Си тип "int" совпадает с
типом "short int").

      Обобщенные стандартные  функции   возвращают  короткие
или  длинные  целые числа в зависимости от типов аргументов.
Если при компиляции используется флаг "-I2", все  переменные
и константы целого типа будут иметь тип "integer*2".

      Если тип обобщенной стандартной функции  не  определя-
ется типами аргументов, будет выбран тип, определенный умол-
чанием для типа "integer" ("integer*2", если   употребляется
флаг  "-I2").  Флаг "-I2" действует также на переменные типа
"logical".


   2.5. Описатели типа


      В компиляторе допускается указание длины элемента дан-
ных в описателях типа аналогично тому, как длина указывается
для типа "character" или "integer*2".   Допустимы  следующие
типы:
 "integer*2", "integer*4",
 "logical*1", "logical*2", "logical*4",
 "real*4", "real*8",
 "complex*8", "complex*16".




                                                           7

   2.6. Тип 'undefined'


      В Фортране существует правило определения  типа  пере-
менных  по  первой  букве имени, если тип не указан явно. По
умолчанию  переменные, имя которых  начинается  с  одной  из
букв  "i j к l м n", считаются целыми, а остальные - вещест-
венными. Это правило можно изменять оператором "implicit".

      Вводится дополнительный тип для оператора "implicit" -
неопределенный тип "undefined".  Оператор вида:

      implicit undefined(a-z)

отключает автоматическое определение типа переменных, и ком-
пилятор  будет  выдавать  диагностику для каждой переменной,
которая используется, но не определена в операторе  описания
типа.   Флаг  "-u"  для  компилятора эквивалентен постановке
данного оператора в начало каждого программного модуля.


   2.7. Динамическое  размещение переменных


      Имеется два описателя класса памяти: "static"  и  "au-
tomatic". Эти описатели могут появляться в операторах описа-
ния типа. По умолчанию локальные переменные являются  стати-
ческими, т.е.  существует ровно одна копия каждой переменной
и ее значение сохраняется между  вызовами  подпрограммы  или
функции.   Если  локальная переменная об'явлена "automatic",
то она размещается в стеке, то есть при каждом вызове  функ-
ции или подпрограммы создается заново, и ее значение не сох-
раняется между вызовами.

      Переменные "automatic" не могут использоваться в  опе-
раторах "equivalence", "data", и в описателе "save".


   2.8. Рекурсия


      Процедуры и функции могут  вызывать  себя  непосредст-
венно  или  через  цепь других процедур.  (В версии для СМ-4
прямой рекурсивный вызов запрещен).


   2.9. Двоичные, восьмеричные,  шестнадцатеричные  конс-
        танты


      Переменные типа "logical", "real" или "integer"  могут
быть  инициированы в операторе "data" бинарными константами.
Такие константы  обозначаются  буквой,  за  которой  следует
строка  в  кавычках.   Символ  "b" определяет двоичную конс-
танту, строку должна содержать нули и единицы.   Символ  "o"
определяет  восьмеричную константу, строка содержит цифры от
"0" до "7". Символы "z" или "x"  специфицируют  шестнадцати-
ричную  константу,  с цифрами от "0" до "9" и от "a" до "f".
Оператор:

        integer a(3)
        data a/b'1010', o'12',z'a'/


8

инициирует все 3 элемента массива a целым числом "10".


   2.10. Символьные константы


      В соответствии с языком Си, в текстовых константах мо-
гут  использоваться следующие обозначения управляющих симво-
лов:

    \n "newline" (новая строка);
    \t "tab" (табуляция);
    \в "backspace" (возврат на шаг);
    \f "formfeed" (вертикальный формат);
    \0 "null" (нулевой символ);
    \' апостроф (не заканчивает строку);
    \" кавычки (не заканчиваю строку);
    \\ \ (обратная  черта);
    \x x, где х любой другой символ.


      Компилятор и система ввода/вывода позволяют  использо-
вать в качестве кавычек, ограничивающих текстовую константу,
как апостроф, так и двойные кавычки. Если строка начинаеся с
одной разновидности кавычек, кавычки другого типа могут вхо-
дить в строку без удвоения или использования косой черты.

      Каждая неэквивалентная скалярная переменная  и  каждая
символьная  константа размещается компилятором с границы це-
лого слова. За каждой символьной константой, за  исключением
входящих в оператор "data", компилятором приписывается нуле-
вой символ для облегчения об'единения с Си программами.


   2.11. Константы Холлерита


      Фортран-77 позволяет использовать константы  Холлерита
для совместимости с существующими системами. В данной версии
компилятора эти константы могут использоваться  вместо  сим-
вольных констант.


   2.12. Операторы эквивалентности


      В Фортране-66 в операторе "equivalence" можно   предс-
тавлять  элементы многомерного массива как элементы одномер-
ного массива.

      В Фортране-77 это запрещено, т.к. нижние  границы  ин-
дексов  могут  отличаться  от 1. Компилятор все же позволяет
использовать такое представление элементов массива в  опера-
торе "equivalence", в предположении, что все недостающие ин-
дексы равны 1.  При этом печатаются предупредительные  диаг-
ностики.








                                                           9

   2.13. Однопроходная инструкция 'do'


      Фортран-77 не выполняет инструкцию "do", если  началь-
ное значение уже превысило допустимую величину, как в опера-
торе:

      do 10 i=2,1


      В некоторых реализациях Фортрана-66 подобная  инструк-
ция  "do" выполнялась по крайней мере 1 раз. Для того, чтобы
старые программы могли выполняься в Фортране-77, введен флаг
"-onetrip",  который  вызывает  генерацию кода, выполняющего
инструкцию "do" по меньшей мере 1 раз.


   2.14. Внутренние файлы


      В стандартном Фортране-77 введено понятие  "внутренних
файлов"  (массивы  памяти),  но  их использование ограничено
форматным    последовательным    вводом/выводом.     Система
ввода/вывода  Фортрана-77  ОС  ДЕМОС  позволяет использовать
внутренние   файлы   для   неформатного    ввода/вывода    и
ввода/вывода с прямым доступом.


   2.15. Разделители при форматном вводе


      При форматном чтении несимвольных  переменных  запятые
используются как разделители величин во входной записи.  При
этом игнорируется длина поля ввода, указанная в спецификации
преобразования,  если  она  превышает реальную длину.   Так,
формат:

  (i10, f20.10, j4)

будет читать запись

 -345, .05е-3, 12

правильно.


   2.16. Дополнительные встроенные функции


      В данной версии компилятора поддерживаются  все  внут-
ренние  функции Фортрана-77. Кроме того, введены функции для
выполнения битовых логических операций ("or", "and", "xor" и
"not") и для получения доступа к аргументам команды ОС ДЕМОС
(getarg и iargc, см. "Руководство программиста, часть 4").










10

   2.17. Совместимость с Фортраном-4 ОС РВ


      Для совместимости с языком Фортран-4 операционных сис-
тем Рафос и ОС РВ СМ ЭВМ в версиях для СМ-4 и Электроники-79
введено ключевое слово "byte", полностью равносильное описа-
телю "character".

      Аналогично, введены ключевые слова: "type" равносильно
"print", и "accept" равносильно "read".






















































                                                          11




                    3. ОГРАНИЧЕНИЯ ЯЗЫКА


      Версия  компилятора  не  соответствует  международному
стандарту на Фортран-77 в следующих случаях:


   3.1. Выравнивание чисел с двойной точностью


      Стандарты Фортрана (1966 и 1977  г.)  позволяют  числа
двойной   точности   в   общих   областях   и  в  операторах
"equivalence" выравнивать на границу, начинающуюся с  нечет-
ного слова. Например:

      real a(4)
      double precision b,c
      equivalence (a(1),b), (a(4),с)

Такую возможность не рекомендуется использовать в ОС ДЕМОС.


   3.2. Описание подпрограмм и функций без аргументов


      Если какой-либо аргумент процедуры  является  символь-
ным, то все аргументы этой процедуры, являющиеся подпрограм-
мами или функциями, должны быть об'явлены явно  в  описателе
external.  Если  формальный  параметр/процедура не об'явлена
external, то выдается предупреждение.  В случае, если в фор-
мальных  параметрах нет переменных типа "character", код ге-
нерируется всегда верно, даже  если  параметры/процедуры  не
описаны явно как "external".


   3.3. Ограничения на имена и на оператор 'data'


      В ОС ДЕМОС не допускается  несколько  операторов  рас-
сылки  данных  в один и тот же общий блок, размещенных в от-
дельно транслируемых файлах, даже если область действия этих
операторов не пересекается.  Например, операторы:

        common /comm/ii(20),jj(20)
        data ii/20*1/
        common /comm/ii(20),jj(20)
        data jj/20*2/

должны размещаться в одном исходном файле, хотя  могут  при-
надлежать разным программным компонентам, размещенным в этом
файле.

      Имена общих блоков и внешних подпрограмм (функций)  не
должны пересекаться.







12

   3.4. Реализация форматов 'tl' и 't'


      При обработке спецификаций позиционирования "t" и "tl"
использован  системный  вызов  "lseek".  Если канал связан с
устройством, на котором операция позиционирования "lseek" не
выполняется  (например,  терминал),  спецификации "t" и "tl"
будут обработаны неверно.


   3.5. Ограничения для ЭВМ типа СМ-4


      Версия компилятора для  ЭВМ, не имеющих раздельной ад-
ресации  команд  и данных, (СМ-4, СМ-1600, СМ-1420, Электро-
ника 100/25 и др.) собрана  с  применением  перекрытий,  что
привело к следующим ограничениям во входном языке:

   - Выражения, содержащие комплексные операции или  обраще-
     ния  к  стандартным  арифметическим функциям, не должны
     появляться в списках ввода/вывода и в  операторе  цикла
     "do";

   - В константных выражениях целого  типа,  появляющихся  в
     операторах  описаний,  не допустимы числа вещественного
     типа.






































                                                          13




                4. МЕЖПРОГРАММНЫЙ ИНТЕРФЕЙС


      Для записи "Си" процедур, которые вызываются из  Форт-
рана  или вызывают процедуры Фортрана, необходимо знать сог-
лашения об именах процедур,  представление  данных,  правила
передачи  аргументов  и  возвращаемых  значений,  принятые в
языке Фортран-77.


   4.1. Имена процедуры


      В системе ДЕМОС в имена общих блоков и  внешних  подп-
рограмм  (функций)  Фортрана добавляются подчеркивания в на-
чале и конце имени. В языке Си добавляется символ  подчерки-
вания только в начало имен внешних переменных и подпрограмм.
Таким образом, следующие имена в  Фортране,  Си,  Ассемблере
эквивалентны:

  Фортран:      external alpha
                common /comm/x
  Си:   extern alpha_(); extern comm_;
  As:   .globl _alpha_, _comm_;

Программы из стандартной библиотеки  Фортрана  имеют  символ
подчеркивания внутри имени, чтобы исключить пересечение имен
с именами об'ектов, определенных пользователем.


   4.2. Представление данных


      В следующей таблице приводится соответствие между  ти-
пами данных в Фортране и Си (если не указан режим трансляции
"-I2"):

 Фортран              Си
 -------            ------
 integer*2 х       short int х;
 integer   х       long int  х;
 logical х         long int х;
 real х            float х;
 doubleprecision х double х;
 complex х         struct {float r,i;} х;
 double complex х  struct {double dr, di;}х
 character*6 х     char х[6]


(По правилам, принятым в Фортране,данные типа integer, logi-
cal  и  real  занимают  одно и то же место в памяти).  Режим
трансляции "-I2" изменяет типы данных:  "integer"  -  "short
int", "logical" - "short int".








14

   4.3. Возвращаемые значения


      Функции типа "integer", "logical", "real" или  "double
precision"  об'являются как Си процедуры, возвращающие соот-
ветствующее значение (см. соответствие  типов).  Комплексная
функция  или  комплексная   функция двойной точности эквива-
лентна Си процедуре с дополнительным  аргументом  (первым  в
списке  аргументов), который указывает на место, куда должно
записываться возвращаемое значение. Так, запись:

        complex function f(...)

эквивалентна записи на Си:

        f_(temp, ...)
        struct {float r, i;} *temp;
        ...


      Функции,  возвращающие  символьные  значения,  эквива-
лентны  Си  процедуре  с  двумя  дополнительными аргументами
(первыми в списке аргументов), содержащими адрес  возвращае-
мого значения и его длину. Так запись:

      character*15 function d(...)

эквивалентна

        d_(result, length,...)
        char result [ ];
        long int length;

функция "d" может быть вызвана из Си как

      char chars [15];
      ...
      d_(chars, 15l,...);


      Подпрограммы, имеющие  несколько  вариантов  возврата,
вызываются как фортрановские функции целого типа, возвращаю-
щие номер варианта возврата или 0, если осуществляется  нор-
мальный возврат из подпрограммы. Так, оператор:

        call nret(*1, *2, *3)

выполняется на самом деле как оператор:

        goto (1,2,3) nret()



   4.4. Список аргументов


      Все аргументы передаются по адресам. Кроме  того,  для
каждого  аргумента  символьного  типа или каждого аргумента,
являющимся подпрограммой (функцией), передается размер  зна-
чения  данного  аргумента в байтах. Рассмотрим следующий вы-
зов:



                                                          15

      external f
      character *7 s
      integer в(3)
      ....
      call sam (f,22, в(2), s)

      он эквивалентен такому вызову:

      int f_( );
      char s[7];
      long int в[3];long l22=22l;
      ...
      sam_(f_, &в[1],&l22, s,0l, 7l);


      Следует обратить внимание на то,  что  первый  элемент
массива  в  языке Си всегда имеет нижний индекс 0, а в Форт-
ране этот индекс можно менять, причем по умолчанию он  равен
1.  Фортрановские массивы хранятся по возрастанию колонок, а
в Си массивы хранятся по строкам.  Следующие выражения в  Си
и Фортране обращаются к одному и тому же элементу массива:

Си:
        extern int array_[9,12];
        ...
        .. array[2,3] ..
Фортран:
        common  /array/ar(13,10)
        integer*2 ar
        ...
        .. ar(4,3) ..


      Следует учитывать, что в режиме трансляции  "-I2"  все
аргументы  типа  "integer"  имеют  в Си тип "short int", а в
стандартном режиме - "long int".




























16




                     5. ФОРМАТЫ ФАЙЛОВ



   5.1. Структура файлов Фортрана


      Фортран-77  поддерживает четыре вида  внешних  файлов:
последовательные  форматные  и  неформатные файлы, и файлы с
прямым доступом (форматные и бесформатные).  В системе ДЕМОС
все  они представляются как обычные файлы ОС ДЕМОС, но имеют
соответствующую внутреннюю структуру.

      Система ввода/вывода Фортранa-77 основана  на  понятии
записи.  При открытии  в Фортране файла прямого доступа ука-
зывается размер записей. Размер  записей  позволяет  системе
ввода/вывода  имитировать  прямой доступ к записям указанной
длины в обычном последовательном файле ОС  ДЕМОС  с  помощью
установки  точки  чтения "lseek".  В особом случае, если при
открытии файла указана длина записи 1, файл считается просто
состоящим из последовательности байтов, без разбиения на за-
писи, как это принято в ОС ДЕМОС, и номер записи в  операто-
рах "read" и "write" определяет точку чтения/записи информа-
ции,  а  само  чтение/запись  идет  до   исчерпания   списка
ввода/вывода, без деления файла на "записи".

      Последовательные бесформатные   файлы  не  могут  быть
прочитаны и записаны какими то другими средствами, кроме как
операторами ввода/вывода. На самом деле они  также  имитиру-
ются  на  обычных  файлах  ОС ДЕМОС, причем в начале и конце
каждой записи добавляется целое число, указывающее длину за-
писи в байтах.

      При форматном вводе последовательный файл  разбивается
на  записи по символам "конец строки", то есть каждая строка
ОС ДЕМОС считается отдельной записью.  В  отличие  от  стан-
дарта, в котором результат считывания конца записи неопреде-
лен, в ОС ДЕМОС при чтении  записи  она  дополняется  справа
пробелами.   При  выводе  система  ввода/вывода записывать в
конце каждой записи символ "новая  строка"  ('\n').  Имеется
также  возможность записать этот символ в файл  явно, указав
его в текстовой константе или спецификации  вывода,  но  это
приведет к появлению нескольких записей вместо одной.


   5.2. Совместимость с Си


      Система  ввода/вывода   Фортрана   использует   только
средства стандартной библиотеки ввода-вывода Си.  Единствен-
ное расширение этой библиотеки связано с опросом того, может
ли  файл использоваться для прямого ввода/вывода, и возможен
ли возврат назад по файлу. Этот опрос выполняется с  помощью
стандартной  функции fseek: в библиотеке Фортрана существует
функция "canseek", которая определяет, можно ли использовать
"fseek".  При  работе с файлами, к которым невозможен прямой
доступ ОС ДЕМОС с помощью "fseek", в Фортране-77 нельзя  вы-
полнять операторы "back space", "rewind" и осуществлять пря-
мой доступ.


                                                          17

      В языке Фортран-77   оператор  "inquire"  представляет
пользователю  возможность  выяснить, ссылаются ли два канала
на один и тот же файл, а также получить имя открытого  файла
в  форме,  которая  позволяет программе еще раз открыть этот
файл. В ОС ДЕМОС система ввода/вывода выдает полное имя пути
к опрашиваемому файлу.


   5.3. Предварительно подсоединенные файлы


      При запуске программы на Фортране канал 5  присоединя-
ется к файлу стандартного ввода, канал 6 - к файлу стандарт-
ного вывода, канал 0 - к стандартному файлу диагностик.  Все
остальные  каналы  связываются  при первом обращении к ним с
файлами "fort.N", где N - номер канала, если только  не  ис-
пользовался  оператор  "open".   Данные файлы могут и не су-
ществовать, тогда они создаются при первом обращении к соот-
ветствующему каналу, если только этот канал не был перенаст-
роен оператором "open". По  умолчанию  каналы  настроены  на
форматный последовательный доступ.

      При присоединении к файлу (как по умолчанию, так  и  с
помощью оператора "open") система ввода/вывода пытается  по-
местить информацию в конец файла.  При этом операция "write"
будет  добавлять  записи к файлу, а результатом "read" будет
ошибка "конец файла". Для установки файла на начало  необхо-
димо  использовать  оператор "rewind".  Каналы 5,6 и 0 оста-
ются в таком же положении, в каком они были  переданы  прог-
рамме при ее запуске.

      Оператор "print" осуществляет выдачу по  каналу  6,  а
оператор "read формат,список" читает информацию по каналу 5.































18




            6. РЕКОМЕНДАЦИИ ПО ПРОГРАММИРОВАНИЮ



   6.1. Оптимизация программ


      Пры вызове компилятора в стандартном режиме, без  ука-
зания  дополнительных режимов трансляции, компилятор генери-
рует довольно большие  и  медленные  программы.  Существенно
сократить  размер  получаемых  программ, а также ускорить их
выполнение можно, выполнив следующие рекомендации:

   - Рекомендуется использовать тип "integer*2" вместо  "in-
     teger"  везде,  где это только возможно. Наибольший эф-
     фект дает установка при трансляции флага "-I2",  однако
     в  этом  случае  такой  флаг должен быть установлен при
     трансляции всех программ, загружаемых вместе.

   - Рекомендуется транслировать программы в режиме  оптими-
     зации  циклов  и  локальной оптимизации (флаг "-O2" или
     "-O1"). Следует учесть, что при работе на СМ-4  локаль-
     ный  оптимизатор Си не может обработать слишком большие
     программые модули (диагностика "Си оптимизатор: не хва-
     тило памяти").

   - Значительно экономится память и время на СМ-4 и совмес-
     тимых  с  ней  ЭВМ при использовании целых чисел вместо
     плавающих везде, где это возможно.

      Следует учесть, что в первой версии ОС ДЕМОС обработка
плавающих  чисел  на СМ-4 и Электронике 100/25 в языках Си и
Фортран-77 происходит исключительно медленно. Это связано  с
программной интерпретацией команд процессора плавающих чисел
"FPP".  При работе на ЭВМ СМ-1420, СМ-1600, Электроника-79 и
совместимых с ними ЭВМ такого недостатка нет.


   6.2. Совместная трансляция с программами на Си


      При об'единении программ на Си и  Фортране-77  необхо-
димо учитывать следующее:

   - Для работы программ  на  Фортране-77  нужны  служебныке
     программы   из   библиотек   "/usr/f77lib/libF77.a"   и
     "/usr/f77lib/libI77.a", которые подключаются  автомати-
     чески,  если  для сборки комплекса используется команда
     "f77".  Однако  при  использовании  команды  "f77"  для
     сборки  системы головная программа должна быть написана
     на Фортране.  Можно загружать программы на  Фортране-77
     и  Си  с  помощью  команды "cc", но при этом необходимо
     явно   указать   в   параметрах   команды    библиотеки
     "/usr/f77lib/lib[FI].a", например:

    f77 -I2 -c -O2 fort.f
    cc -o test -f test.c fort.o\
     /usr/f77lib/lib[FI].a



                                                          19

   - Библиотека ввода/вывода Фортрана-77 значительно  больше
     библиотеки   ввода/вывода  языка  Си.  Программирование
     ввода/вывода на Си вместо Фортрана в программных  комп-
     лексах  на смеси  языков Си и Фортран может дать значи-
     тельную экономию памяти, занимаемой комплексом.


   6.3. Отладка программ на Фортране-77


      Для отладки программ на Фортране-77 и на Си в ОС ДЕМОС
существуют два диалоговых отладчика: "adb",  ведущий отладку
в терминах ассемблера,  и "cdeb", позволяющий вести  отладку
в   терминах  языков  Си  и  Фортран.  Отладка  программ  на
Фортране-77 с помощью "adb" требует хорошего знания как воз-
можностей  отладчика,  так и особенностей представления дан-
ных, именования переменных и т.д. Напротив,   "cdeb"  специ-
ально  модифицирован  для  отладки  программ  на Фортране-77
пользователями невысокой  квалификации:  отладка  ведется  в
терминах языка Фортран, не требуется указывать типы перемен-
ных, имеется диалоговая подсказка. Поскольку при  трансляции
программ  с флагом "-d", который задает режим трансляции для
отладки с помощью "cdeb", размер программ заметно увеличива-
ется, а скорость решения уменьшается, можно для экономии па-
мяти и времени транслировать с флагом "-d" только  те  прог-
раммы  из большого программного комплекса, которые предпола-
гается отлаживать.





































20


     ЛИТЕРАТУРА


1. Катцан Г. Язык Фортран-77. М., "Мир", 1982.

2. Карпов В.Я. Алгоритмический язык Фортран.  М.,   "Наука",
   1976.

3. Диалоговая Единая Мобильная Операционная Система (ДЕМОС).
   Описание языка Фортран-77. АПК.00109-01 35-01, 1985.





















































                                                          21

                                                 ПРИЛОЖЕНИЕ


           1. ОТЛИЧИЯ ФОРТРАНА-77 ОТ ФОРТРАНА-66


      В  приложении  1  описаны   отличия   Фортрана-77   от
Фортрана-66.    При   этом   текст,   относящийся  только  к
Фортрану-77 ОС ДЕМОС, отмечен вертикальной чертой справа.


   1.1. Использование констант Холлерита


      В стандарте использование Холлеритовских констант зап-
рещено,  но  в данной версии компилятора они могут использо-
ваться везде наравне с литеральными константами.


   1.2. Символьные константы


      Символьные константы заключаются в апострофы. Апостроф
может включаться в константу:

 'ain''t'



      Можно использовать  в  качестве  ограничителя  как   |
кавычку  ",  так и апостроф '. Внутри констант могут ис-   |
пользоваться двухсимвольные обозначения управляющих сим-   |
волов кода КОИ-8.                                          |



   1.3. Выход из цикла 'do'


      В Фортране-77 вход внутрь цикла иначе, чем через  опе-
ратор  цикла,  запрещен; в Фортране-66 имелись исключения из
этого правила.


   1.4. Формат программы


      Строка, состоящая из пробелов, считается строкой  ком-
ментариев.


      Допускается свободный формат  записи  программы  и   |
комментарий в конце строк.                                 |


      Основная программа может начинаться с оператора  "pro-
gram", который определяет внешнее имя этой программы; проце-
дура "block data" также может иметь имя:

      program test
      ...
      block data stuff


22

      Только одна процедура "block  data"  без  имени  может
входить в программу.


   1.5. Оператор entry


      Разрешено несколько точек входа. Процедуры  и  функции
могут иметь дополнительные точки входа, об'явленные операто-
ром "entry" со списком аргументов:

      entry extra (a,в,с)


      Выполнение подпрограммы (функции) начинается с первого
оператора,  следующего  за  "entry". Все описания переменных
должны предшествовать выполняемым операторам.

      Все точки  входа  подпрограммы  "subroutine"  являются
именами  подпрограмм, а точки входа функции являются функци-
ями.  Типы точек входа функции могут  отличаться,  за  одним
исключением: все точки входа функции символьного типа должны
также иметь символьный тип.


   1.6. Инструкция 'do'


      Переменные и параметры цикла "do" могут быть выражени-
ями целого, вещественного типа или двойной точности. Цикл:

      do 10 i=l,u,d

выполняется  max(0,|(u-l)/d|) раз. Шаг цикла "d" может  быть
как положительным, так и отрицательным, цикл может не выпол-
ниться ни разу, если d>0 и u<l или d<0 и u>l.6


      Имеется специальный режим трансляции, при  котором   |
циклы выполняются хотя бы один раз.                        |



   1.7. Символьный тип данных


      Одним из усовершенствований  является новый тип данных
- символьная строка. Локальные и общие символьные переменные
описываются оператором "character", и  могут  иметь  размер,
отличный от 1 символа:

      character*ДЛИНА СПИСОК
например:
      character*(6+3)с, d*20
      character*6 cl(20)


      Если размер (целое константное выражение после "*") не
указан,  то он принимается равным 1.  В случае строки - фор-
мального параметра длина может определяться по  длина  соот-
ветствующих  фактических  параметров, в этом случае описание
имеет вид:


                                                          23

      character*(*)a


      Существует внутренняя функция len, которая  возвращает
размер  символьной  строки.  Массивы символов и общие блоки,
содержащие символьные переменные, упаковываются: первый сим-
вол следующего элемента следует за последним символом преды-
дущего элемента.


   1.8. Оператор implicit


      В Фортране  существуют  правила  определения  типа  по
умолчанию.  В Фортране-77 умолчания можно изменять с помощью
оператора "implicit".  Так операторы:

      implicit real (a-b,g), complex (w-z)
      implicit character*(17) (c)

об'являют, что переменные, имена которых начинаются  с  "w",
"х", "y" или "z" считаются типа "complex", с "a", "b", "g" -
типа "real", с символа "c" - типа "character*17 (если только
тип таких переменных не описан явно).


      Введен тип "undefined", с помощью  которого  можно   |
отменить  умолчания для некоторых или для всех начальных   |
символов имен переменных.                                  |



   1.9. Оператор parameter


      Константе можно присвоить символическое имя, например:

      parameter (х=17,y=х/3,pi=314159d0,
     * s='hello')

типы параметрических констант определяются по обычным прави-
лам  или задаются явно в операторах описания типа. Выражения
справа от знака равенства должны быть константными выражени-
ями.


   1.10. Об'явление массивов


      Массивы могут иметь до семи измерений (было  разрешено
3).  Нижняя граница каждого индекса может быть об'явлена ве-
личиной, отличной от 1, с  помощью двоеточия:

      real a(-5:3,7,m:n),в(n+1:2*n)

Верхняя граница последнего индекса массива в описании  аргу-
ментов  может  быть  обозначена символом "*" для указания на
то, что она не определена:

      integer a(5,*),в(*),с(0:1,-2:*)




24

   1.11. Оператор save


      Мало известное правило Фортрана 66 - то, что локальные
переменные  в процедуре не обязательно сохраняют свои значе-
ния между вызовами  процедуры.  В  любой  момент  выполнения
программы, если общий блок не об'явлен в выполняемой текущей
процедуре и не об'явлен ни в одной из вызвавших ее процедур,
все его переменные могут стать неопределенными.

      В Фортране 77  переменные и общие блоки сохраняют свои
величины  между  вызовами,  если  они  описаны  в  операторе
"save", например:

      common /b/x,y
      real cc(20)
      save /b/,cc

Общие блоки должны быть описаны в операторе "save"  во  всех
подпрограммах,  где  они  встречаются.  Оператор  "save" без
списка переменных действует на все переменные,  описанные  в
данной подпрограме.


   1.12. Оператор intrinsic


      Все функции, указанные в стандарте, относятся к "внут-
ренним"  и  "встроенным"  функциям.  Если внутренняя функция
должна быть передана в другую процедуру, она  об'является  в
операторе  "intrinsic".  Встроенные функции в качестве аргу-
ментов передавать нельзя.


   1.13. Операция сцепления


      Добавлен оператор сцепления символьных строк,  обозна-
чаемый  двойной  косой  чертой  ("//").  Результат сцепления
(конкатенации) - строка, содержащая символы левого операнда,
за   которыми   следуют  символы  правого  операнда.  Строки
'ав'//'cd' и  'abcd' равны. Составляемые строки должны иметь
константную  длину,  за  исключением оператора присваивания,
где могут использоваться строки переменной длины -  формаль-
ные аргументы.


   1.14. Присваивание символьных переменных


      Левая и правая части оператора  присваивания  символь-
ного  типа  не  должны содержать строк, пересекающихся в па-
мяти.

      Если левая сторона длинее правой, она дополняется про-
белами, если короче - лишние символы не учитываются.








                                                          25

   1.15. Вырезки из строки


      Существует возможность  выделить  подстроку  (вырезку)
символьной  переменной  или  элемента  символьного  массива:
a(i,j)(м:n) - это строка (n-м+1)  символов,  начинающаяся  с
символа  номер "m" в элементе массива a(i,j).  Результат не-
определен, если m>n. Вырезки могут использоваться в  выраже-
ниях и в левой части оператора присваивания.


   1.16. Возведение в степень


      Существует  возможность  возводить  реальные  числа  в
комплексную степень.


   1.17. Снятие ограничений


      Разрешены   выражения   смешанного    режима    (можно
об'единять  целые  и  комплексные величины). Разрешены конс-
тантные выражения везде, где в Фортране-66 должны были  быть
целые константы или выражения вида (kv+c), кроме списка зна-
чений в операторе "data".  Кроме того, в переменных  размер-
ностях  аргументов-массивов  можно  использовать  выражения,
включающие формальные параметры,  элементы  общих  блоков  и
константы.


   1.18. Оператор if-then-else


      Введена управляющая структура "if-then-else".   Струк-
тура имеет вид:

      if (УСЛОВИЕ) then
      <инструкции, которые
       выполняются, если
       УСЛОВИЕ истинно>
      else
      <инструкции, выполняющиеся
       в противном случае>
      endif


      Можно опускать  слово  "else"  и  соответствующие  ему
инструкции, а также об'единять условия "else" и "if":

      if (УСЛОВИЕ) then
      <инструкции, которые
       выполняются, если
       УСЛОВИЕ истинно>
      else if (УСЛОВИЕ1) then
      <инструкции, которые
       выполняются, если
       УСЛОВИЕ1 истинно>
      else if (УСЛОВИЕ2) then
      ...
      else
      <инструкции, выполняющиеся


26

       в противном случае>
      endif

Конструкции "if-then-else" могут быть вложены друг в друга и
могут  комбинироваться  с  циклами  "do"  так, чтобы области
действия операторов "do" и "if-then-else" были вложены  одна
в другую.


   1.19. Операторы возвратов


      В параметрах подпрограмм можно указывать метки альтер-
нативного  возврата: в списке формальных аргументов на месте
параметров-меток указываются звездочки, а при вызове  указы-
ваются  номера  меток,  перед  которыми стоит символ "*".  В
этом случае оператор:

      subroutine ИМЯ(...,*,...)!N звездочек
      ...
      return ЦЕЛОЕ_ВЫРАЖЕНИЕ
      ...
      call ИМЯ(...,*МЕТКА,...)

означает возврат из подпрограммы  по  альтернативной  метке:
если  значение ЦЕЛОГО_ВЫРАЖЕНИЯ равно К, точка входа имеет N
аргументов типа "метка возврата" (обозначаемых символом "*")
и  1<K<N, возврат происходит на К-ю метку перехода из списка
аргументов. В противном случае выполняется  обычный  возврат
из подпрограммы.


   1.20. Ввод/вывод



   1.20.1. Задание формата


      Формат может задаваться  значением символьного выраже-
ния,  именем текстового массива или меткой формата.  Следую-
щие операторы "write" эквивалентны:

      character form(4)
      data form/'(i5)'/
      write (6,'(i5)')х
      write (6,form)x
      write (6,101) x
101   format(i5)



   1.20.2. Спецификации end=, err= и iostat=


      Операторы "read" или "write" могут содержать  специфи-
кации "end=", "err=" и "iostat=", например:

      write (6,101,err=20,iostat=a(4))
      read (5, 101,err=20,end=30,iostat=х)

здесь 5 и 6 - каналы, по которым осуществляется  ввод/вывод,


                                                          27

101 - номер соответствующего формата, 20 и 30 - номера меток
перехода по ошибке и концу файла, a(4) и х - переменные  це-
лого  типа, в которые засылается код ответа после конца опе-
рации.

      Если во время ввода/вывода возникает ошибка,  управле-
ние передается на оператор с меткой 20. При достижении конца
файла управление передается на метку  30.  В  любом  случае,
когда завершается оператор ввода/вывода, переменной, стоящей
в предложении "iostat=" присваивается значение, равное нулю,
если  все  прошло  благополучно,  отрицательному числу - для
конца файла и положительному числу при ошибке.


   1.21. Форматный ввод/вывод



   1.21.1. Литеральные константы


      В отличие от Фортрана-66, литеральные константы нельзя
использовать  в  спецификациях формата при форматном чтении.
При выводе по формату такие константы просто  копируются  на
вывод, как и в Фортране-66.


   1.21.2. Спецификации позиционирования


      Спецификации "t", "tl", "tr" изменяют номер следующего
символа  в записи. "trN" или Nx, где N - целое число, запол-
няют следующие N позиций в записи пробелами;  "tN"  означает
переход к N-й позиции в записи, "tlN" сдвигает текущую пози-
цию на N символов влево.


   1.21.3. Разделитель ':'


      В том случае, если данных в списке ввода/вывода больше
нет,  символ ":" в формате прекращает операцию ввода/вывода.
В противном случае он служит разделителем  подобно  запятой.
В программе:

      х='("hello",:, "there", i4)'
      write(6, х)12
      write(6, х)

первый оператор "write" напечатает  "hello there 12",  в  то
время как второй оператор напечатает только "hello".


   1.21.4. Необязательные знаки '+'


      Существует несколько вариантов использования знака "+"
перед  неотрицательным  числом  при  выводе. Для того, чтобы
знаки плюс появлялись при  выводе  под  управлением  данного
формата любых положительных чисел, используется спецификация
"sp".   Спецификация   "ss"   гарантирует,    что    система
ввода/вывода  не будет вставлять необязательные  знаки плюс,


28

спецификация  "s" восстанавливает режим  вывода  знака  "+",
установленный по умолчанию.


   1.21.5. Пробелы на вводе


      Пробелы, встречающиеся между  цифрами  при  вводе,  не
принимаются  во  внимание,  если  была  указана спецификация
"bn", считаются нулями, если указана  спецификация  "bz",  и
трактуются  в  соответствии с параметрами инструкции "open",
если ни одна из этих спецификаций не указана.


   1.21.6. Непредставляемые величины


      В стандарте предусмотрено, что если числовая часть  не
может  быть  представлена  в  форме, требуемой спецификацией
формата, выходное поле должно быть заполнено символами "*".


   1.21.7. Спецификация iW.M


      Существует новая спецификация для вывода целых  чисел:
"iW.M".  Она отличается от "iW" тем, что всегда выводится по
крайней мере M цифр, включая начальные  нули.   "iW.1"  пол-
ностью  аналогично "iW", "iW.0" выводит пустое поле в случае
нулевого значения.


   1.21.8. Преобразования чисел с плавающей точкой


      При вводе порядок может начинаться с  букв  "e",  "d",
"E", "D".  Имеется формат "gW.D", при выводе по которому ав-
томатически выбирается одно из представлений числа: произво-
дится  вывод по формату "f" или "eW.D", в зависимости от по-
рядка числа и величины "D".  В форматах "e",  "d",  "g"  при
выводе можно указывать число цифр в порядке числа, например:
"e12.3e1".


   1.21.9. Спецификация 'a'


      Спецификации "a" и "aW" используются для  ввода/вывода
символьных значений. В качестве ширины поля, если она не за-
дана, используется размер символьного элемента списка  ввода
или вывода.


   1.22. Стандартные устройства ввода и вывода


      По умолчанию существуют стандартные устройства формат-
ного  ввода и вывода.  Оператор "read 10,a,в" считывает дан-
ные со стандартного устройства с использованием   формата  с
меткой  "10".  Устройство может также обозначаться  звездоч-
кой, например "read(*,10)a,в".  Таким же образом можно  ука-
зать устройство и в операторе вывода:


                                                          29

        print 10
 или, что то же самое,
        write(*,10)



   1.23. Форматное преобразование, управляемое списком


      Ввод/вывод, управляемый списком - это ввод или вывод в
свободном формате.  Он задается указанием символа "*" вместо
указателя формата, например:

        read(6,*)a,b,c

При вводе значения разделяются пробелами или, возможно,  за-
пятой.  Вводимые  значения, кроме символьных строк, не могут
содержать пробелов. Конец записи трактуется как  пробел,  за
исключением символьных строк, где он игнорируется. Комплекс-
ные константы представляются как две вещественные константы,
разделенные запятой и заключенные в скобки. Перед значениями
может указываться число повторений, например:

 4*(3.,2.),  2*,4*'hello'

означает 4 комплексных константы, 2  нулевые  величины  и  4
символьных константы. При выводе для каждого элемента списка
вывода выбирается нужный формат. Значения  символьных  пере-
менных  не заключаются при выводе в кавычки и не могут, сле-
довательно, быть считаны обратно в символьные  переменные  с
помощью ввода в свободном формате.


   1.24. Прямой ввод-вывод


      Файл прямого доступа   состоит из одинаковых  по  раз-
меру записей, каждая из которых идентифицируется целым поло-
жительным числом. Записи могут считываться или  записываться
в   любом   порядке,   для   этого   используются  операторы
ввода/вывода прямого доступа.

      Операторы "read" и "write" прямого доступа  имеют  до-
полнительный  аргумент  "rec=", который определяет номер за-
писи в файле. Например:

      read(2,rec=13,err=20)(a(i),i=1,203)


      Считывается 13-я запись из  канала  2  в  массив  "a".
Размер  записи  задается  в  операторе "open". Файлы прямого
доступа могут использоваться для форматного или неформатного
ввода/вывода,  за  исключением ввода/вывода в свободном фор-
мате.










30

   1.25. Внутренние файлы


      Внутренние файлы - это об'екты символьнго типа:  пере-
менные,  вырезки  из  строк или символьные масивы.  В первых
двух случаях вся переменная или вырезка считаются одной  за-
писью, в последнем каждый элемент массива является отдельной
записью. Для внутренних  файлов  разрешен  только  форматный
ввод/вывод.  Возможен ввод/вывод в свободном формате.  Внут-
ренние файлы используются путем указания  имени  символьного
об'екта вместо номера устройства, как в следующем примере:

      character*80 х
      read (5,"(a)") х
      read (х,"(i3,i4)") n1,n2

в котором считывают образ карты в "х", а  затем  читают  два
целых числа из его начала.  Чтение или запись всегда начина-
ются с начала внутреннего файла.


      Возможен также прямой  ввод/вывод  для  внутренних   |
файлов,  с  тем только ограничением, что число записей в   |
таком файле нельзя изменять.                               |



   1.26. Операторы open,close и inquire


      Данные операторы используются для подсоединения и  от-
соединения  каналов  ввода/вывода  от файлов и для получения
информации об каналах или файлах.


   1.26.1. Оператор open


      Оператор "open" используется для связывания  канала  с
файлом или для изменения некоторых свойств канала.  Пример:

      open(1,file='fort.junk')

Оператор "open" имеет несколько ключевых параметров, их зна-
чение приведено ниже:

unit=
   - Число, определяющее номер канала ввода/вывода, с  кото-
     рым должен быть соединен файл. Диапозон номеров каналов
     в данной реализации -  от 0 до 9.  Если данный параметр
     является первым в "open", ключевое слово "unit="  можно
     опустить;

iostat=
   - имеет то же значение,  что  и  в  операторах  "read"  и
     "write";

err=
   - имеет то же значение,  что  и  в  операторах  "read"  и
     "write";

file=


                                                          31

   - символьное выражение.  Является именем  файла,  который
     будет  связан с каналом. Имя файла не указывается, если
     "status='scratch'";

status=
   - принимает значение 'old', 'new',  'scratch'  или  'unk-
     nown'.  По умолчанию принимается 'unknown'.  Если задан
     'scratch', то создается временный файл, который уничто-
     жается после выполнения. Если задается 'new', создается
     файл, если он не существовал, и  усекается  до  нулевой
     длины,  если он существовал. Значение 'unknown' зависит
     от процессора, в ОС ДЕМОС оно равносильно  'old';

access=
   - тип доступа, задается 'sequential'  для  последователь-
     ного доступа  или 'direct' для прямого;

form=
   - задается 'formatted' для форматного  или  'unformatted'
     для бесформатного метода доступа;

recl=
   - целое положительное число, указывает размер записи отк-
     рываемого  файла прямого доступа. Длина записей измеря-
     ется в байтах. В системе ДЕМОС размер записи, равный 1,
     имеет специальное значение;

blank=
   - 'null', если пробелы при вводе цифровых полей игнориру-
     ются, или 'zero', если они трактуются как нули.


   1.26.2. Оператор close.


      Оператор "close" разрывает  соединение между каналом и
файлом.  Обязательный параметр -  номер  канала. Имеются до-
полнительные параметры "iostat=" и "err=" с их обычными зна-
чениями  и  "status=" со значением 'keep', если файл следует
сохранить, либо 'delete', если отсоединяемый файл можно уда-
лить.  По умолчанию используется 'keep'. Пример:

        close(3,err=17)



   1.26.3. Оператор inquire


      Данный оператор дает информацию о канале (если  указан
параметр  "unit=") или файлe (если указан параметр "file=").
Простые примеры:

c  Опрос имени файла
      inguire(unit=3,name=х)
c Опрос номера канала и того, существует
c ли файл
      inguire(file='junk',number=n,exits=1)


      Возможны следующие параметры:



32

file=
   - символьное выражение,  указывает  файл  для  "inguire".
     Пробелы в имени файла игнорируются;

unit=
   - целочисленная переменная, указывает на опрашиваемый ка-
     нал.  Можно запрашивать только одно из двух:
      file= или unit=;

iostat= err=
   - как определено раньше;

exist=
   - логическая переменная, получает значение ".true.", если
     файл соединен с каким либо каналом или канал соединен с
     каким либо файлом, в остальных случаях  устанавливается
     ".false.";

number=
   - целочисленная переменная, которой присваивается   номер
     канала, соединенного с  файлом, если он существует;

named=
   - логическая  переменная,  которая   принимает   значение
     ".true.",   если  соответствующий  файл  имеет  имя,  и
     ".false." в противном случае;

name=
   - символьная переменная, которой присваивается полное имя
     файла;

access=
   - символьная переменная, получает одно из двух  значений:
     'sequential',  если  канал открыт для последовательного
     ввода-вывода, 'direct', если для прямого.  Значение  не
     определено, если канал не подсоединен к файлу.

sequential= direct= formatted= unformatted=
   - символьные переменные, которые принимают значение 'yes'
     если  файл  допускает  опрашиваемый  вид  ввода/вывода,
     'no', если не допускает, и 'unknown', если это  не  из-
     вестно. Опрашиваются следующие свойства: "возможен пос-
     ледовательный доступ", "возможен прямой доступ",  "воз-
     можен форматный доступ", "возможен бесформатный доступ"
     для  аргументов  "sequential",  "direct",  "formatted",
     "unformatted" соответственно.

form=
   - символьная переменная, которая получает значение  'for-
     matted'  если  файл  подсоединен  для форматного ввода-
     вывода, 'unformatted', если он подсоединен  для  нефор-
     матного ввода-вывода;

recl=
   - целочисленная переменная, которой  присваивается  длина
     записи  в  файле,  если он присоединен для прямого дос-
     тупа;

nextrec=
   - целая переменная, которой присваивается номер очередной
     записи  при вводе/выводе с прямым доступом, то есть но-
     мер последней считанной или записанной записи, плюс 1;


                                                          33

blank=
   - символьная переменная, получает значение  'null',  если
     действует   режим  "blank='null'",  'zero'  для  режима
     "blank='zero'".


      Рассмотрим пример:                                   |

      open(1,file="/dev/console")                          |


      В ОС ДЕМОС данный оператор открывает  консоль  для   |
форматного ввода-вывода. Оператор "inquire" для канала 1   |
или файла "/dev/console" определит, что файл существует,   |
связан с каналом 1, имеет имя "/dev/cousole", открыт для   |
последовательного ввода-вывода, не может быть  подсоеди-   |
нен  для  прямого ввода-вывода, предназначен для формат-   |
ного ввода/вывода, для него не определены длина записи и   |
номер записи, игнорируются пробелы в числовых полях.       |













































34

                                                 ПРИЛОЖЕНИЕ


              2. НАСТРОЙКА КОМПИЛЯТОРА НА ЭВМ


      Данный раздел  предназначен  для  системного  програм-
миста, осуществляющего генерацию системы.

      Компилятор Фортран-77 расположен вместе с библиотеками
Фортрана-77 в справочнике "/usr/f77lib" и содержит следующие
файлы:

f77pass0
   - нулевой проход (только для ЭВМ без раздельной адресации
     команд и данных);

f77p1
   - первый проход (для трансляции без флага "-f");

f77p1f
   - первый проход (для трансляции с  флагом  "-f");  обычно
     имена  "f77p1"  и  "f77p1f"  ссылаются на один и тот же
     файл, хотя на ЭВМ без процессора  плавающей  точки  ис-
     пользование разных вариантов компилятора для трансляции
     с "-f" и без "-f" уменьшает количественные  ограничения
     компилятора;

/usr/bin/f77
   - команда "f77", анализирует параметры и запускает компи-
     лятор, команду "cc" и редактор связей "ld";

libF77.a
   - библиотека "Фортран-77 на счете";

libI77.a
   - библиотека "ввод/вывод Фортрана-77";

      На дистрибутивной ленте  в  справочнике  "/usr/f77lib"
записано  несколько  вариантов  компилятора, предназначенных
для работы на разных типах ЭВМ (справочник записан на  ленту
без  префикса  "/usr/").   Постановка  компилятора состоит в
считывании справочника "/usr/f77lib" с дистрибутивной ленты,
если  это  не  было сделано при постановке системы,  и наст-
ройке его с помощью команды "make".  Возможные параметры ко-
манды  "make" (класс ЭВМ и об'ем памяти на дисках, отводимой
под компилятор) зависят от версии компилятора  и  описаны  в
файле  Read_me.  Для получения информации о параметрах после
считывания справочника "/usr/f77lib" наберите на терминале:

 cd /usr/f77lib
 cat Read_me
или, для получения информации на АЦПУ,
 pr Read_me >/dev/lp

Фактически вся настройка состоит в уничтожении  ненужных  на
данной  ЭВМ вариантов компилятора и перемещении используемых
программ на стандартное место.






                                                          35

                         СОДЕРЖАНИЕ



ВВЕДЕНИЕ...............................................    2

1.  ВЫЗОВ КОМПИЛЯТОРА С ФОРТРАНА-77....................    3

2.  РАСШИРЕНИЯ ЯЗЫКА...................................    6
    2.1. Формат исходного текста.......................    6
    2.2. Оператор включения файла......................    7
    2.3. Комплексные данные двойной точности...........    7
    2.4. Короткие целые числа..........................    7
    2.5. Описатели типа................................    7
    2.6. Тип 'undefined'...............................    8
    2.7. Динамическое  размещение переменных...........    8
    2.8. Рекурсия......................................    8
    2.9. Двоичные,   восьмеричные,    шестнадцатеричные
         константы.....................................    8
    2.10.Символьные константы..........................    9
    2.11.Константы Холлерита...........................    9
    2.12.Операторы эквивалентности.....................    9
    2.13.Однопроходная инструкция 'do'.................   10
    2.14.Внутренние файлы..............................   10
    2.15.Разделители при форматном вводе...............   10
    2.16.Дополнительные встроенные функции.............   10
    2.17.Совместимость с Фортраном-4 ОС РВ.............   11

3.  ОГРАНИЧЕНИЯ ЯЗЫКА..................................   12
    3.1. Выравнивание чисел с двойной точностью........   12
    3.2. Описание подпрограмм и  функций  без  аргумен-
         тов...........................................   12
    3.3. Ограничения на имена и на оператор 'data'.....   12
    3.4. Реализация форматов 'tl' и 't'................   13
    3.5. Ограничения для ЭВМ типа СМ-4.................   13

4.  МЕЖПРОГРАММНЫЙ ИНТЕРФЕЙС...........................   14
    4.1. Имена процедуры...............................   14
    4.2. Представление данных..........................   14
    4.3. Возвращаемые значения.........................   15
    4.4. Список аргументов.............................   15

5.  ФОРМАТЫ ФАЙЛОВ.....................................   17
    5.1. Структура файлов Фортрана.....................   17
    5.2. Совместимость с Си............................   17
    5.3. Предварительно подсоединенные файлы...........   18

6.  РЕКОМЕНДАЦИИ ПО ПРОГРАММИРОВАНИЮ...................   19
    6.1. Оптимизация программ..........................   19
    6.2. Совместная трансляция с программами на Си.....   19
    6.3. Отладка программ на Фортране-77...............   20

ЛИТЕРАТУРА.............................................   21

ПРИЛОЖЕНИЕ 1.  ОТЛИЧИЯ ФОРТРАНА-77 ОТ ФОРТРАНА-66......   22
    1.1. Использование констант Холлерита..............   22
    1.2. Символьные константы..........................   22
    1.3. Выход из цикла 'do'...........................   22
    1.4. Формат программы..............................   22
    1.5. Оператор entry................................   23
    1.6. Инструкция 'do'...............................   23
    1.7. Символьный тип данных.........................   23


36

    1.8. Оператор implicit.............................   24
    1.9. Оператор parameter............................   24
    1.10.Об'явление массивов...........................   24
    1.11.Оператор save.................................   25
    1.12.Оператор intrinsic............................   25
    1.13.Операция сцепления............................   25
    1.14.Присваивание символьных переменных............   25
    1.15.Вырезки из строки.............................   26
    1.16.Возведение в степень..........................   26
    1.17.Снятие ограничений............................   26
    1.18.Оператор if-then-else.........................   26
    1.19.Операторы возвратов...........................   27
    1.20.Ввод/вывод....................................   27
    1.20.1.Задание формата.............................   27
    1.20.2.Спецификации end=, err= и iostat=...........   27
    1.21.Форматный ввод/вывод..........................   28
    1.21.1.Литеральные константы.......................   28
    1.21.2.Спецификации позиционирования...............   28
    1.21.3.Разделитель ':'.............................   28
    1.21.4.Необязательные знаки '+'....................   28
    1.21.5.Пробелы на вводе............................   29
    1.21.6.Непредставляемые величины...................   29
    1.21.7.Спецификация iW.M...........................   29
    1.21.8.Преобразования чисел с плавающей точкой.....   29
    1.21.9.Спецификация 'a'............................   29
    1.22.Стандартные устройства ввода и вывода.........   29
    1.23.Форматное  преобразование,  управляемое  спис-
         ком...........................................   30
    1.24.Прямой ввод-вывод.............................   30
    1.25.Внутренние файлы..............................   31
    1.26.Операторы open,close и inquire................   31
    1.26.1.Оператор open...............................   31
    1.26.2.Оператор close..............................   32
    1.26.3.Оператор inquire............................   32

ПРИЛОЖЕНИЕ 2.  НАСТРОЙКА КОМПИЛЯТОРА НА ЭВМ............   35




























                                                          37

