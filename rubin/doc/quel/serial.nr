.th SERIAL QUEL "СУБД \*(RU. ОПЕРАТОРЫ QUEL"
.sh ИМЯ
\fBserial\fR \- работа с глобальными переменными в языке QUEL.
.sh ФОРМАТ
\fB define \fIимя\fB=\fIзначение\fR \- создание переменной;
\fB\fB destroy \fIимя\fR \- уничтожение переменной;
 функция \fBser_next("\fIимя\fB")\fR \- операция v++;
 функция \fBser_last("\fIимя\fB")\fR \- дай предыдущее значение;
 функция \fBser_set("\fIимя\fB",\fIзначение\fB)\fR \- инициализация.
.sh ОПИСАНИЕ
.i0
Глобальные переменные языка QUEL предназначены в основном для
получения уникальных номеров при занесении информации в базу
данных.
Они представляют собой числа формата \fBi4\fR, которые хранятся в базе
данных под заданными именами (образуемыми по таким же правилам,
как и имена отношений) и с которыми можно делать следующие операции:
.s1
1. Создать переменную:

 \fBdefine \fIимя\fB=\fIзначение\fR

Оператор создает новую глобальную переменную под именем \fIимя\fR и
присваивает ей начальное значение \fIзначение\fR. В базе данных
не должно существовать отношений или переменных под заданным
\fIименем\fR; \fIзначение\fR должно быть целой константой (возможна константа
типа \fBdate\fR или \fBtime\fR).
\fIимя\fR - идентификатор, состоящий не более чем из 8-ми букв и
цифр и начинающийся с буквы (символ \fB_\fR считается буквой),
причем строчные и прописные буквы считаются эквивалентными:
.s1
2. Получить текущее значение переменной, увеличив затем
значение переменной на 1 (аналогично операции \fBv++\fR языка Си),
можно с помощью функции языка QUEL (функция может быть использована в
любом выражении в операторах QUEL):

 \fBser_next("\fIимя\fB")\fR

Значением этой функции является текущее значение переменной "\fIимя\fR",
причем значение переменной после каждого обращения к функции
увеличивается на 1 неразделяемым образом (гарантируется, что при
параллельной работе нескольких запросов к базе данных
каждое обращение к \fBser_next\fR выработает уникальное значение).
Эта функция используется для выработки уникальных чисел.
.s1
3. Получить снова значение переменной, которое было
выдано при последнем обращении к \fBser_next\fR или \fBser_set\fR:

 \fBser_last("\fIимя\fB")\fR

Функция может быть вызвана, только если в текущем сеансе работы с
базой данных были обращения к функциям \fBser_next\fR или \fBser_set\fR с
данным именем переменной. Она выдает значение переменной,
полученное из базы данных в последний раз. Эта функция позволяет,
получив уникальное значение функцией \fBser_next\fR, затем использовать
его несколько раз (например, получив номер очередной книги для
записи новой книги в базу данных, на него затем можно ссылаться
с помощью данной функции).
.s1
4. Можно инициализировать переменную с помощью функции:

 \fBser_set("\fIимя\fB", \fIзначение\fB)\fR

Переменная должна уже существовать. Эта функция позволяет
инициализировать переменную значением, полученным в операторе QUEL,
в отличие от оператора \fBdefine\fR, в котором значение переменной
задается константой. Функция выдает в качестве результата
значение переменной, которое та имела до инициализации.
.s1
5. Уничтожить переменную можно оператором \fBdestroy\fR.

 \fBdestroy \fIимя_переменной\fR
.sh "ПРИМЕР"
.s1
Допустим, у нас есть три отношения, в которые записывются
результаты экспериментов: эксперимент - описания условий
эксперимента, значения - описание результатов эксперимента,
коммент - комментарии к экспериментам. Для связи их
друг с другом служит уникальный номер эксперимента (номер).
Заведем в базе данных переменную с очередным номером эксперимента:

 \fBdefine max_num=1\fR

Теперь для записи информации об очередном эксперименте нужно
будет выполнить следующие операторы QUEL:
\fB
 append to эксперимент
   (номер=ser_next("max_num"),
   ..присваивание остальных значений.. )
 append to значения
   (номер=ser_last("max_num"),
   ..присваивание остальных значений.. )
 append to коммент
   (номер=ser_last("max_num"),
   ..присваивание остальных значений.. )
\fR
.sh ПРИМЕЧАНИЯ
.s1
Посмотреть значение переменной можно с помощью оператора \fBhelp\fR.
Переменные хранятся в системном отношении \fBrelations\fR как
особый тип отношения, значение переменной хранится в поле
длины кортежа.
