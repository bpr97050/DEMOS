
            дддд   ееееее   м     м    oooo     сссс
           д   д   е        мм   мм   o    o   с    с
          д    д   е        м м м м   o    o   с    с
          д    д   еееее    м  м  м   o    o   с
          д    д   е        м     м   o    o   с
          д    д   е        м     м   o    o   с    с
         дддддддд  ееееее   м     м    oooo     сссс



          демосдемосдемосдемосдемосдемосдемосдемосде
          емосдемосдемосдемосдемосдемосдемосдемосдем
          мо                                      мо
          ос                                      ос
          сд        ОПЕРАЦИОННАЯ СИСТЕМА          сд
          де                                      де
          ем               ДЕМОС                  ем
          мо                                      мо
          ос                                      ос
          сд                                      сд
          де             Версия 1.0               де
          ем                                      ем
          мо                                      мо
          сдемосдемосдемосдемосдемосдемосдемосдемосд
          демосдемосдемосдемосдемосдемосдемосдемосде







                     МАКРОПРОЦЕССОР M4






                Бардин Валерий Владимирович
               Черногрядская Наталья Юрьевна












                       МОСКВА - 1985









                                                           1



   Данный документ является руководством по m4  -  макропро-
цессору операционной системы ДЕМОС.





























































2




               1. Назначение макропроцессора


   Макропроцессор m4 является средством, позволяющим  созда-
вать  специализированные расширения языков программирования.
Он  обеспечивает  обработку  макроопределений  и  встроенных
функций с параметрами, условные проверки, изменение значений
макропеременных, арифметические операции над целыми числами,
обработку файлов, специализированные функции обработки строк
и некоторые другие возможности.

   Основной операцией m4 является копирование файла ввода  в
файл  вывода. При считывании из файла ввода очередной строки
осуществляется проверка  каждой  алфавитно-цифровой  лексемы
(лексемой  называется совокупность букв и цифр, используемая
как  единое  целое  при  описании  синтаксиса  языка).  Если
рассматриваемая  лексема представляет собой имя макроопреде-
ления, то это имя заменяется соответствующим текстом  -  ре-
зультатом  работы макровызова; полученная строка снова запи-
сывается в файл ввода для повторного просмотра. Макро  могут
быть  вызваны  с параметрами. В этом случае, перед повторным
просмотром результирующего текста, осуществляется подстанов-
ка параметров в соответствующие позиции этого текста.

   В m4 существует около двадцати встроенных функций, выпол-
няющих  различные операции. Кроме того, пользователю предос-
тавляется возможность задавать новые макроопределения, прин-
цип  действия  которых  аналогичен  встроенным  функциям (за
исключением того, что некоторые встроенные функции оказывают
побочное  воздействие  на состояние процесса). Полный список
встроенных функций приведен в Приложении.



                    2. Использование m4


   Команда вызова m4 в операционной системе ДЕМОС имеет сле-
дующий формат:

                       m4 [файл ...]

Файлы, указанные в списке параметров, обрабатываются  после-
довательно.  Если параметры отсутствуют или параметром явля-
ется знак "-", считывается стандартный файл ввода. Результи-
рующий  текст  записывается в стандартный файл вывода. Перед
его дальнейшей обработкой нужно воспользоваться командой:

                m4 [файл ...] > файл_вывода




                3. Задание макроопределений


   Основной  встроенной   функцией   m4   является   функция
"define",  которая используется для определения новых макро.



                                                           3

В результате выполнения функции:

                    define(имя,значение)

указанному макроимени присваивается определенное "значение".
Таким образом, при последующем появлении в тексте это макро-
имя будет заменено на соответствующее ему "значение".

   "Имя" представляет собой последовательность букв и  цифр,
начинающуюся  с  буквы  (знак  подчеркивания  "_"  считается
буквой). "Значение" - это произвольный текст, содержащийся в
сбалансированных скобках; он может занимать несколько строк.
Например:

          define(N, 100)
           ...
          if (i > N)

макропеременной  "N"  присваивается  значение  100,  и   эта
константа затем используется в операторе "if".

   Параметры функции "define" заключаются  в  скобки.  Таким
образом,  если непосредственно за левой скобкой "(" имя мак-
роопределения или встроенной функции не указывается, -  зна-
чит параметры отсутствуют. В рассмотренном примере в функции
"define" задается только константа (т.е. по-существу функция
не  имеет параметров), поэтому скобки использовать не обяза-
тельно.

   Макропеременная распознается только в  том  случае,  если
она появляется в комбинации с неалфавитно-цифровыми символа-
ми. Так, в примере:

          define (N, 100)
           ...
          if (NNN > 100)

переменная "NNN" не имеет ничего общего с макро "N", хотя  с
первого взгляда может показаться, что это последовательность
макропеременных.

   Одна макропеременная может быть определена через другую.

          define(N, 100)
          define(M, N)

в данном примере обе макропеременные принимают значение 100,
но  при изменении значения макропеременной "N", значение "M"
изменяться не будет. Эта запись буквально означает: "M прис-
воить значение параметра N".

   Существует еще один способ определения макроимен. Он зак-
лючается в изменении порядка определения:

         define(M, N)
         define(N, 100)

В этом примере, как и в  предыдущем,  макропеременным  также
присваивается значение 100, с той разницей, что "M" принима-
ет текущее значение "N" (поскольку "M" заменяется  значением
макропеременной "N", которая, в свою очередь, принимает зна-
чение 100).


4




                      4. Экранирование


   В m4 механизм экранирования используется  в  том  случае,
если  нужно  отказаться от немедленной замены значений пара-
метров функции "define".  Значение  текста,  заключенного  в
левый и правый апострофы `...', не изменяется (апострофы при
этом удляются). Например:

                       define(N, 100)
                       define(M, `N')

значением макропеременной "M" является текущее значение мак-
ропеременной  "N", т.е. при изменении значения макроперемен-
ной "N", изменяется и "M".

   При оценке любого параметра m4 всегда удаляет  один  уро-
вень  апострофов.  Это правило распространяется не только на
макропеременные. Так, для того чтобы вывести имя  встроенной
функции "define", нужно заключить его в апострофы:

                        `define'=1;


   Рассмотрим еще один способ переопределения  макроперемен-
ной "N":

                       define(N,100)
                       define(N,200)

к сожалению, во втором операторе определения оценка макропе-
ременной  "N"  осуществляется  сразу  же после ее появления;
т.е. "N" замещается параметром 100 так, как если бы было за-
писано:

                      define(100,200)

В макропроцессоре m4 выражения подобного типа  игнорируются,
так  как  в  нем  можно  определять только макроимена (но не
константы). Для  того  чтобы  переопределить  значение  "N",
нужно воспользоваться механизмом экранирования:

         define(N,100)
           ...
         define(`N',200)

В m4 в апострофы заключается обычно первый параметр макрооп-
ределения.

   Если использование левого и правого апострофов в качестве
символов  экранирования  по какой-либо причине не удобно, то
их   можно   заменить   с   помощью    встроенной    функции
"changequote", например функция:

                      changequote([,])

заменяет символы экранирования на квадратные скобки. Символы
экранирования,  принятые по умолчанию, могут быть восстанов-



                                                           5

лены с помощью функции:

                        changequote


   Для  задания  макроопределений   используются   еще   две
функции.  Функция "undefine" удаляет существующие макроопре-
деления или встроенные функции. Например, функция:

                       undefine(`N')

отменяет   определение   макропеременной   "N".   Встроенная
функция,  например  "define",  может быть отменена следующим
образом:

                     undefine(`define')

Однако, нужно помнить, что если пользователь  удалил  какую-
либо функцию, он уже не сможет ее восстановить.

   Встроенная функция "ifdef" дает  возможность  переопреде-
лить  значение  макропеременной.  Она может использоваться с
тремя параметрами: если макропеременная, заданная первым па-
раметром, определена, то в качестве ее значения используется
второй параметр, если нет - третий (при отсутствии  третьего
параметра  макропеременной  присваивается значение "пусто").
Например:

                 ifdef(`СМ', НАИРИ-4, СМ-4)




                        5. Параметры


   Вызовы макропеременных с различными параметрами имеют не-
одинаковые результаты. Внутри замещаемого текста (второй па-
раметр функции "define") любой макровызов вида "$n"  заменя-
ется  соответствующим  ему  n-ым параметром. Например, макро
"bump", определенный следующим образом:

                   define(bump, $1=$1+1)

генерирует код, который увеличивает  значение  параметра  на
единицу, т.е. значением функции:

                          bump(x)

является:

                           х=х+1


   Несмотря на то, что макро может  иметь  любое  количество
параметров,  из  них доступны только первые девять - от "$1"
до "$9". (Имени самой макропеременной соответствует параметр
"$0", но он используется редко). Недостающие параметры заме-
няются строками нулевой длины. Так, можно  определить  макро
"cat",  осуществляющего конкатенацию значений своих парамет-




6

ров:

               define(cat,$1$2$3$4$5$6$7$8$9)

Значением функции:

                         cat(х,y,z)

является строка

                            xyz

остальные макропеременные ("$4"..."$9")  заменяются  пустыми
строками, так как соответствующие им параметры отсутствуют.

   Пробелы, знаки табуляции и символы новых  строк,  стоящие
перед  именем  макропеременной,  игнорируются; все остальные
"пробелы" интерпретируются соответствующим  образом.  Напри-
мер:

                     define(a,  b    c)

макропеременной "a" присваивается значение "b    c".

   Разделителем параметров является запятая. Однако,  внутри
параметра, заключенного в круглые скобки, запятая рассматри-
вается как его часть. Так, в функции:

                      define(a,(b,c))

всего два параметра: "a" и "(b,c)". Если запятую или  скобку
необходимо ввести в качестве параметров, их заключают в сим-
волы экранирования.



            6. Встроенные арифметические функции


   Для выполнения арифметических операций над целыми числами
в  m4  используются  две  встроенные функции. Функция "incr"
увеличивает числовой параметр на единицу. Так например, если
некоторую макропеременную "N1" необходимо определить как "на
единицу больше, чем текущее значение  макропеременной  "N"",
нужно воспользоваться записью:

          define(N,100)
          define(N1,`incr(N)')


   Встроенная функция "eval" используется более  часто.  Она
выполняет  арифметические операции произвольной точности над
целыми числами.  Возможны  следующие  операторы  (в  порядке
уменьшения приоритетов):

+  -            унарные "+" и "-"

**  ^           возведение в степень

* / %           умножение, деление, остаток от деления




                                                           7

+  -            сложение, вычитание

== != < <= > >= операторы отношения

!               логическое "не"

&  &&           логическое "и"

|  ||           логическое "или"

   Для изменения порядка вычисления  выражений  используются
круглые  скобки.  Все  операнды  в  арифметическом выражении
функции "eval" должны быть числами.  В  операциях  отношения
значению  "истина" соответствует 1, а значению "ложь" - 0. В
операционнойсистеме ДЕМОС точность функции "eval" составляет
32 бита.

   В качестве простого примера рассмотрим следующий: присво-
ить макропеременной "M" значение "2**N+1". Решение:

          define(N,3)
          define(M,`eval(2**N+1)')

Текст, определяющий макропеременную, заключается в  левый  и
правый  апострофы  (за  исключением,  конечно,  того случая,
когда этот текст представляет собой одно число).



                    7. Обработка файлов


   С помощью встроенной функции "include" во входные  данные
можно включить новый файл:

                       include(файл)

"Файл" представляет собой набор определений и вставляется  в
то  место, где указывается команда "include". Таким образом,
значением функции "include" (т.е. замещающим текстом)  явля-
ется содержимое "файла".

   Если файл, указанный  в  команде  "include",  недоступен,
возникает  неисправимая  ошибка. Для того чтобы избежать по-
добную   ситуацию,   используется   альтернативная   функция
"sinclude",  которая отличается от "include" только тем, что
если файл недоступен, не происходит ни останова процесса, ни
выдачи диагностического сообщения.

   В m4 существует также возможность в процессе работы поме-
щать  выходные  результаты во временные файлы, а затем выво-
дить сразу весь собранный материал. M4  поддерживает  девять
выходных потоков, пронумерованных от 1 до 9. По команде:

                         divert(n)

вся выходная информация добавляется к содержимому временного
файла  с  дескриптором  "n".  Чтобы прекратить запись в этот
файл, команда "divert" указывается еще раз. В частности, ко-
манда "divert" (или "divert(0)") возобновляет запись резуль-
татов в стандартный файл вывода.



8

   Текст, который содержит временный файл,  полностью  выво-
дится в конце процесса. Вывод потоков осуществляет- ся в по-
рядке их номеров. Однако, каждый поток в любой момент време-
ни может быть возвращен и добавлен к текущему потоку. Коман-
да

                          undivert

осуществляет вывод текста из всех  потоков.  Порядок  вывода
текста  задают  параметры команды "undivert". Если параметры
отсутствуют, вывод осуществляется в порядке увеличения номе-
ров выходных потоков. Команда "divert", уничтожает только ту
информацию, которая выводится в поток с  номером,  выходящим
за  пределы  интервала 0-9. Команда же "undivert" уничтожает
всю часть временного файла,  содержавшую  выведенный  текст.
Необходимо  помнить, что значением команды "undivert" выход-
ной поток не является. Более того, выведенный  текст  второй
раз не проверяется.

   Встроенная функция "divnum" выдает номер текущего  выход-
ного потока. Номер стандартного выходного потока равен нулю.



                    8. Связь с системой


   Встроенная функция "syscmd" позволяет выполнять любую ко-
манду системы. Например, функция

                        syscmd(date)

вызывает  выполнение  команды  "date".  Чаще  всего  функция
"syscmd"  используется  для создания файлов, которые затем с
помощью функции "include" включаются в файл ввода.

   Для создания уникальных имен файлов используется встроен-
ная  функция  "maketemp".  Она заменяет строку XXXXX в своем
параметре идентификатором текущего процесса.



                    9. Проверка условий


   Встроенная функция "ifelse" позволяет  осуществлять  про-
верку условия. Например, функция:

                      ifelse(a,b,c,d)

сравнивает две строки "a" и "b". Если они идентичны,  значе-
нием  функции  "ifelse" является строка "c"; если различны -
строка "d". При отсутствии  четвертого  параметра  значением
функции "ifelse" является пустая строка.

   Используя  функцию  "ifelse",  можно   определить   макро
"compare",  который сравнивает две строки и возвращает "YES"
или "NO", в зависимости от того, идентичны они или  различны






                                                           9

соответственно:

         define(compare,`ifelse($1, $2, YES, NO)')

Апострофы препятствуют преждевременному  выполнению  функции
"ifelse".

   Фактически, функция "ifelse" может иметь любое число  па-
раметров. Например:

                   ifelse(a,b,c,d,e,f,g)

eсли строка "a" соответствует строке "b", результатом  явля-
ется  "c", если не соответствует - сравниваются строки "d" и
"e". Если "d" идентична "e",  результатом  является  "f".  В
противном  случае значением функции "ifelse" является строка
"g".

   При отсутствии  четвертого  параметра  значением  функции
"ifelse" является пустая строка. Например:

                       ifelse(a,b,c)

значением функции является строка "c", если строки "a" и "b"
соответствуют друг другу, или ноль - если не соответствуют.



                    10. Обработка строк


   Значение встроенной функции "len" - размер строки,  явля-
ющейся ее параметром. Например:

                        len(абвгде)

результат: 6;

                         len((а,б))

результат: 5.

   Встроенная функция "substr" может использоваться для соз-
дания подстрок. Значением функции

                       substr(s,i,n)

является подстрока строки "s", начинающаяся с  i-ой  позиции
(сперва  i=0), длинной в "n" символов. Если параметр "n" от-
сутствует, значением является оставшаяся часть строки.  Нап-
ример:

                    substr(`абвгдежз',1)

результат - строка "бвгдежз".

      Если число, указываемое параметрами "i" или "n",
    превышает размер строки, результат будет ошибочным.

   Значением встроенной функции "index(s1,s2)" является либо
номер  позиции  строки  "s1", с которой начинается подстрока
"s2"; либо "-1", если подстрока "s2" не была найдена в стро-


10

ке "s1". Номер первой позиции принимается равным нулю.

   Встроенная функция  "translit"  выполняет  транслитерацию
символов. Так, функция:

                      translit(s,f,t)

модифицирует строку "s" путем замены символа,  найденного  в
строке "f" соответствующим символом параметра "t". Например,
функция:

                  translit(s,aeiou,12345)

заменяет гласные буквы соответствующими цифрами. Если строка
"t" короче "f", то лишние символы "f" удаляются. Если строка
"t" отсутствует, из строки "s" удаляются  символы  подстроки
"f". Так, например, функция

                     translit(s,aeiou)

удаляет из строки "s" все гласные буквы.

   Еще одна встроенная функция "dnl" удаляет  все  указанные
за  ней  символы  до  символа новой строки включительно. Эта
функция используется для удаления пустых строк, иногда  заг-
ромождающих файл вывода. Так, в следующем примере:

                       define(N,100)
                       define(M,200)
                       define(L,300)

символ новой строки, стоящий в конце каждой строки, не явля-
ется частью определения, поэтому он копируется в файл вывода
(что не желательно). Если же к каждой из этих строк добавить
функцию "dnl", то символы новой строки исчезнут.

   Такой же результат может быть получен другим способом:

          divert(-1)
                define(...)
                ...
          divert




                    11. Протокол работы


   Встроенная функция "errprint" записывает свои параметры в
стандартный  файл диагностических сообщений. Например, сооб-
щение о неисправимой ошибке можно сформировать следующим об-
разом:

                  errprint(`fatal error')


   Встроенная функция "dumpdef" представляет собой  средство
отладки, которое распечатывает текущие макроопределения ука-
занных параметров. Если параметры отсутствуют, выдаются  все
существующие  макроопределения.  Имена  встроенных функций и
макроопределений должны быть заключены в апострофы.


                                                          11

                                                 ПРИЛОЖЕНИЕ 


                1. СПИСОК ВСТРОЕННЫХ ФУНКЦИЙ


changequote(l,r)
     заменить левый (l) и правый (r) символы экранирования;

define(имя,значение)
     определить новое макро;

divert(n)
     добавить выходную  информацию  к  содержимому  файла  с
     дескриптором "n";

divnum
     выдать номер текущего выходного потока;

dnl  удалить все указанные далее символы (до  символа  новой
     строки включительно);

dumpdef(`имя',`имя',...)
     выдaть текущие определения указанных макро;

errprint(s,s,...)
     записать указанные строки в файл диагностических  сооб-
     щений;

eval(числовое_выражение)
     вычислить арифметическое выражение;

ifdef(`имя',верно,неверно)
     переопределить значение макро;

ifelse(a,b,c,d)
     проверить условие;

include(файл)
     вставить "файл" во входные данные;

incr(число)
     увеличить "число" на 1;

index(s1,s2)
     выдать номер позиции строки "s1", с которой  начинается
     подстрока "s2";

len(строка)
     выдать длину "строки";

maketemp(...XXXXX...)
     заменить строку XXXXX идентификатором текущего  процес-
     са;

sinclude(файл)
     аналогична "include", но если "файл" недоступен,  сооб-
     щение об ошибке не выдается и процесс не завершается;

substr(s,i,n)
     выдать подстроку строки "s", начинающуюся с i-ой  пози-
     ции, длиной в "n" символов;


12


syscmd(команда)
     выполнить "команду" операционной системы;

translit(s,f,t)
     перекодировать строку "s", заменив символы, входящие  в
     строку "f" соответствующими символами строки "t";

undefine(`имя')
     удалить  определение  макропеременной  или   встроенной
     функции;

undivert(число,число,...)
     выдать содержимое указанных выходных потоков.


















































                                                          13



                           СОДЕРЖАНИЕ



1.  Назначение макропроцессора.........................    3

2.  Использование m4...................................    3

3.  Задание макроопределений...........................    3

4.  Экранирование......................................    5

5.  Параметры..........................................    6

6.  Встроенные арифметические функции..................    7

7.  Обработка файлов...................................    8

8.  Связь с системой...................................    9

9.  Проверка условий...................................    9

10. Обработка строк....................................   10

11. Протокол работы....................................   11

ПРИЛОЖЕНИЕ 1.  СПИСОК ВСТРОЕННЫХ ФУНКЦИЙ...............   12



































14

