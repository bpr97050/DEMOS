.\" ВЫКЛЮЧИТЬ ТАБУЛЯЦИИ ПРИ РЕДАКТИРОВАНИИ: команда -t!!!
.th MODIFY QUEL "СУБД \*(RU. ОПЕРАТОРЫ QUEL"
.sh ИМЯ
modify \- изменение структуры памяти отношений.
.sh ФОРМАТ
.in +5
.ti -5
.bd modify
имя_отн
.bd to
структ_памяти
[
.bd on
ключ1 [ :
.it порядок_сорт
] [ { , ключ2 [ :
.it порядок_сорт
] } ] ]
[
.bd where
[
.bd "fillfactor ="
.it n
] [
.bd ", tuples ="
.it n
] [
.bd ", ufactor ="
.it n
] [
.bd ", minpages ="
.it n
] [
.bd ", maxpages ="
.it n
] ]
.i0
.sh ОПИСАНИЕ
.it Отношение с именем имя_отн
преобразовывается в указанную структуру памяти
.it структ_памяти.
Только владелец отношения может его модифицировать.
Эта команда используется для повышения эффективности
при использовании больших
или часто используемых отношений.
Структуры памяти определяются следующим образом:
.s3
.if n .in 16
.if t .in 2.0i
.if n .ta 12-2n
.if t .ta 1.5i-2n
.de xx
.if n .ti -12
.if t .ti -1.5i
\\fB\\$1\\fR\t\-
..
.xx isam
индексно-последовательная структура
.xx cisam
сжатая isam
.xx hash
хэш-структура
.xx chash
сжатая hash
.xx shash
"последовательная" хэш-структура (соседние значения ключа пишутся
подряд)
.xx cshash
сжатая "последовательная" hash-структура
.xx heap
структура куча
.xx cheap
сжатая heap
.xx heapsort
heap с отсортированными кортежами и удаленными
повторяющимися кортежами
.xx cheapsort
сжатая heapsort
.xx truncated
heap со всеми удаленными кортежами
.dt
.s3
.i0
Документ ``\fBСоздание и поддержка баз данных с использованием \*(II\fR''
описывает, как выбирать эти структуры
в зависимости от использования отношений.
.s3
Алгоритм сжатия только удаляет последние пробелы в
символьных полях.
Может существовать более эффективная схема сжатия,
но разница между принятым алгоритмом и
более эффективным, но медленным
алгоритмом сжатия не очевидна.
.s3
Если фраза
.bd on
опущена при модификации в isam, cisam, hash или chash,
по умолчанию ключем сортировки считается первый домен.
Когда модифицируется в heap или cheap, фраза
.bd on
может быть опущена.
Также и при модификации в heapsort или cheapsort, фраза
.bd on
необязательна.
.s3
Когда отношение сортируется (isam, cisam, heapsort и cheapsort),
предпочтение отдается тем ключам, которые были указаны во фразе
.bd on
(если их несколько).
Отношение сортируется по ключам в том порядке, в котором они
указаны в запросе после фразы
.bd on
.
Домены, не указанные в запросе
будут использоваться как наименее значащие
ключи сортировки в последовательности номеров доменов.
.s3
Когда отношение модифицируется в heap или cheap,
то
.it порядок_сорт
может быть указан как
.bd ascending (восходящий)
или
.bd descending (нисходящий).
В остальных случаях всегда
.bd ascending (восходящий).
Каждый ключ указанный во фразе
.bd on
может быть указан как:
.s1
.if n .ti +5
.if t .ti +0.5i
\fIключ\fB:descending\fR
.s1
что будет означать, что сортировка по этому ключу будет
иметь нисходящий порядок.
.bd ascending
тоже может быть указан после двоеточия (`:'),
хотя это не обязательно , т.к.
это является действием по умолчанию.
.bd Descending (нисходящий порядок)
может быть обозначен символом `\c
.bd d\c
\&' и, соответственно,
.bd ascending (нисходящий порядок)
может быть обозначен символом `\c
.bd a\c
\&'.
.s3
.it Fillfactor
указывет в процентах
(от 1 до 100) размер
заполненной области
первичной страницы данных
при идеальных условиях.
.it Fillfactor
может быть использован в isam, cisam, hash и chash.
При использовании больших факторов полноты
наличие ключей при распределении кортежей по страницам
будет причиной их переполнения,
и, тем самым, ухудшения
характеристик доступа.
.s3
.it tuples
указывает предполагаемое число записей в отношении при модификации в
структуру
hash или chash (а также shash и cshash).
.it ufactor
при модификации в hash (chash)
указывает предполагаемое среднее число записей
с одинаковым ключом в отношении. Например, ufactor=1 означает, что
каждый ключ уникален.
Структура shash представляет собой просто hash с ufactor=1.
.it Minpages
(старый ключ)
указывает минимальное число первичных страниц при модификации
отношений в структуру
hash или chash.
.it Maxpages
(старый ключ)
указывает максимальное число первичных страниц
при модификации отношения в структуру
hash или chash.
Из
.it minpages
и
.it tuples
может присутствовать только один.
Если присутствуют
.bd minpages
и
.bd maxpages,
то
.bd minpages
не должен превышать
.bd maxpages.
.sp
Значение по умолчанию для
.bd fillfactor\c
,
.bd minpages\c
, и
.bd maxpages
следующие:
.if n .ta 5 12 25 35
.if t .ta 0.5i 1i 3i 4.5i
.nf
.ul
.s1
		FILLFACTOR      MINPAGES        MAXPAGES
.s2
	hash	50	10	не ограничен
	chash	75	1	не ограничен
	isam	80	NA	NA
	cisam	100	NA	NA
.fi
.dt
.sh ПРИМЕРЫ
.nf
.in 0
.ti 0
/* Преобразовать отношение emp в индекснопоследовательную
	структуру памяти с ключевым доменом "name" */
.s1
modify emp to isam on name
.s1
/* Если "name" первый домен отношения emp,
	то этот же результат будет достигнут и
	следующей командой */
.s1
modify emp to isam
.s1
/* проделаем это же преобразование но потребуем 60%
	использования всех первичных страниц */
.s1
modify emp to isam on name where fillfactor = 60

/* Преобразуем отношение supply в сжатую hash-структуру
	с ключевими доменами "num" и "quan" */
.s1
modify supply to chash on num, quan
.s1
/* Проделаем то же самое, но также укажем, что нужно
	отвести место под 1000
	записей, а ключ (num, quan) уникален */
.s1
modify supply to chash on num, quan
	where tuples=1000, ufactor=1
.s1
/* Снова сделаем то же самое, но только потребуем минимум
	 16 первичных страниц */
.s1
modify supply to chash on num, quan
	where minpages = 16
.s1
/* Преобразовать отношение parts в heap-структуру */
.s1
modify parts to heap
.s1
/* Преобразовать отношение parts снова в
	heap-структуру, но имеющиеся
	кортежи сортировать по домену
	"pnum" и все повторяющиеся кортежи удалить */
.s1
modify parts to heapsort on pnum
.s1
/* Преобразовать отношение employee в нисходящем
	порядке по управляющему,
	в восходящем порядке по зарплате и
повторяющиеся кортежи
	удалить */
.s1
modify employee to heapsort on manager, salary:descending
.fi
.sh "СМ.ТАКЖЕ"
sysmod(unix)
.sh "ЗАМЕЧАНИЯ"
.sp 2
В версиях \fB\*(RU 2.15\fR и старше при модификации в структуру \fBhash\fR
(или \fBshash\fR, \fBchash\fR, ...)
система не записывает на диск те листы отношения, которые не
содержат информации. При этом образуются файлы, имеющие небольшой
физический размер при большом логическом размере (за счет появления
"дырок"). Это позволяет
создавать отношения, расчитанные на "рост" без потери эффективности
доступа, физический размер которых будет расти по мере заполнения
(если указано \fBtuples=\fR намного больше текущего количества записей).
Такие базы нежелательно копировать командой "tar", так как при этом
все незанятые листы будут записаны на ленту и физический размер файла
после считывания с ленты резко возрастет (за счет заполнения "дырок").
.sp 2
Указание "\fBufactor\fR" при модификации в hash позволяет значительно
соптимизировать использование памяти на диске в случае, если значения
ключа в среднем изменяются непрерывно. При ufactor=1 и использовании в
качестве ключа переменной типа i2 или i4 записи с соседними значениями
ключей будут располагаться рядом, что заметно ускоряет заполнение
отношения (по командам append и copy) в случае, если записи заносятся в
порядке возрастания ключа, а также уменьшает физический размер файла при
частичном заполнении отношения.
Особенно рекомендуется использовать "ufactor=1", если в качестве ключа
используется какой-либо уникальный номер, возрастающий по мере
накопления информации.
